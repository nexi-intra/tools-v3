generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql", "multiSchema"]
}

// generator markdown {
//   provider = "prisma-markdown"
//   output   = "./ERD.md"
//   title    = "Tool Application"
// }

// generator zod {
//   provider = "zod-prisma-types"
// }

datasource db {
  provider = "postgresql"
  url      = env("TOOL_DATABASE_URL")
  schemas  = ["services", "tools"]
}

model SynchronizationLog {
  id          Int       @id @default(autoincrement())
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  created_by  String?   @db.VarChar
  updated_at  DateTime  @default(now()) @db.Timestamptz(6)
  updated_by  String?   @db.VarChar
  deleted_at  DateTime? @db.Timestamptz(6)
  name        String    @db.VarChar
  description String?   @db.VarChar
  category    String    @db.VarChar
  details     Json?
  hasError    Boolean   @db.Boolean
  error       String?   @db.VarChar

  @@schema("tools")
}

model AccessPoint {
  id           Int       @id @default(autoincrement())
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  created_by   String?   @db.VarChar
  updated_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_by   String?   @db.VarChar
  deleted_at   DateTime? @db.Timestamptz(6)
  name         String    @unique(map: "unique_accesspoint_name") @db.VarChar
  description  String?   @db.VarChar
  translations Json?
  sortorder    String?   @db.VarChar

  @@schema("tools")
}

model AuditLog {
  id           Int       @id @default(autoincrement())
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  created_by   String?   @db.VarChar
  updated_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_by   String?   @db.VarChar
  deleted_at   DateTime? @db.Timestamptz(6)
  name         String    @db.VarChar
  description  String?   @db.VarChar
  translations Json?
  action       String    @db.VarChar
  status       String    @db.VarChar
  entity       String    @db.VarChar
  entityid     String    @db.VarChar
  actor        String    @db.VarChar
  metadata     Json?

  @@schema("tools")
}

model Board {
  id            Int           @id @default(autoincrement())
  created_at    DateTime      @default(now()) @db.Timestamptz(6)
  created_by    String?       @db.VarChar
  updated_at    DateTime      @default(now()) @db.Timestamptz(6)
  updated_by    String?       @db.VarChar
  deleted_at    DateTime?     @db.Timestamptz(6)
  name          String        @db.VarChar
  description   String?       @db.VarChar
  translations  Json?
  status        String?       @db.VarChar
  layout        Json?
  metadata      Json?
  parentId      Int?
  parent        Board?        @relation("BoardForks", fields: [parentId], references: [id])
  forks         Board[]       @relation("BoardForks")
  managedBy     UserProfile[]
  groupOwnerId  String?       @db.VarChar
  groupViewerId String?       @db.VarChar

  @@schema("tools")
}

model Category {
  id           Int       @id @default(autoincrement())
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  created_by   String?   @db.VarChar
  updated_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_by   String?   @db.VarChar
  deleted_at   DateTime? @db.Timestamptz(6)
  name         String    @unique(map: "unique_category_name") @db.VarChar
  description  String?   @db.VarChar
  translations Json?
  sortorder    String?   @db.VarChar
  color        String?   @db.VarChar
  isGroupTool  Boolean?  @default(false) @db.Boolean
  tool         Tool[]

  @@schema("tools")
}

model Country {
  id           Int       @id @default(autoincrement())
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  created_by   String?   @db.VarChar
  updated_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_by   String?   @db.VarChar
  deleted_at   DateTime? @db.Timestamptz(6)
  name         String    @unique(map: "unique_country_name") @db.VarChar
  description  String?   @db.VarChar
  translations Json?
  region_id    Int
  sortorder    String?   @db.VarChar
  region       Region    @relation(fields: [region_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Channel      Channel?  @relation(fields: [channelId], references: [id])
  channelId    Int?
  homePageUrl  String?
  tools        Tool[]

  @@schema("tools")
}

model Language {
  id           Int         @id @default(autoincrement())
  created_at   DateTime    @default(now()) @db.Timestamptz(6)
  created_by   String?     @db.VarChar
  updated_at   DateTime    @default(now()) @db.Timestamptz(6)
  updated_by   String?     @db.VarChar
  deleted_at   DateTime?   @db.Timestamptz(6)
  name         String      @unique(map: "unique_language_name") @db.VarChar
  description  String?     @db.VarChar
  translations Json?
  code         String      @db.VarChar
  sortorder    String?     @db.VarChar
  ToolTexts    ToolTexts[]

  @@schema("tools")
}

model Purpose {
  id           Int       @id @default(autoincrement())
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  created_by   String?   @db.VarChar
  updated_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_by   String?   @db.VarChar
  deleted_at   DateTime? @db.Timestamptz(6)
  name         String    @unique(map: "unique_purpose_name") @db.VarChar
  description  String?   @db.VarChar
  translations Json?
  sortorder    String?   @db.VarChar

  // Many-to-many relation with Tool
  tools Tool[] @relation("ToolPurposes")

  @@schema("tools")
}

model Region {
  id           Int       @id @default(autoincrement())
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  created_by   String?   @db.VarChar
  updated_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_by   String?   @db.VarChar
  deleted_at   DateTime? @db.Timestamptz(6)
  name         String    @unique(map: "unique_region_name") @db.VarChar
  description  String?   @db.VarChar
  translations Json?
  sortOrder    String?   @db.VarChar
  Country      Country[]
  Channel      Channel[]

  @@schema("tools")
}

model Setting {
  id           Int       @id @default(autoincrement())
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  created_by   String?   @db.VarChar
  updated_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_by   String?   @db.VarChar
  deleted_at   DateTime? @db.Timestamptz(6)
  name         String    @db.VarChar
  description  String?   @db.VarChar
  translations Json?
  data         Json?

  @@schema("tools")
}

/// Tool
/// Is the core table for the Tool Application
///
/// @namespace Tools
/// @erd Tool

model Tool {
  id                      Int           @id @default(autoincrement())
  created_at              DateTime      @default(now()) @db.Timestamptz(6)
  created_by              String?       @db.VarChar
  updated_at              DateTime      @default(now()) @db.Timestamptz(6)
  updated_by              String?       @db.VarChar
  deleted_at              DateTime?     @db.Timestamptz(6)
  koksmat_masterdataref   String?       @db.VarChar
  koksmat_masterdata_id   String?       @db.VarChar
  koksmat_masterdata_etag String?       @db.VarChar
  name                    String        @db.VarChar
  description             String?       @db.VarChar
  translations            Json?
  url                     String        @db.VarChar
  status                  String?       @db.VarChar
  documents               Json?
  metadata                Json?
  icon                    String?       @db.VarChar
  uploaded_icon           String?       @db.VarChar
  category                Category      @relation(fields: [categoryId], references: [id])
  // Many-to-many relation with Purpose
  purposes                Purpose[]     @relation("ToolPurposes")
  categoryId              Int
  userProfiles            UserProfile[]
  countries               Country[]
  ToolTexts               ToolTexts[]
  parentId                Int?
  parent                  Tool?         @relation("ToolForks", fields: [parentId], references: [id])
  forks                   Tool[]        @relation("ToolForks")
  groupOwnerId            String?       @db.VarChar
  groupViewerId           String?       @db.VarChar
  Blob                    Blob[]

  @@schema("tools")
}

model ToolTexts {
  id          Int       @id @default(autoincrement())
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  created_by  String?   @db.VarChar
  updated_at  DateTime  @default(now()) @db.Timestamptz(6)
  updated_by  String?   @db.VarChar
  deleted_at  DateTime? @db.Timestamptz(6)
  name        String    @db.VarChar
  description String?   @db.VarChar

  // Relation fields
  tool       Tool     @relation(fields: [toolId], references: [id])
  toolId     Int
  language   Language @relation(fields: [languageId], references: [id])
  languageId Int

  // Add a composite unique constraint with an explicit name:
  @@unique([toolId, languageId], name: "toolId_languageId")
  @@schema("tools")
}

enum Status {
  GLOBAL
  GROUP
  PERSONAL

  @@schema("tools")
}

model ToolGroup {
  id           Int           @id @default(autoincrement())
  created_at   DateTime      @default(now()) @db.Timestamptz(6)
  created_by   String?       @db.VarChar
  updated_at   DateTime      @default(now()) @db.Timestamptz(6)
  updated_by   String?       @db.VarChar
  deleted_at   DateTime?     @db.Timestamptz(6)
  name         String        @unique(map: "unique_toolgroup_name") @db.VarChar
  description  String?       @db.VarChar
  translations Json?
  status       String?       @db.VarChar
  metadata     Json?
  owners       UserProfile[]
  visibility   Status        @default(PERSONAL)
  userGroups   UserGroup[]

  @@schema("tools")
}

model UserGroup {
  id           Int       @id @default(autoincrement())
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  created_by   String?   @db.VarChar
  updated_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_by   String?   @db.VarChar
  deleted_at   DateTime? @db.Timestamptz(6)
  name         String    @unique(map: "unique_usergroup_name") @db.VarChar
  description  String?   @db.VarChar
  translations Json?
  sortorder    String?   @db.VarChar

  ToolGroup ToolGroup[]

  @@schema("tools")
}

model UserProfile {
  id                      Int       @id @default(autoincrement())
  created_at              DateTime  @default(now()) @db.Timestamptz(6)
  created_by              String?   @db.VarChar
  updated_at              DateTime  @default(now()) @db.Timestamptz(6)
  updated_by              String?   @db.VarChar
  deleted_at              DateTime? @db.Timestamptz(6)
  koksmat_masterdataref   String?   @db.VarChar
  koksmat_masterdata_id   String?   @db.VarChar
  koksmat_masterdata_etag String?   @db.VarChar
  name                    String    @unique(map: "unique_userprofile_name") @db.VarChar
  displayName             String?   @db.VarChar
  description             String?   @db.VarChar
  translations            Json?
  email                   String    @unique(map: "unique_email") @db.VarChar
  status                  String?   @db.VarChar
  company                 String?   @db.VarChar
  country                 String?   @db.VarChar
  companykey              String?   @db.VarChar
  isExternal              Boolean   @default(false) @db.Boolean
  CurrentEmail            String?   @db.VarChar
  OldEmail                String?   @db.VarChar
  OnPremisesId            String?   @db.VarChar
  tools                   Tool[]
  Session                 Session[]

  ToolGroup ToolGroup[]
  roles     UserRole[]
  Board     Board?      @relation(fields: [boardId], references: [id])
  boardId   Int?
  lastLogin DateTime?   @db.Timestamptz(6)
  language  String?     @db.VarChar
  homePage  String?

  @@schema("tools")
}

model UserRole {
  id           Int           @id @default(autoincrement())
  created_at   DateTime      @default(now()) @db.Timestamptz(6)
  created_by   String?       @db.VarChar
  updated_at   DateTime      @default(now()) @db.Timestamptz(6)
  updated_by   String?       @db.VarChar
  deleted_at   DateTime?     @db.Timestamptz(6)
  name         String        @unique(map: "unique_userrole_name") @db.VarChar
  description  String?       @db.VarChar
  translations Json?
  sortorder    String?       @db.VarChar
  users        UserProfile[]

  @@schema("tools")
}

model Session {
  id            Int         @id @default(autoincrement())
  created_at    DateTime    @default(now()) @db.Timestamptz(6)
  created_by    String?     @db.VarChar
  updated_at    DateTime    @default(now()) @db.Timestamptz(6)
  updated_by    String?     @db.VarChar
  deleted_at    DateTime?   @db.Timestamptz(6)
  name          String      @db.VarChar
  data          Json?
  user          UserProfile @relation(fields: [userProfileId], references: [id])
  userProfileId Int

  @@schema("tools")
}

model BusinessUnit {
  id              Int       @id @default(autoincrement())
  created_at      DateTime  @default(now()) @db.Timestamptz(6)
  created_by      String?   @db.VarChar
  updated_at      DateTime  @default(now()) @db.Timestamptz(6)
  updated_by      String?   @db.VarChar
  deleted_at      DateTime? @db.Timestamptz(6)
  name            String    @unique(map: "unique_businessunit_name") @db.VarChar
  code            String?   @unique(map: "unique_businessunit_code") @db.VarChar
  description     String?   @db.VarChar
  translations    Json?
  sortorder       String?   @db.VarChar
  isGroupFunction Boolean
  homePageUrl     String?
  newsPageUrl     String?

  @@schema("tools")
}

model GuestDomain {
  id           Int       @id @default(autoincrement())
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  created_by   String?   @db.VarChar
  updated_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_by   String?   @db.VarChar
  deleted_at   DateTime? @db.Timestamptz(6)
  name         String    @unique(map: "unique_guestdomain_name") @db.VarChar
  description  String?   @db.VarChar
  translations Json?
  sortorder    String?   @db.VarChar

  @@schema("tools")
}

model ChannelCategory {
  id           Int       @id @default(autoincrement())
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  created_by   String?   @db.VarChar
  updated_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_by   String?   @db.VarChar
  deleted_at   DateTime? @db.Timestamptz(6)
  name         String    @unique(map: "unique_channelcategory_name") @db.VarChar
  description  String?   @db.VarChar
  translations Json?
  sortorder    String?   @db.VarChar
  Channel      Channel[]

  @@schema("tools")
}

model Channel {
  id            Int              @id @default(autoincrement())
  created_at    DateTime         @default(now()) @db.Timestamptz(6)
  created_by    String?          @db.VarChar
  updated_at    DateTime         @default(now()) @db.Timestamptz(6)
  updated_by    String?          @db.VarChar
  deleted_at    DateTime?        @db.Timestamptz(6)
  name          String           @unique(map: "unique_channel_name") @db.VarChar
  description   String?          @db.VarChar
  mandatory     Boolean          @default(false) @db.Boolean
  translations  Json?
  sortorder     String?          @db.VarChar
  region        Region?          @relation(fields: [regionId], references: [id])
  regionId      Int?
  countries     Country[]
  // e.g. a reference to a Microsoft 365 group
  externalGroup String?          @db.VarChar
  category      ChannelCategory? @relation(fields: [categoryId], references: [id])
  categoryId    Int?

  @@schema("tools")
}

model Blob {
  id             Int           @id @default(autoincrement())
  created_at     DateTime      @default(now()) @db.Timestamptz(6)
  created_by     String?       @db.VarChar
  updated_at     DateTime      @default(now()) @db.Timestamptz(6)
  updated_by     String?       @db.VarChar
  deleted_at     DateTime?     @db.Timestamptz(6)
  name           String        @db.VarChar
  hash           String        @unique(map: "unique_blob_hash") @db.VarChar
  content_type   String        @db.VarChar
  base64         String        @db.Text
  data           Bytes
  source_tool    Tool?         @relation(fields: [source_tool_id], references: [id])
  source_tool_id Int?
  BlobResized    BlobResized[]

  @@schema("tools")
}

model BlobResized {
  id     Int   @id @default(autoincrement())
  width  Int   @db.Integer
  data   Bytes
  blob   Blob  @relation(fields: [blobId], references: [id])
  blobId Int

  @@schema("tools")
}

// Service model to store information about each microservice
model ServicesService {
  id                String                @id @default(cuid())
  name              String                @unique // e.g., "user.create"
  purpose           String // e.g., "Creates a new user account"
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  active            Boolean               @default(true)
  // Throttling settings at service level
  throttleEnabled   Boolean               @default(false)
  requestsPerMinute Int? // null means no limit
  requestsPerHour   Int? // null means no limit
  requestsPerDay    Int? // null means no limit
  endpoints         ServicesEndpoint[]
  tags              ServicesTag[]         @relation("ServiceToTag")
  usageRecords      ServicesUsageRecord[]

  @@index([name])
  @@schema("services")
}

// Tag model for categorizing services
model ServicesTag {
  id        String            @id @default(cuid())
  name      String            @unique // e.g., "user", "auth", "payment"
  services  ServicesService[] @relation("ServiceToTag")
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@index([name])
  @@schema("services")
}

// Endpoint model to store information about each service endpoint
model ServicesEndpoint {
  id                String                  @id @default(cuid())
  name              String // e.g., "createUser"
  description       String // e.g., "Creates a new user in the system"
  version           String // e.g., "1.0.0"
  deprecated        Boolean                 @default(false)
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  // Throttling settings at endpoint level (overrides service settings)
  throttleEnabled   Boolean                 @default(false)
  requestsPerMinute Int? // null means use service setting
  requestsPerHour   Int? // null means use service setting
  requestsPerDay    Int? // null means use service setting
  service           ServicesService         @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId         String
  parameters        ServicesParameter[]
  responseSchema    ServicesResponseSchema?
  usageRecords      ServicesUsageRecord[]

  @@unique([serviceId, name, version])
  @@index([name])
  @@index([deprecated])
  @@index([version])
  @@schema("services")
}

// Parameter model to store information about endpoint parameters
model ServicesParameter {
  id          String           @id @default(cuid())
  name        String // e.g., "username"
  type        String // e.g., "string", "number", "boolean", "object", "array"
  required    Boolean          @default(false)
  description String // e.g., "Unique username for the user"
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  endpoint    ServicesEndpoint @relation(fields: [endpointId], references: [id], onDelete: Cascade)
  endpointId  String

  @@unique([endpointId, name])
  @@index([name])
  @@index([type])
  @@schema("services")
}

// ResponseSchema model to store information about endpoint response schemas
model ServicesResponseSchema {
  id         String                   @id @default(cuid())
  type       String // e.g., "object"
  createdAt  DateTime                 @default(now())
  updatedAt  DateTime                 @updatedAt
  endpoint   ServicesEndpoint         @relation(fields: [endpointId], references: [id], onDelete: Cascade)
  endpointId String                   @unique
  properties ServicesSchemaProperty[]

  @@schema("services")
}

// SchemaProperty model to store information about response schema properties
model ServicesSchemaProperty {
  id               String                 @id @default(cuid())
  name             String // e.g., "userId"
  type             String // e.g., "string", "number", "boolean", "object", "array"
  description      String // e.g., "Unique identifier for the created user"
  format           String? // e.g., "date-time", optional format specifier
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  responseSchema   ServicesResponseSchema @relation(fields: [responseSchemaId], references: [id], onDelete: Cascade)
  responseSchemaId String

  @@unique([responseSchemaId, name])
  @@index([name])
  @@index([type])
  @@schema("services")
}

// RequestLog model to store information about service requests
model ServicesRequestLog {
  id             String   @id @default(cuid())
  serviceName    String // e.g., "user.create"
  endpointName   String? // e.g., "createUser"
  requestId      String   @unique // A unique identifier for the request
  payload        Json // The request payload
  async          Boolean  @default(false)
  timeout        Int // Timeout in milliseconds
  status         String // e.g., "success", "error", "timeout"
  response       Json? // The response payload (if any)
  errorMessage   String? // Error message (if any)
  processingTime Int? // Processing time in milliseconds
  createdAt      DateTime @default(now())
  apiKeyId       String? // The API key used for the request
  clientIp       String? // The client IP address

  @@index([serviceName])
  @@index([status])
  @@index([createdAt])
  @@index([apiKeyId])
  @@schema("services")
}

// ApiKey model for authentication
model ServicesApiKey {
  id                String                @id @default(cuid())
  key               String                @unique
  name              String // A friendly name for the key
  description       String?
  active            Boolean               @default(true)
  expiresAt         DateTime?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  // Throttling can also be applied per API key
  throttleEnabled   Boolean               @default(false)
  requestsPerMinute Int? // null means no specific limit for this key
  requestsPerHour   Int? // null means no specific limit for this key
  requestsPerDay    Int? // null means no specific limit for this key
  usageRecords      ServicesUsageRecord[]

  @@index([key])
  @@index([active])
  @@schema("services")
}

// UsageRecord model to track usage for throttling
model ServicesUsageRecord {
  id         String            @id @default(cuid())
  serviceId  String?
  endpointId String?
  apiKeyId   String?
  clientIp   String? // For IP-based throttling
  minute     DateTime? // For per-minute tracking (truncated to minute)
  hour       DateTime? // For per-hour tracking (truncated to hour)
  day        DateTime? // For per-day tracking (truncated to day)
  count      Int               @default(0)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  service    ServicesService?  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  endpoint   ServicesEndpoint? @relation(fields: [endpointId], references: [id], onDelete: Cascade)
  apiKey     ServicesApiKey?   @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)

  @@unique([serviceId, minute])
  @@unique([serviceId, hour])
  @@unique([serviceId, day])
  @@unique([endpointId, minute])
  @@unique([endpointId, hour])
  @@unique([endpointId, day])
  @@unique([apiKeyId, minute])
  @@unique([apiKeyId, hour])
  @@unique([apiKeyId, day])
  @@unique([clientIp, minute])
  @@unique([clientIp, hour])
  @@unique([clientIp, day])
  @@index([minute])
  @@index([hour])
  @@index([day])
  @@index([clientIp])
  @@schema("services")
}
