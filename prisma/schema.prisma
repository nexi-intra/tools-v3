generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

// generator markdown {
//   provider = "prisma-markdown"
//   output   = "./ERD.md"
//   title    = "Tool Application"
// }

datasource db {
  provider = "postgresql"
  url      = env("TOOL_DATABASE_URL")
}

model SynchronizationLog {
  id          Int       @id @default(autoincrement())
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  created_by  String?   @db.VarChar
  updated_at  DateTime  @default(now()) @db.Timestamptz(6)
  updated_by  String?   @db.VarChar
  deleted_at  DateTime? @db.Timestamptz(6)
  name        String    @db.VarChar
  description String?   @db.VarChar
  category    String    @db.VarChar
  details     Json?
  hasError    Boolean   @db.Boolean
  error       String?   @db.VarChar
}

model AccessPoint {
  id           Int       @id @default(autoincrement())
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  created_by   String?   @db.VarChar
  updated_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_by   String?   @db.VarChar
  deleted_at   DateTime? @db.Timestamptz(6)
  name         String    @unique(map: "unique_accesspoint_name") @db.VarChar
  description  String?   @db.VarChar
  translations Json?
  sortorder    String?   @db.VarChar
}

model AuditLog {
  id           Int       @id @default(autoincrement())
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  created_by   String?   @db.VarChar
  updated_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_by   String?   @db.VarChar
  deleted_at   DateTime? @db.Timestamptz(6)
  name         String    @db.VarChar
  description  String?   @db.VarChar
  translations Json?
  action       String    @db.VarChar
  status       String    @db.VarChar
  entity       String    @db.VarChar
  entityid     String    @db.VarChar
  actor        String    @db.VarChar
  metadata     Json?
}

model Board {
  id            Int           @id @default(autoincrement())
  created_at    DateTime      @default(now()) @db.Timestamptz(6)
  created_by    String?       @db.VarChar
  updated_at    DateTime      @default(now()) @db.Timestamptz(6)
  updated_by    String?       @db.VarChar
  deleted_at    DateTime?     @db.Timestamptz(6)
  name          String        @db.VarChar
  description   String?       @db.VarChar
  translations  Json?
  status        String?       @db.VarChar
  layout        Json?
  metadata      Json?
  parentId      Int?
  parent        Board?        @relation("BoardForks", fields: [parentId], references: [id])
  forks         Board[]       @relation("BoardForks")
  managedBy     UserProfile[]
  groupOwnerId  String?       @db.VarChar
  groupViewerId String?       @db.VarChar
}

model Category {
  id           Int       @id @default(autoincrement())
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  created_by   String?   @db.VarChar
  updated_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_by   String?   @db.VarChar
  deleted_at   DateTime? @db.Timestamptz(6)
  name         String    @unique(map: "unique_category_name") @db.VarChar
  description  String?   @db.VarChar
  translations Json?
  sortorder    String?   @db.VarChar
  color        String?   @db.VarChar
  isGroupTool  Boolean?  @default(false) @db.Boolean
  tool         Tool[]
}

model Country {
  id           Int       @id @default(autoincrement())
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  created_by   String?   @db.VarChar
  updated_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_by   String?   @db.VarChar
  deleted_at   DateTime? @db.Timestamptz(6)
  name         String    @unique(map: "unique_country_name") @db.VarChar
  description  String?   @db.VarChar
  translations Json?
  region_id    Int
  sortorder    String?   @db.VarChar
  region       Region    @relation(fields: [region_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Channel      Channel?  @relation(fields: [channelId], references: [id])
  channelId    Int?
  homePageUrl  String?
  tools        Tool[]
}

model Language {
  id           Int         @id @default(autoincrement())
  created_at   DateTime    @default(now()) @db.Timestamptz(6)
  created_by   String?     @db.VarChar
  updated_at   DateTime    @default(now()) @db.Timestamptz(6)
  updated_by   String?     @db.VarChar
  deleted_at   DateTime?   @db.Timestamptz(6)
  name         String      @unique(map: "unique_language_name") @db.VarChar
  description  String?     @db.VarChar
  translations Json?
  code         String      @db.VarChar
  sortorder    String?     @db.VarChar
  ToolTexts    ToolTexts[]
}

model Purpose {
  id           Int       @id @default(autoincrement())
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  created_by   String?   @db.VarChar
  updated_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_by   String?   @db.VarChar
  deleted_at   DateTime? @db.Timestamptz(6)
  name         String    @unique(map: "unique_purpose_name") @db.VarChar
  description  String?   @db.VarChar
  translations Json?
  sortorder    String?   @db.VarChar

  // Many-to-many relation with Tool
  tools Tool[] @relation("ToolPurposes")
}

model Region {
  id           Int       @id @default(autoincrement())
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  created_by   String?   @db.VarChar
  updated_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_by   String?   @db.VarChar
  deleted_at   DateTime? @db.Timestamptz(6)
  name         String    @unique(map: "unique_region_name") @db.VarChar
  description  String?   @db.VarChar
  translations Json?
  sortOrder    String?   @db.VarChar
  Country      Country[]
  Channel      Channel[]
}

model Setting {
  id           Int       @id @default(autoincrement())
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  created_by   String?   @db.VarChar
  updated_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_by   String?   @db.VarChar
  deleted_at   DateTime? @db.Timestamptz(6)
  name         String    @db.VarChar
  description  String?   @db.VarChar
  translations Json?
  data         Json?
}

/// Tool
/// Is the core table for the Tool Application
///
/// @namespace Tools
/// @erd Tool

model Tool {
  id                      Int           @id @default(autoincrement())
  created_at              DateTime      @default(now()) @db.Timestamptz(6)
  created_by              String?       @db.VarChar
  updated_at              DateTime      @default(now()) @db.Timestamptz(6)
  updated_by              String?       @db.VarChar
  deleted_at              DateTime?     @db.Timestamptz(6)
  koksmat_masterdataref   String?       @db.VarChar
  koksmat_masterdata_id   String?       @db.VarChar
  koksmat_masterdata_etag String?       @db.VarChar
  name                    String        @db.VarChar
  description             String?       @db.VarChar
  translations            Json?
  url                     String        @db.VarChar
  status                  String?       @db.VarChar
  documents               Json?
  metadata                Json?
  icon                    String?       @db.VarChar
  category                Category      @relation(fields: [categoryId], references: [id])
  // Many-to-many relation with Purpose
  purposes                Purpose[]     @relation("ToolPurposes")
  categoryId              Int
  userProfiles            UserProfile[]
  countries               Country[]
  ToolTexts               ToolTexts[]
  parentId                Int?
  parent                  Tool?         @relation("ToolForks", fields: [parentId], references: [id])
  forks                   Tool[]        @relation("ToolForks")
  groupOwnerId            String?       @db.VarChar
  groupViewerId           String?       @db.VarChar
  Blob                    Blob[]
}

model ToolTexts {
  id          Int       @id @default(autoincrement())
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  created_by  String?   @db.VarChar
  updated_at  DateTime  @default(now()) @db.Timestamptz(6)
  updated_by  String?   @db.VarChar
  deleted_at  DateTime? @db.Timestamptz(6)
  name        String    @db.VarChar
  description String?   @db.VarChar

  // Relation fields
  tool       Tool     @relation(fields: [toolId], references: [id])
  toolId     Int
  language   Language @relation(fields: [languageId], references: [id])
  languageId Int

  // Add a composite unique constraint with an explicit name:
  @@unique([toolId, languageId], name: "toolId_languageId")
}

enum Status {
  GLOBAL
  GROUP
  PERSONAL
}

model ToolGroup {
  id           Int           @id @default(autoincrement())
  created_at   DateTime      @default(now()) @db.Timestamptz(6)
  created_by   String?       @db.VarChar
  updated_at   DateTime      @default(now()) @db.Timestamptz(6)
  updated_by   String?       @db.VarChar
  deleted_at   DateTime?     @db.Timestamptz(6)
  name         String        @unique(map: "unique_toolgroup_name") @db.VarChar
  description  String?       @db.VarChar
  translations Json?
  status       String?       @db.VarChar
  metadata     Json?
  owners       UserProfile[]
  visibility   Status        @default(PERSONAL)
  userGroups   UserGroup[]
}

model UserGroup {
  id           Int       @id @default(autoincrement())
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  created_by   String?   @db.VarChar
  updated_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_by   String?   @db.VarChar
  deleted_at   DateTime? @db.Timestamptz(6)
  name         String    @unique(map: "unique_usergroup_name") @db.VarChar
  description  String?   @db.VarChar
  translations Json?
  sortorder    String?   @db.VarChar

  ToolGroup ToolGroup[]
}

model UserProfile {
  id                      Int       @id @default(autoincrement())
  created_at              DateTime  @default(now()) @db.Timestamptz(6)
  created_by              String?   @db.VarChar
  updated_at              DateTime  @default(now()) @db.Timestamptz(6)
  updated_by              String?   @db.VarChar
  deleted_at              DateTime? @db.Timestamptz(6)
  koksmat_masterdataref   String?   @db.VarChar
  koksmat_masterdata_id   String?   @db.VarChar
  koksmat_masterdata_etag String?   @db.VarChar
  name                    String    @unique(map: "unique_userprofile_name") @db.VarChar
  displayName             String?   @db.VarChar
  description             String?   @db.VarChar
  translations            Json?
  email                   String    @unique(map: "unique_email") @db.VarChar
  status                  String?   @db.VarChar
  company                 String?   @db.VarChar
  country                 String?   @db.VarChar
  companykey              String?   @db.VarChar
  isExternal              Boolean   @default(false) @db.Boolean
  CurrentEmail            String?   @db.VarChar
  OldEmail                String?   @db.VarChar
  OnPremisesId            String?   @db.VarChar
  tools                   Tool[]
  Session                 Session[]

  ToolGroup ToolGroup[]
  roles     UserRole[]
  Board     Board?      @relation(fields: [boardId], references: [id])
  boardId   Int?
  lastLogin DateTime?   @db.Timestamptz(6)
}

model UserRole {
  id            Int          @id @default(autoincrement())
  created_at    DateTime     @default(now()) @db.Timestamptz(6)
  created_by    String?      @db.VarChar
  updated_at    DateTime     @default(now()) @db.Timestamptz(6)
  updated_by    String?      @db.VarChar
  deleted_at    DateTime?    @db.Timestamptz(6)
  name          String       @unique(map: "unique_userrole_name") @db.VarChar
  description   String?      @db.VarChar
  translations  Json?
  sortorder     String?      @db.VarChar
  UserProfile   UserProfile? @relation(fields: [userProfileId], references: [id])
  userProfileId Int?
}

model Session {
  id            Int         @id @default(autoincrement())
  created_at    DateTime    @default(now()) @db.Timestamptz(6)
  created_by    String?     @db.VarChar
  updated_at    DateTime    @default(now()) @db.Timestamptz(6)
  updated_by    String?     @db.VarChar
  deleted_at    DateTime?   @db.Timestamptz(6)
  name          String      @db.VarChar
  data          Json?
  user          UserProfile @relation(fields: [userProfileId], references: [id])
  userProfileId Int
}

model AppFeature {
  id           Int       @id @default(autoincrement())
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  created_by   String?   @db.VarChar
  updated_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_by   String?   @db.VarChar
  deleted_at   DateTime? @db.Timestamptz(6)
  name         String    @unique(map: "unique_appfeature_name") @db.VarChar
  description  String?   @db.VarChar
  translations Json?
  status       String?   @db.VarChar
  appLink      AppLink[]
  AppMenu      AppNode?  @relation(fields: [appMenuId], references: [id])
  appMenuId    Int?
}

model AppLink {
  id           Int         @id @default(autoincrement())
  created_at   DateTime    @default(now()) @db.Timestamptz(6)
  created_by   String?     @db.VarChar
  updated_at   DateTime    @default(now()) @db.Timestamptz(6)
  updated_by   String?     @db.VarChar
  deleted_at   DateTime?   @db.Timestamptz(6)
  name         String      @unique(map: "unique_applink_name") @db.VarChar
  description  String?     @db.VarChar
  translations Json?
  url          String      @db.VarChar
  status       String?     @db.VarChar
  AppFeature   AppFeature? @relation(fields: [appFeatureId], references: [id])
  appFeatureId Int?
  AppMenu      AppNode[]
}

model AppNode {
  id           Int          @id @default(autoincrement())
  created_at   DateTime     @default(now()) @db.Timestamptz(6)
  created_by   String?      @db.VarChar
  updated_at   DateTime     @default(now()) @db.Timestamptz(6)
  updated_by   String?      @db.VarChar
  deleted_at   DateTime?    @db.Timestamptz(6)
  name         String       @unique(map: "unique_appmenu_name") @db.VarChar
  displayName  String?      @db.VarChar
  description  String?      @db.VarChar
  translations Json?
  status       String?      @db.VarChar
  sortorder    Decimal?
  parentId     Int?
  parent       AppNode?     @relation("AppMenuTree", fields: [parentId], references: [id])
  children     AppNode[]    @relation("AppMenuTree")
  features     AppFeature[]
  link         AppLink?     @relation(fields: [appLinkId], references: [id])
  appLinkId    Int?
}

model BusinessUnit {
  id              Int       @id @default(autoincrement())
  created_at      DateTime  @default(now()) @db.Timestamptz(6)
  created_by      String?   @db.VarChar
  updated_at      DateTime  @default(now()) @db.Timestamptz(6)
  updated_by      String?   @db.VarChar
  deleted_at      DateTime? @db.Timestamptz(6)
  name            String    @unique(map: "unique_businessunit_name") @db.VarChar
  code            String?   @unique(map: "unique_businessunit_code") @db.VarChar
  description     String?   @db.VarChar
  translations    Json?
  sortorder       String?   @db.VarChar
  isGroupFunction Boolean
  homePageUrl     String?
  newsPageUrl     String?
}

model GuestDomain {
  id           Int       @id @default(autoincrement())
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  created_by   String?   @db.VarChar
  updated_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_by   String?   @db.VarChar
  deleted_at   DateTime? @db.Timestamptz(6)
  name         String    @unique(map: "unique_guestdomain_name") @db.VarChar
  description  String?   @db.VarChar
  translations Json?
  sortorder    String?   @db.VarChar
}

model ChannelCategory {
  id           Int       @id @default(autoincrement())
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  created_by   String?   @db.VarChar
  updated_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_by   String?   @db.VarChar
  deleted_at   DateTime? @db.Timestamptz(6)
  name         String    @unique(map: "unique_channelcategory_name") @db.VarChar
  description  String?   @db.VarChar
  translations Json?
  sortorder    String?   @db.VarChar
  Channel      Channel[]
}

model Channel {
  id            Int              @id @default(autoincrement())
  created_at    DateTime         @default(now()) @db.Timestamptz(6)
  created_by    String?          @db.VarChar
  updated_at    DateTime         @default(now()) @db.Timestamptz(6)
  updated_by    String?          @db.VarChar
  deleted_at    DateTime?        @db.Timestamptz(6)
  name          String           @unique(map: "unique_channel_name") @db.VarChar
  description   String?          @db.VarChar
  mandatory     Boolean          @default(false) @db.Boolean
  translations  Json?
  sortorder     String?          @db.VarChar
  region        Region?          @relation(fields: [regionId], references: [id])
  regionId      Int?
  countries     Country[]
  // e.g. a reference to a Microsoft 365 group
  externalGroup String?          @db.VarChar
  category      ChannelCategory? @relation(fields: [categoryId], references: [id])
  categoryId    Int?
}

model Blob {
  id             Int       @id @default(autoincrement())
  created_at     DateTime  @default(now()) @db.Timestamptz(6)
  created_by     String?   @db.VarChar
  updated_at     DateTime  @default(now()) @db.Timestamptz(6)
  updated_by     String?   @db.VarChar
  deleted_at     DateTime? @db.Timestamptz(6)
  name           String    @db.VarChar
  hash           String    @unique(map: "unique_blob_hash") @db.VarChar
  content_type   String    @db.VarChar
  base64         String    @db.Text
  data           Bytes
  source_tool    Tool?     @relation(fields: [source_tool_id], references: [id])
  source_tool_id Int?
}
