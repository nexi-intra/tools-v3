import { z } from 'zod';
import { Prisma } from '@prisma/client';

/////////////////////////////////////////
// HELPER FUNCTIONS
/////////////////////////////////////////

// JSON
//------------------------------------------------------

export type NullableJsonInput = Prisma.JsonValue | null | 'JsonNull' | 'DbNull' | Prisma.NullTypes.DbNull | Prisma.NullTypes.JsonNull;

export const transformJsonNull = (v?: NullableJsonInput) => {
  if (!v || v === 'DbNull') return Prisma.DbNull;
  if (v === 'JsonNull') return Prisma.JsonNull;
  return v;
};

export const JsonValueSchema: z.ZodType<Prisma.JsonValue> = z.lazy(() =>
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.literal(null),
    z.record(z.lazy(() => JsonValueSchema.optional())),
    z.array(z.lazy(() => JsonValueSchema)),
  ])
);

export type JsonValueType = z.infer<typeof JsonValueSchema>;

export const NullableJsonValue = z
  .union([JsonValueSchema, z.literal('DbNull'), z.literal('JsonNull')])
  .nullable()
  .transform((v) => transformJsonNull(v));

export type NullableJsonValueType = z.infer<typeof NullableJsonValue>;

export const InputJsonValueSchema: z.ZodType<Prisma.InputJsonValue> = z.lazy(() =>
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.object({ toJSON: z.function(z.tuple([]), z.any()) }),
    z.record(z.lazy(() => z.union([InputJsonValueSchema, z.literal(null)]))),
    z.array(z.lazy(() => z.union([InputJsonValueSchema, z.literal(null)]))),
  ])
);

export type InputJsonValueType = z.infer<typeof InputJsonValueSchema>;


/////////////////////////////////////////
// ENUMS
/////////////////////////////////////////

export const TransactionIsolationLevelSchema = z.enum(['ReadUncommitted','ReadCommitted','RepeatableRead','Serializable']);

export const SynchronizationLogScalarFieldEnumSchema = z.enum(['id','created_at','created_by','updated_at','updated_by','deleted_at','name','description','category','details','hasError','error']);

export const AccessPointScalarFieldEnumSchema = z.enum(['id','created_at','created_by','updated_at','updated_by','deleted_at','name','description','translations','sortorder']);

export const AuditLogScalarFieldEnumSchema = z.enum(['id','created_at','created_by','updated_at','updated_by','deleted_at','name','description','translations','action','status','entity','entityid','actor','metadata']);

export const BoardScalarFieldEnumSchema = z.enum(['id','created_at','created_by','updated_at','updated_by','deleted_at','name','description','translations','status','layout','metadata','parentId','groupOwnerId','groupViewerId']);

export const CategoryScalarFieldEnumSchema = z.enum(['id','created_at','created_by','updated_at','updated_by','deleted_at','name','description','translations','sortorder','color','isGroupTool']);

export const CountryScalarFieldEnumSchema = z.enum(['id','created_at','created_by','updated_at','updated_by','deleted_at','name','description','translations','region_id','sortorder','channelId','homePageUrl']);

export const LanguageScalarFieldEnumSchema = z.enum(['id','created_at','created_by','updated_at','updated_by','deleted_at','name','description','translations','code','sortorder']);

export const PurposeScalarFieldEnumSchema = z.enum(['id','created_at','created_by','updated_at','updated_by','deleted_at','name','description','translations','sortorder']);

export const RegionScalarFieldEnumSchema = z.enum(['id','created_at','created_by','updated_at','updated_by','deleted_at','name','description','translations','sortOrder']);

export const SettingScalarFieldEnumSchema = z.enum(['id','created_at','created_by','updated_at','updated_by','deleted_at','name','description','translations','data']);

export const ToolScalarFieldEnumSchema = z.enum(['id','created_at','created_by','updated_at','updated_by','deleted_at','koksmat_masterdataref','koksmat_masterdata_id','koksmat_masterdata_etag','name','description','translations','url','status','documents','metadata','icon','uploaded_icon','categoryId','parentId','groupOwnerId','groupViewerId']);

export const ToolTextsScalarFieldEnumSchema = z.enum(['id','created_at','created_by','updated_at','updated_by','deleted_at','name','description','toolId','languageId']);

export const ToolGroupScalarFieldEnumSchema = z.enum(['id','created_at','created_by','updated_at','updated_by','deleted_at','name','description','translations','status','metadata','visibility']);

export const UserGroupScalarFieldEnumSchema = z.enum(['id','created_at','created_by','updated_at','updated_by','deleted_at','name','description','translations','sortorder']);

export const UserProfileScalarFieldEnumSchema = z.enum(['id','created_at','created_by','updated_at','updated_by','deleted_at','koksmat_masterdataref','koksmat_masterdata_id','koksmat_masterdata_etag','name','displayName','description','translations','email','status','company','country','companykey','isExternal','CurrentEmail','OldEmail','OnPremisesId','boardId','lastLogin','language','homePage']);

export const UserRoleScalarFieldEnumSchema = z.enum(['id','created_at','created_by','updated_at','updated_by','deleted_at','name','description','translations','sortorder']);

export const SessionScalarFieldEnumSchema = z.enum(['id','created_at','created_by','updated_at','updated_by','deleted_at','name','data','userProfileId']);

export const BusinessUnitScalarFieldEnumSchema = z.enum(['id','created_at','created_by','updated_at','updated_by','deleted_at','name','code','description','translations','sortorder','isGroupFunction','homePageUrl','newsPageUrl']);

export const GuestDomainScalarFieldEnumSchema = z.enum(['id','created_at','created_by','updated_at','updated_by','deleted_at','name','description','translations','sortorder']);

export const ChannelCategoryScalarFieldEnumSchema = z.enum(['id','created_at','created_by','updated_at','updated_by','deleted_at','name','description','translations','sortorder']);

export const ChannelScalarFieldEnumSchema = z.enum(['id','created_at','created_by','updated_at','updated_by','deleted_at','name','description','mandatory','translations','sortorder','regionId','externalGroup','categoryId']);

export const BlobScalarFieldEnumSchema = z.enum(['id','created_at','created_by','updated_at','updated_by','deleted_at','name','hash','content_type','base64','data','source_tool_id']);

export const BlobResizedScalarFieldEnumSchema = z.enum(['id','width','data','blobId']);

export const SortOrderSchema = z.enum(['asc','desc']);

export const NullableJsonNullValueInputSchema = z.enum(['DbNull','JsonNull',]).transform((value) => value === 'JsonNull' ? Prisma.JsonNull : value === 'DbNull' ? Prisma.DbNull : value);

export const QueryModeSchema = z.enum(['default','insensitive']);

export const JsonNullValueFilterSchema = z.enum(['DbNull','JsonNull','AnyNull',]).transform((value) => value === 'JsonNull' ? Prisma.JsonNull : value === 'DbNull' ? Prisma.JsonNull : value === 'AnyNull' ? Prisma.AnyNull : value);

export const NullsOrderSchema = z.enum(['first','last']);

export const StatusSchema = z.enum(['GLOBAL','GROUP','PERSONAL']);

export type StatusType = `${z.infer<typeof StatusSchema>}`

/////////////////////////////////////////
// MODELS
/////////////////////////////////////////

/////////////////////////////////////////
// SYNCHRONIZATION LOG SCHEMA
/////////////////////////////////////////

export const SynchronizationLogSchema = z.object({
  id: z.number().int(),
  created_at: z.coerce.date(),
  created_by: z.string().nullable(),
  updated_at: z.coerce.date(),
  updated_by: z.string().nullable(),
  deleted_at: z.coerce.date().nullable(),
  name: z.string(),
  description: z.string().nullable(),
  category: z.string(),
  details: JsonValueSchema.nullable(),
  hasError: z.boolean(),
  error: z.string().nullable(),
})

export type SynchronizationLog = z.infer<typeof SynchronizationLogSchema>

/////////////////////////////////////////
// ACCESS POINT SCHEMA
/////////////////////////////////////////

export const AccessPointSchema = z.object({
  id: z.number().int(),
  created_at: z.coerce.date(),
  created_by: z.string().nullable(),
  updated_at: z.coerce.date(),
  updated_by: z.string().nullable(),
  deleted_at: z.coerce.date().nullable(),
  name: z.string(),
  description: z.string().nullable(),
  translations: JsonValueSchema.nullable(),
  sortorder: z.string().nullable(),
})

export type AccessPoint = z.infer<typeof AccessPointSchema>

/////////////////////////////////////////
// AUDIT LOG SCHEMA
/////////////////////////////////////////

export const AuditLogSchema = z.object({
  id: z.number().int(),
  created_at: z.coerce.date(),
  created_by: z.string().nullable(),
  updated_at: z.coerce.date(),
  updated_by: z.string().nullable(),
  deleted_at: z.coerce.date().nullable(),
  name: z.string(),
  description: z.string().nullable(),
  translations: JsonValueSchema.nullable(),
  action: z.string(),
  status: z.string(),
  entity: z.string(),
  entityid: z.string(),
  actor: z.string(),
  metadata: JsonValueSchema.nullable(),
})

export type AuditLog = z.infer<typeof AuditLogSchema>

/////////////////////////////////////////
// BOARD SCHEMA
/////////////////////////////////////////

export const BoardSchema = z.object({
  id: z.number().int(),
  created_at: z.coerce.date(),
  created_by: z.string().nullable(),
  updated_at: z.coerce.date(),
  updated_by: z.string().nullable(),
  deleted_at: z.coerce.date().nullable(),
  name: z.string(),
  description: z.string().nullable(),
  translations: JsonValueSchema.nullable(),
  status: z.string().nullable(),
  layout: JsonValueSchema.nullable(),
  metadata: JsonValueSchema.nullable(),
  parentId: z.number().int().nullable(),
  groupOwnerId: z.string().nullable(),
  groupViewerId: z.string().nullable(),
})

export type Board = z.infer<typeof BoardSchema>

/////////////////////////////////////////
// CATEGORY SCHEMA
/////////////////////////////////////////

export const CategorySchema = z.object({
  id: z.number().int(),
  created_at: z.coerce.date(),
  created_by: z.string().nullable(),
  updated_at: z.coerce.date(),
  updated_by: z.string().nullable(),
  deleted_at: z.coerce.date().nullable(),
  name: z.string(),
  description: z.string().nullable(),
  translations: JsonValueSchema.nullable(),
  sortorder: z.string().nullable(),
  color: z.string().nullable(),
  isGroupTool: z.boolean().nullable(),
})

export type Category = z.infer<typeof CategorySchema>

/////////////////////////////////////////
// COUNTRY SCHEMA
/////////////////////////////////////////

export const CountrySchema = z.object({
  id: z.number().int(),
  created_at: z.coerce.date(),
  created_by: z.string().nullable(),
  updated_at: z.coerce.date(),
  updated_by: z.string().nullable(),
  deleted_at: z.coerce.date().nullable(),
  name: z.string(),
  description: z.string().nullable(),
  translations: JsonValueSchema.nullable(),
  region_id: z.number().int(),
  sortorder: z.string().nullable(),
  channelId: z.number().int().nullable(),
  homePageUrl: z.string().nullable(),
})

export type Country = z.infer<typeof CountrySchema>

/////////////////////////////////////////
// LANGUAGE SCHEMA
/////////////////////////////////////////

export const LanguageSchema = z.object({
  id: z.number().int(),
  created_at: z.coerce.date(),
  created_by: z.string().nullable(),
  updated_at: z.coerce.date(),
  updated_by: z.string().nullable(),
  deleted_at: z.coerce.date().nullable(),
  name: z.string(),
  description: z.string().nullable(),
  translations: JsonValueSchema.nullable(),
  code: z.string(),
  sortorder: z.string().nullable(),
})

export type Language = z.infer<typeof LanguageSchema>

/////////////////////////////////////////
// PURPOSE SCHEMA
/////////////////////////////////////////

export const PurposeSchema = z.object({
  id: z.number().int(),
  created_at: z.coerce.date(),
  created_by: z.string().nullable(),
  updated_at: z.coerce.date(),
  updated_by: z.string().nullable(),
  deleted_at: z.coerce.date().nullable(),
  name: z.string(),
  description: z.string().nullable(),
  translations: JsonValueSchema.nullable(),
  sortorder: z.string().nullable(),
})

export type Purpose = z.infer<typeof PurposeSchema>

/////////////////////////////////////////
// REGION SCHEMA
/////////////////////////////////////////

export const RegionSchema = z.object({
  id: z.number().int(),
  created_at: z.coerce.date(),
  created_by: z.string().nullable(),
  updated_at: z.coerce.date(),
  updated_by: z.string().nullable(),
  deleted_at: z.coerce.date().nullable(),
  name: z.string(),
  description: z.string().nullable(),
  translations: JsonValueSchema.nullable(),
  sortOrder: z.string().nullable(),
})

export type Region = z.infer<typeof RegionSchema>

/////////////////////////////////////////
// SETTING SCHEMA
/////////////////////////////////////////

export const SettingSchema = z.object({
  id: z.number().int(),
  created_at: z.coerce.date(),
  created_by: z.string().nullable(),
  updated_at: z.coerce.date(),
  updated_by: z.string().nullable(),
  deleted_at: z.coerce.date().nullable(),
  name: z.string(),
  description: z.string().nullable(),
  translations: JsonValueSchema.nullable(),
  data: JsonValueSchema.nullable(),
})

export type Setting = z.infer<typeof SettingSchema>

/////////////////////////////////////////
// TOOL SCHEMA
/////////////////////////////////////////

export const ToolSchema = z.object({
  id: z.number().int(),
  created_at: z.coerce.date(),
  created_by: z.string().nullable(),
  updated_at: z.coerce.date(),
  updated_by: z.string().nullable(),
  deleted_at: z.coerce.date().nullable(),
  koksmat_masterdataref: z.string().nullable(),
  koksmat_masterdata_id: z.string().nullable(),
  koksmat_masterdata_etag: z.string().nullable(),
  name: z.string(),
  description: z.string().nullable(),
  translations: JsonValueSchema.nullable(),
  url: z.string(),
  status: z.string().nullable(),
  documents: JsonValueSchema.nullable(),
  metadata: JsonValueSchema.nullable(),
  icon: z.string().nullable(),
  uploaded_icon: z.string().nullable(),
  categoryId: z.number().int(),
  parentId: z.number().int().nullable(),
  groupOwnerId: z.string().nullable(),
  groupViewerId: z.string().nullable(),
})

export type Tool = z.infer<typeof ToolSchema>

/////////////////////////////////////////
// TOOL TEXTS SCHEMA
/////////////////////////////////////////

export const ToolTextsSchema = z.object({
  id: z.number().int(),
  created_at: z.coerce.date(),
  created_by: z.string().nullable(),
  updated_at: z.coerce.date(),
  updated_by: z.string().nullable(),
  deleted_at: z.coerce.date().nullable(),
  name: z.string(),
  description: z.string().nullable(),
  toolId: z.number().int(),
  languageId: z.number().int(),
})

export type ToolTexts = z.infer<typeof ToolTextsSchema>

/////////////////////////////////////////
// TOOL GROUP SCHEMA
/////////////////////////////////////////

export const ToolGroupSchema = z.object({
  visibility: StatusSchema,
  id: z.number().int(),
  created_at: z.coerce.date(),
  created_by: z.string().nullable(),
  updated_at: z.coerce.date(),
  updated_by: z.string().nullable(),
  deleted_at: z.coerce.date().nullable(),
  name: z.string(),
  description: z.string().nullable(),
  translations: JsonValueSchema.nullable(),
  status: z.string().nullable(),
  metadata: JsonValueSchema.nullable(),
})

export type ToolGroup = z.infer<typeof ToolGroupSchema>

/////////////////////////////////////////
// USER GROUP SCHEMA
/////////////////////////////////////////

export const UserGroupSchema = z.object({
  id: z.number().int(),
  created_at: z.coerce.date(),
  created_by: z.string().nullable(),
  updated_at: z.coerce.date(),
  updated_by: z.string().nullable(),
  deleted_at: z.coerce.date().nullable(),
  name: z.string(),
  description: z.string().nullable(),
  translations: JsonValueSchema.nullable(),
  sortorder: z.string().nullable(),
})

export type UserGroup = z.infer<typeof UserGroupSchema>

/////////////////////////////////////////
// USER PROFILE SCHEMA
/////////////////////////////////////////

export const UserProfileSchema = z.object({
  id: z.number().int(),
  created_at: z.coerce.date(),
  created_by: z.string().nullable(),
  updated_at: z.coerce.date(),
  updated_by: z.string().nullable(),
  deleted_at: z.coerce.date().nullable(),
  koksmat_masterdataref: z.string().nullable(),
  koksmat_masterdata_id: z.string().nullable(),
  koksmat_masterdata_etag: z.string().nullable(),
  name: z.string(),
  displayName: z.string().nullable(),
  description: z.string().nullable(),
  translations: JsonValueSchema.nullable(),
  email: z.string(),
  status: z.string().nullable(),
  company: z.string().nullable(),
  country: z.string().nullable(),
  companykey: z.string().nullable(),
  isExternal: z.boolean(),
  CurrentEmail: z.string().nullable(),
  OldEmail: z.string().nullable(),
  OnPremisesId: z.string().nullable(),
  boardId: z.number().int().nullable(),
  lastLogin: z.coerce.date().nullable(),
  language: z.string().nullable(),
  homePage: z.string().nullable(),
})

export type UserProfile = z.infer<typeof UserProfileSchema>

/////////////////////////////////////////
// USER ROLE SCHEMA
/////////////////////////////////////////

export const UserRoleSchema = z.object({
  id: z.number().int(),
  created_at: z.coerce.date(),
  created_by: z.string().nullable(),
  updated_at: z.coerce.date(),
  updated_by: z.string().nullable(),
  deleted_at: z.coerce.date().nullable(),
  name: z.string(),
  description: z.string().nullable(),
  translations: JsonValueSchema.nullable(),
  sortorder: z.string().nullable(),
})

export type UserRole = z.infer<typeof UserRoleSchema>

/////////////////////////////////////////
// SESSION SCHEMA
/////////////////////////////////////////

export const SessionSchema = z.object({
  id: z.number().int(),
  created_at: z.coerce.date(),
  created_by: z.string().nullable(),
  updated_at: z.coerce.date(),
  updated_by: z.string().nullable(),
  deleted_at: z.coerce.date().nullable(),
  name: z.string(),
  data: JsonValueSchema.nullable(),
  userProfileId: z.number().int(),
})

export type Session = z.infer<typeof SessionSchema>

/////////////////////////////////////////
// BUSINESS UNIT SCHEMA
/////////////////////////////////////////

export const BusinessUnitSchema = z.object({
  id: z.number().int(),
  created_at: z.coerce.date(),
  created_by: z.string().nullable(),
  updated_at: z.coerce.date(),
  updated_by: z.string().nullable(),
  deleted_at: z.coerce.date().nullable(),
  name: z.string(),
  code: z.string().nullable(),
  description: z.string().nullable(),
  translations: JsonValueSchema.nullable(),
  sortorder: z.string().nullable(),
  isGroupFunction: z.boolean(),
  homePageUrl: z.string().nullable(),
  newsPageUrl: z.string().nullable(),
})

export type BusinessUnit = z.infer<typeof BusinessUnitSchema>

/////////////////////////////////////////
// GUEST DOMAIN SCHEMA
/////////////////////////////////////////

export const GuestDomainSchema = z.object({
  id: z.number().int(),
  created_at: z.coerce.date(),
  created_by: z.string().nullable(),
  updated_at: z.coerce.date(),
  updated_by: z.string().nullable(),
  deleted_at: z.coerce.date().nullable(),
  name: z.string(),
  description: z.string().nullable(),
  translations: JsonValueSchema.nullable(),
  sortorder: z.string().nullable(),
})

export type GuestDomain = z.infer<typeof GuestDomainSchema>

/////////////////////////////////////////
// CHANNEL CATEGORY SCHEMA
/////////////////////////////////////////

export const ChannelCategorySchema = z.object({
  id: z.number().int(),
  created_at: z.coerce.date(),
  created_by: z.string().nullable(),
  updated_at: z.coerce.date(),
  updated_by: z.string().nullable(),
  deleted_at: z.coerce.date().nullable(),
  name: z.string(),
  description: z.string().nullable(),
  translations: JsonValueSchema.nullable(),
  sortorder: z.string().nullable(),
})

export type ChannelCategory = z.infer<typeof ChannelCategorySchema>

/////////////////////////////////////////
// CHANNEL SCHEMA
/////////////////////////////////////////

export const ChannelSchema = z.object({
  id: z.number().int(),
  created_at: z.coerce.date(),
  created_by: z.string().nullable(),
  updated_at: z.coerce.date(),
  updated_by: z.string().nullable(),
  deleted_at: z.coerce.date().nullable(),
  name: z.string(),
  description: z.string().nullable(),
  mandatory: z.boolean(),
  translations: JsonValueSchema.nullable(),
  sortorder: z.string().nullable(),
  regionId: z.number().int().nullable(),
  externalGroup: z.string().nullable(),
  categoryId: z.number().int().nullable(),
})

export type Channel = z.infer<typeof ChannelSchema>

/////////////////////////////////////////
// BLOB SCHEMA
/////////////////////////////////////////

export const BlobSchema = z.object({
  id: z.number().int(),
  created_at: z.coerce.date(),
  created_by: z.string().nullable(),
  updated_at: z.coerce.date(),
  updated_by: z.string().nullable(),
  deleted_at: z.coerce.date().nullable(),
  name: z.string(),
  hash: z.string(),
  content_type: z.string(),
  base64: z.string(),
  data: z.instanceof(Buffer),
  source_tool_id: z.number().int().nullable(),
})

export type Blob = z.infer<typeof BlobSchema>

/////////////////////////////////////////
// BLOB RESIZED SCHEMA
/////////////////////////////////////////

export const BlobResizedSchema = z.object({
  id: z.number().int(),
  width: z.number().int(),
  data: z.instanceof(Buffer),
  blobId: z.number().int(),
})

export type BlobResized = z.infer<typeof BlobResizedSchema>

/////////////////////////////////////////
// SELECT & INCLUDE
/////////////////////////////////////////

// SYNCHRONIZATION LOG
//------------------------------------------------------

export const SynchronizationLogSelectSchema: z.ZodType<Prisma.SynchronizationLogSelect> = z.object({
  id: z.boolean().optional(),
  created_at: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  deleted_at: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  category: z.boolean().optional(),
  details: z.boolean().optional(),
  hasError: z.boolean().optional(),
  error: z.boolean().optional(),
}).strict()

// ACCESS POINT
//------------------------------------------------------

export const AccessPointSelectSchema: z.ZodType<Prisma.AccessPointSelect> = z.object({
  id: z.boolean().optional(),
  created_at: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  deleted_at: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  translations: z.boolean().optional(),
  sortorder: z.boolean().optional(),
}).strict()

// AUDIT LOG
//------------------------------------------------------

export const AuditLogSelectSchema: z.ZodType<Prisma.AuditLogSelect> = z.object({
  id: z.boolean().optional(),
  created_at: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  deleted_at: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  translations: z.boolean().optional(),
  action: z.boolean().optional(),
  status: z.boolean().optional(),
  entity: z.boolean().optional(),
  entityid: z.boolean().optional(),
  actor: z.boolean().optional(),
  metadata: z.boolean().optional(),
}).strict()

// BOARD
//------------------------------------------------------

export const BoardIncludeSchema: z.ZodType<Prisma.BoardInclude> = z.object({
  parent: z.union([z.boolean(),z.lazy(() => BoardArgsSchema)]).optional(),
  forks: z.union([z.boolean(),z.lazy(() => BoardFindManyArgsSchema)]).optional(),
  managedBy: z.union([z.boolean(),z.lazy(() => UserProfileFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => BoardCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const BoardArgsSchema: z.ZodType<Prisma.BoardDefaultArgs> = z.object({
  select: z.lazy(() => BoardSelectSchema).optional(),
  include: z.lazy(() => BoardIncludeSchema).optional(),
}).strict();

export const BoardCountOutputTypeArgsSchema: z.ZodType<Prisma.BoardCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => BoardCountOutputTypeSelectSchema).nullish(),
}).strict();

export const BoardCountOutputTypeSelectSchema: z.ZodType<Prisma.BoardCountOutputTypeSelect> = z.object({
  forks: z.boolean().optional(),
  managedBy: z.boolean().optional(),
}).strict();

export const BoardSelectSchema: z.ZodType<Prisma.BoardSelect> = z.object({
  id: z.boolean().optional(),
  created_at: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  deleted_at: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  translations: z.boolean().optional(),
  status: z.boolean().optional(),
  layout: z.boolean().optional(),
  metadata: z.boolean().optional(),
  parentId: z.boolean().optional(),
  groupOwnerId: z.boolean().optional(),
  groupViewerId: z.boolean().optional(),
  parent: z.union([z.boolean(),z.lazy(() => BoardArgsSchema)]).optional(),
  forks: z.union([z.boolean(),z.lazy(() => BoardFindManyArgsSchema)]).optional(),
  managedBy: z.union([z.boolean(),z.lazy(() => UserProfileFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => BoardCountOutputTypeArgsSchema)]).optional(),
}).strict()

// CATEGORY
//------------------------------------------------------

export const CategoryIncludeSchema: z.ZodType<Prisma.CategoryInclude> = z.object({
  tool: z.union([z.boolean(),z.lazy(() => ToolFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CategoryCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const CategoryArgsSchema: z.ZodType<Prisma.CategoryDefaultArgs> = z.object({
  select: z.lazy(() => CategorySelectSchema).optional(),
  include: z.lazy(() => CategoryIncludeSchema).optional(),
}).strict();

export const CategoryCountOutputTypeArgsSchema: z.ZodType<Prisma.CategoryCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => CategoryCountOutputTypeSelectSchema).nullish(),
}).strict();

export const CategoryCountOutputTypeSelectSchema: z.ZodType<Prisma.CategoryCountOutputTypeSelect> = z.object({
  tool: z.boolean().optional(),
}).strict();

export const CategorySelectSchema: z.ZodType<Prisma.CategorySelect> = z.object({
  id: z.boolean().optional(),
  created_at: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  deleted_at: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  translations: z.boolean().optional(),
  sortorder: z.boolean().optional(),
  color: z.boolean().optional(),
  isGroupTool: z.boolean().optional(),
  tool: z.union([z.boolean(),z.lazy(() => ToolFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CategoryCountOutputTypeArgsSchema)]).optional(),
}).strict()

// COUNTRY
//------------------------------------------------------

export const CountryIncludeSchema: z.ZodType<Prisma.CountryInclude> = z.object({
  region: z.union([z.boolean(),z.lazy(() => RegionArgsSchema)]).optional(),
  Channel: z.union([z.boolean(),z.lazy(() => ChannelArgsSchema)]).optional(),
  tools: z.union([z.boolean(),z.lazy(() => ToolFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CountryCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const CountryArgsSchema: z.ZodType<Prisma.CountryDefaultArgs> = z.object({
  select: z.lazy(() => CountrySelectSchema).optional(),
  include: z.lazy(() => CountryIncludeSchema).optional(),
}).strict();

export const CountryCountOutputTypeArgsSchema: z.ZodType<Prisma.CountryCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => CountryCountOutputTypeSelectSchema).nullish(),
}).strict();

export const CountryCountOutputTypeSelectSchema: z.ZodType<Prisma.CountryCountOutputTypeSelect> = z.object({
  tools: z.boolean().optional(),
}).strict();

export const CountrySelectSchema: z.ZodType<Prisma.CountrySelect> = z.object({
  id: z.boolean().optional(),
  created_at: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  deleted_at: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  translations: z.boolean().optional(),
  region_id: z.boolean().optional(),
  sortorder: z.boolean().optional(),
  channelId: z.boolean().optional(),
  homePageUrl: z.boolean().optional(),
  region: z.union([z.boolean(),z.lazy(() => RegionArgsSchema)]).optional(),
  Channel: z.union([z.boolean(),z.lazy(() => ChannelArgsSchema)]).optional(),
  tools: z.union([z.boolean(),z.lazy(() => ToolFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CountryCountOutputTypeArgsSchema)]).optional(),
}).strict()

// LANGUAGE
//------------------------------------------------------

export const LanguageIncludeSchema: z.ZodType<Prisma.LanguageInclude> = z.object({
  ToolTexts: z.union([z.boolean(),z.lazy(() => ToolTextsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => LanguageCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const LanguageArgsSchema: z.ZodType<Prisma.LanguageDefaultArgs> = z.object({
  select: z.lazy(() => LanguageSelectSchema).optional(),
  include: z.lazy(() => LanguageIncludeSchema).optional(),
}).strict();

export const LanguageCountOutputTypeArgsSchema: z.ZodType<Prisma.LanguageCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => LanguageCountOutputTypeSelectSchema).nullish(),
}).strict();

export const LanguageCountOutputTypeSelectSchema: z.ZodType<Prisma.LanguageCountOutputTypeSelect> = z.object({
  ToolTexts: z.boolean().optional(),
}).strict();

export const LanguageSelectSchema: z.ZodType<Prisma.LanguageSelect> = z.object({
  id: z.boolean().optional(),
  created_at: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  deleted_at: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  translations: z.boolean().optional(),
  code: z.boolean().optional(),
  sortorder: z.boolean().optional(),
  ToolTexts: z.union([z.boolean(),z.lazy(() => ToolTextsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => LanguageCountOutputTypeArgsSchema)]).optional(),
}).strict()

// PURPOSE
//------------------------------------------------------

export const PurposeIncludeSchema: z.ZodType<Prisma.PurposeInclude> = z.object({
  tools: z.union([z.boolean(),z.lazy(() => ToolFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => PurposeCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const PurposeArgsSchema: z.ZodType<Prisma.PurposeDefaultArgs> = z.object({
  select: z.lazy(() => PurposeSelectSchema).optional(),
  include: z.lazy(() => PurposeIncludeSchema).optional(),
}).strict();

export const PurposeCountOutputTypeArgsSchema: z.ZodType<Prisma.PurposeCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => PurposeCountOutputTypeSelectSchema).nullish(),
}).strict();

export const PurposeCountOutputTypeSelectSchema: z.ZodType<Prisma.PurposeCountOutputTypeSelect> = z.object({
  tools: z.boolean().optional(),
}).strict();

export const PurposeSelectSchema: z.ZodType<Prisma.PurposeSelect> = z.object({
  id: z.boolean().optional(),
  created_at: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  deleted_at: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  translations: z.boolean().optional(),
  sortorder: z.boolean().optional(),
  tools: z.union([z.boolean(),z.lazy(() => ToolFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => PurposeCountOutputTypeArgsSchema)]).optional(),
}).strict()

// REGION
//------------------------------------------------------

export const RegionIncludeSchema: z.ZodType<Prisma.RegionInclude> = z.object({
  Country: z.union([z.boolean(),z.lazy(() => CountryFindManyArgsSchema)]).optional(),
  Channel: z.union([z.boolean(),z.lazy(() => ChannelFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RegionCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const RegionArgsSchema: z.ZodType<Prisma.RegionDefaultArgs> = z.object({
  select: z.lazy(() => RegionSelectSchema).optional(),
  include: z.lazy(() => RegionIncludeSchema).optional(),
}).strict();

export const RegionCountOutputTypeArgsSchema: z.ZodType<Prisma.RegionCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => RegionCountOutputTypeSelectSchema).nullish(),
}).strict();

export const RegionCountOutputTypeSelectSchema: z.ZodType<Prisma.RegionCountOutputTypeSelect> = z.object({
  Country: z.boolean().optional(),
  Channel: z.boolean().optional(),
}).strict();

export const RegionSelectSchema: z.ZodType<Prisma.RegionSelect> = z.object({
  id: z.boolean().optional(),
  created_at: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  deleted_at: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  translations: z.boolean().optional(),
  sortOrder: z.boolean().optional(),
  Country: z.union([z.boolean(),z.lazy(() => CountryFindManyArgsSchema)]).optional(),
  Channel: z.union([z.boolean(),z.lazy(() => ChannelFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RegionCountOutputTypeArgsSchema)]).optional(),
}).strict()

// SETTING
//------------------------------------------------------

export const SettingSelectSchema: z.ZodType<Prisma.SettingSelect> = z.object({
  id: z.boolean().optional(),
  created_at: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  deleted_at: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  translations: z.boolean().optional(),
  data: z.boolean().optional(),
}).strict()

// TOOL
//------------------------------------------------------

export const ToolIncludeSchema: z.ZodType<Prisma.ToolInclude> = z.object({
  category: z.union([z.boolean(),z.lazy(() => CategoryArgsSchema)]).optional(),
  purposes: z.union([z.boolean(),z.lazy(() => PurposeFindManyArgsSchema)]).optional(),
  userProfiles: z.union([z.boolean(),z.lazy(() => UserProfileFindManyArgsSchema)]).optional(),
  countries: z.union([z.boolean(),z.lazy(() => CountryFindManyArgsSchema)]).optional(),
  ToolTexts: z.union([z.boolean(),z.lazy(() => ToolTextsFindManyArgsSchema)]).optional(),
  parent: z.union([z.boolean(),z.lazy(() => ToolArgsSchema)]).optional(),
  forks: z.union([z.boolean(),z.lazy(() => ToolFindManyArgsSchema)]).optional(),
  Blob: z.union([z.boolean(),z.lazy(() => BlobFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ToolCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ToolArgsSchema: z.ZodType<Prisma.ToolDefaultArgs> = z.object({
  select: z.lazy(() => ToolSelectSchema).optional(),
  include: z.lazy(() => ToolIncludeSchema).optional(),
}).strict();

export const ToolCountOutputTypeArgsSchema: z.ZodType<Prisma.ToolCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ToolCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ToolCountOutputTypeSelectSchema: z.ZodType<Prisma.ToolCountOutputTypeSelect> = z.object({
  purposes: z.boolean().optional(),
  userProfiles: z.boolean().optional(),
  countries: z.boolean().optional(),
  ToolTexts: z.boolean().optional(),
  forks: z.boolean().optional(),
  Blob: z.boolean().optional(),
}).strict();

export const ToolSelectSchema: z.ZodType<Prisma.ToolSelect> = z.object({
  id: z.boolean().optional(),
  created_at: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  deleted_at: z.boolean().optional(),
  koksmat_masterdataref: z.boolean().optional(),
  koksmat_masterdata_id: z.boolean().optional(),
  koksmat_masterdata_etag: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  translations: z.boolean().optional(),
  url: z.boolean().optional(),
  status: z.boolean().optional(),
  documents: z.boolean().optional(),
  metadata: z.boolean().optional(),
  icon: z.boolean().optional(),
  uploaded_icon: z.boolean().optional(),
  categoryId: z.boolean().optional(),
  parentId: z.boolean().optional(),
  groupOwnerId: z.boolean().optional(),
  groupViewerId: z.boolean().optional(),
  category: z.union([z.boolean(),z.lazy(() => CategoryArgsSchema)]).optional(),
  purposes: z.union([z.boolean(),z.lazy(() => PurposeFindManyArgsSchema)]).optional(),
  userProfiles: z.union([z.boolean(),z.lazy(() => UserProfileFindManyArgsSchema)]).optional(),
  countries: z.union([z.boolean(),z.lazy(() => CountryFindManyArgsSchema)]).optional(),
  ToolTexts: z.union([z.boolean(),z.lazy(() => ToolTextsFindManyArgsSchema)]).optional(),
  parent: z.union([z.boolean(),z.lazy(() => ToolArgsSchema)]).optional(),
  forks: z.union([z.boolean(),z.lazy(() => ToolFindManyArgsSchema)]).optional(),
  Blob: z.union([z.boolean(),z.lazy(() => BlobFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ToolCountOutputTypeArgsSchema)]).optional(),
}).strict()

// TOOL TEXTS
//------------------------------------------------------

export const ToolTextsIncludeSchema: z.ZodType<Prisma.ToolTextsInclude> = z.object({
  tool: z.union([z.boolean(),z.lazy(() => ToolArgsSchema)]).optional(),
  language: z.union([z.boolean(),z.lazy(() => LanguageArgsSchema)]).optional(),
}).strict()

export const ToolTextsArgsSchema: z.ZodType<Prisma.ToolTextsDefaultArgs> = z.object({
  select: z.lazy(() => ToolTextsSelectSchema).optional(),
  include: z.lazy(() => ToolTextsIncludeSchema).optional(),
}).strict();

export const ToolTextsSelectSchema: z.ZodType<Prisma.ToolTextsSelect> = z.object({
  id: z.boolean().optional(),
  created_at: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  deleted_at: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  toolId: z.boolean().optional(),
  languageId: z.boolean().optional(),
  tool: z.union([z.boolean(),z.lazy(() => ToolArgsSchema)]).optional(),
  language: z.union([z.boolean(),z.lazy(() => LanguageArgsSchema)]).optional(),
}).strict()

// TOOL GROUP
//------------------------------------------------------

export const ToolGroupIncludeSchema: z.ZodType<Prisma.ToolGroupInclude> = z.object({
  owners: z.union([z.boolean(),z.lazy(() => UserProfileFindManyArgsSchema)]).optional(),
  userGroups: z.union([z.boolean(),z.lazy(() => UserGroupFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ToolGroupCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ToolGroupArgsSchema: z.ZodType<Prisma.ToolGroupDefaultArgs> = z.object({
  select: z.lazy(() => ToolGroupSelectSchema).optional(),
  include: z.lazy(() => ToolGroupIncludeSchema).optional(),
}).strict();

export const ToolGroupCountOutputTypeArgsSchema: z.ZodType<Prisma.ToolGroupCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ToolGroupCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ToolGroupCountOutputTypeSelectSchema: z.ZodType<Prisma.ToolGroupCountOutputTypeSelect> = z.object({
  owners: z.boolean().optional(),
  userGroups: z.boolean().optional(),
}).strict();

export const ToolGroupSelectSchema: z.ZodType<Prisma.ToolGroupSelect> = z.object({
  id: z.boolean().optional(),
  created_at: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  deleted_at: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  translations: z.boolean().optional(),
  status: z.boolean().optional(),
  metadata: z.boolean().optional(),
  visibility: z.boolean().optional(),
  owners: z.union([z.boolean(),z.lazy(() => UserProfileFindManyArgsSchema)]).optional(),
  userGroups: z.union([z.boolean(),z.lazy(() => UserGroupFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ToolGroupCountOutputTypeArgsSchema)]).optional(),
}).strict()

// USER GROUP
//------------------------------------------------------

export const UserGroupIncludeSchema: z.ZodType<Prisma.UserGroupInclude> = z.object({
  ToolGroup: z.union([z.boolean(),z.lazy(() => ToolGroupFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserGroupCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const UserGroupArgsSchema: z.ZodType<Prisma.UserGroupDefaultArgs> = z.object({
  select: z.lazy(() => UserGroupSelectSchema).optional(),
  include: z.lazy(() => UserGroupIncludeSchema).optional(),
}).strict();

export const UserGroupCountOutputTypeArgsSchema: z.ZodType<Prisma.UserGroupCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => UserGroupCountOutputTypeSelectSchema).nullish(),
}).strict();

export const UserGroupCountOutputTypeSelectSchema: z.ZodType<Prisma.UserGroupCountOutputTypeSelect> = z.object({
  ToolGroup: z.boolean().optional(),
}).strict();

export const UserGroupSelectSchema: z.ZodType<Prisma.UserGroupSelect> = z.object({
  id: z.boolean().optional(),
  created_at: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  deleted_at: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  translations: z.boolean().optional(),
  sortorder: z.boolean().optional(),
  ToolGroup: z.union([z.boolean(),z.lazy(() => ToolGroupFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserGroupCountOutputTypeArgsSchema)]).optional(),
}).strict()

// USER PROFILE
//------------------------------------------------------

export const UserProfileIncludeSchema: z.ZodType<Prisma.UserProfileInclude> = z.object({
  tools: z.union([z.boolean(),z.lazy(() => ToolFindManyArgsSchema)]).optional(),
  Session: z.union([z.boolean(),z.lazy(() => SessionFindManyArgsSchema)]).optional(),
  ToolGroup: z.union([z.boolean(),z.lazy(() => ToolGroupFindManyArgsSchema)]).optional(),
  roles: z.union([z.boolean(),z.lazy(() => UserRoleFindManyArgsSchema)]).optional(),
  Board: z.union([z.boolean(),z.lazy(() => BoardArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserProfileCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const UserProfileArgsSchema: z.ZodType<Prisma.UserProfileDefaultArgs> = z.object({
  select: z.lazy(() => UserProfileSelectSchema).optional(),
  include: z.lazy(() => UserProfileIncludeSchema).optional(),
}).strict();

export const UserProfileCountOutputTypeArgsSchema: z.ZodType<Prisma.UserProfileCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => UserProfileCountOutputTypeSelectSchema).nullish(),
}).strict();

export const UserProfileCountOutputTypeSelectSchema: z.ZodType<Prisma.UserProfileCountOutputTypeSelect> = z.object({
  tools: z.boolean().optional(),
  Session: z.boolean().optional(),
  ToolGroup: z.boolean().optional(),
  roles: z.boolean().optional(),
}).strict();

export const UserProfileSelectSchema: z.ZodType<Prisma.UserProfileSelect> = z.object({
  id: z.boolean().optional(),
  created_at: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  deleted_at: z.boolean().optional(),
  koksmat_masterdataref: z.boolean().optional(),
  koksmat_masterdata_id: z.boolean().optional(),
  koksmat_masterdata_etag: z.boolean().optional(),
  name: z.boolean().optional(),
  displayName: z.boolean().optional(),
  description: z.boolean().optional(),
  translations: z.boolean().optional(),
  email: z.boolean().optional(),
  status: z.boolean().optional(),
  company: z.boolean().optional(),
  country: z.boolean().optional(),
  companykey: z.boolean().optional(),
  isExternal: z.boolean().optional(),
  CurrentEmail: z.boolean().optional(),
  OldEmail: z.boolean().optional(),
  OnPremisesId: z.boolean().optional(),
  boardId: z.boolean().optional(),
  lastLogin: z.boolean().optional(),
  language: z.boolean().optional(),
  homePage: z.boolean().optional(),
  tools: z.union([z.boolean(),z.lazy(() => ToolFindManyArgsSchema)]).optional(),
  Session: z.union([z.boolean(),z.lazy(() => SessionFindManyArgsSchema)]).optional(),
  ToolGroup: z.union([z.boolean(),z.lazy(() => ToolGroupFindManyArgsSchema)]).optional(),
  roles: z.union([z.boolean(),z.lazy(() => UserRoleFindManyArgsSchema)]).optional(),
  Board: z.union([z.boolean(),z.lazy(() => BoardArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserProfileCountOutputTypeArgsSchema)]).optional(),
}).strict()

// USER ROLE
//------------------------------------------------------

export const UserRoleIncludeSchema: z.ZodType<Prisma.UserRoleInclude> = z.object({
  users: z.union([z.boolean(),z.lazy(() => UserProfileFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserRoleCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const UserRoleArgsSchema: z.ZodType<Prisma.UserRoleDefaultArgs> = z.object({
  select: z.lazy(() => UserRoleSelectSchema).optional(),
  include: z.lazy(() => UserRoleIncludeSchema).optional(),
}).strict();

export const UserRoleCountOutputTypeArgsSchema: z.ZodType<Prisma.UserRoleCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => UserRoleCountOutputTypeSelectSchema).nullish(),
}).strict();

export const UserRoleCountOutputTypeSelectSchema: z.ZodType<Prisma.UserRoleCountOutputTypeSelect> = z.object({
  users: z.boolean().optional(),
}).strict();

export const UserRoleSelectSchema: z.ZodType<Prisma.UserRoleSelect> = z.object({
  id: z.boolean().optional(),
  created_at: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  deleted_at: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  translations: z.boolean().optional(),
  sortorder: z.boolean().optional(),
  users: z.union([z.boolean(),z.lazy(() => UserProfileFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserRoleCountOutputTypeArgsSchema)]).optional(),
}).strict()

// SESSION
//------------------------------------------------------

export const SessionIncludeSchema: z.ZodType<Prisma.SessionInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserProfileArgsSchema)]).optional(),
}).strict()

export const SessionArgsSchema: z.ZodType<Prisma.SessionDefaultArgs> = z.object({
  select: z.lazy(() => SessionSelectSchema).optional(),
  include: z.lazy(() => SessionIncludeSchema).optional(),
}).strict();

export const SessionSelectSchema: z.ZodType<Prisma.SessionSelect> = z.object({
  id: z.boolean().optional(),
  created_at: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  deleted_at: z.boolean().optional(),
  name: z.boolean().optional(),
  data: z.boolean().optional(),
  userProfileId: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserProfileArgsSchema)]).optional(),
}).strict()

// BUSINESS UNIT
//------------------------------------------------------

export const BusinessUnitSelectSchema: z.ZodType<Prisma.BusinessUnitSelect> = z.object({
  id: z.boolean().optional(),
  created_at: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  deleted_at: z.boolean().optional(),
  name: z.boolean().optional(),
  code: z.boolean().optional(),
  description: z.boolean().optional(),
  translations: z.boolean().optional(),
  sortorder: z.boolean().optional(),
  isGroupFunction: z.boolean().optional(),
  homePageUrl: z.boolean().optional(),
  newsPageUrl: z.boolean().optional(),
}).strict()

// GUEST DOMAIN
//------------------------------------------------------

export const GuestDomainSelectSchema: z.ZodType<Prisma.GuestDomainSelect> = z.object({
  id: z.boolean().optional(),
  created_at: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  deleted_at: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  translations: z.boolean().optional(),
  sortorder: z.boolean().optional(),
}).strict()

// CHANNEL CATEGORY
//------------------------------------------------------

export const ChannelCategoryIncludeSchema: z.ZodType<Prisma.ChannelCategoryInclude> = z.object({
  Channel: z.union([z.boolean(),z.lazy(() => ChannelFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ChannelCategoryCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ChannelCategoryArgsSchema: z.ZodType<Prisma.ChannelCategoryDefaultArgs> = z.object({
  select: z.lazy(() => ChannelCategorySelectSchema).optional(),
  include: z.lazy(() => ChannelCategoryIncludeSchema).optional(),
}).strict();

export const ChannelCategoryCountOutputTypeArgsSchema: z.ZodType<Prisma.ChannelCategoryCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ChannelCategoryCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ChannelCategoryCountOutputTypeSelectSchema: z.ZodType<Prisma.ChannelCategoryCountOutputTypeSelect> = z.object({
  Channel: z.boolean().optional(),
}).strict();

export const ChannelCategorySelectSchema: z.ZodType<Prisma.ChannelCategorySelect> = z.object({
  id: z.boolean().optional(),
  created_at: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  deleted_at: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  translations: z.boolean().optional(),
  sortorder: z.boolean().optional(),
  Channel: z.union([z.boolean(),z.lazy(() => ChannelFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ChannelCategoryCountOutputTypeArgsSchema)]).optional(),
}).strict()

// CHANNEL
//------------------------------------------------------

export const ChannelIncludeSchema: z.ZodType<Prisma.ChannelInclude> = z.object({
  region: z.union([z.boolean(),z.lazy(() => RegionArgsSchema)]).optional(),
  countries: z.union([z.boolean(),z.lazy(() => CountryFindManyArgsSchema)]).optional(),
  category: z.union([z.boolean(),z.lazy(() => ChannelCategoryArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ChannelCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ChannelArgsSchema: z.ZodType<Prisma.ChannelDefaultArgs> = z.object({
  select: z.lazy(() => ChannelSelectSchema).optional(),
  include: z.lazy(() => ChannelIncludeSchema).optional(),
}).strict();

export const ChannelCountOutputTypeArgsSchema: z.ZodType<Prisma.ChannelCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ChannelCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ChannelCountOutputTypeSelectSchema: z.ZodType<Prisma.ChannelCountOutputTypeSelect> = z.object({
  countries: z.boolean().optional(),
}).strict();

export const ChannelSelectSchema: z.ZodType<Prisma.ChannelSelect> = z.object({
  id: z.boolean().optional(),
  created_at: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  deleted_at: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  mandatory: z.boolean().optional(),
  translations: z.boolean().optional(),
  sortorder: z.boolean().optional(),
  regionId: z.boolean().optional(),
  externalGroup: z.boolean().optional(),
  categoryId: z.boolean().optional(),
  region: z.union([z.boolean(),z.lazy(() => RegionArgsSchema)]).optional(),
  countries: z.union([z.boolean(),z.lazy(() => CountryFindManyArgsSchema)]).optional(),
  category: z.union([z.boolean(),z.lazy(() => ChannelCategoryArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ChannelCountOutputTypeArgsSchema)]).optional(),
}).strict()

// BLOB
//------------------------------------------------------

export const BlobIncludeSchema: z.ZodType<Prisma.BlobInclude> = z.object({
  source_tool: z.union([z.boolean(),z.lazy(() => ToolArgsSchema)]).optional(),
  BlobResized: z.union([z.boolean(),z.lazy(() => BlobResizedFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => BlobCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const BlobArgsSchema: z.ZodType<Prisma.BlobDefaultArgs> = z.object({
  select: z.lazy(() => BlobSelectSchema).optional(),
  include: z.lazy(() => BlobIncludeSchema).optional(),
}).strict();

export const BlobCountOutputTypeArgsSchema: z.ZodType<Prisma.BlobCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => BlobCountOutputTypeSelectSchema).nullish(),
}).strict();

export const BlobCountOutputTypeSelectSchema: z.ZodType<Prisma.BlobCountOutputTypeSelect> = z.object({
  BlobResized: z.boolean().optional(),
}).strict();

export const BlobSelectSchema: z.ZodType<Prisma.BlobSelect> = z.object({
  id: z.boolean().optional(),
  created_at: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  deleted_at: z.boolean().optional(),
  name: z.boolean().optional(),
  hash: z.boolean().optional(),
  content_type: z.boolean().optional(),
  base64: z.boolean().optional(),
  data: z.boolean().optional(),
  source_tool_id: z.boolean().optional(),
  source_tool: z.union([z.boolean(),z.lazy(() => ToolArgsSchema)]).optional(),
  BlobResized: z.union([z.boolean(),z.lazy(() => BlobResizedFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => BlobCountOutputTypeArgsSchema)]).optional(),
}).strict()

// BLOB RESIZED
//------------------------------------------------------

export const BlobResizedIncludeSchema: z.ZodType<Prisma.BlobResizedInclude> = z.object({
  blob: z.union([z.boolean(),z.lazy(() => BlobArgsSchema)]).optional(),
}).strict()

export const BlobResizedArgsSchema: z.ZodType<Prisma.BlobResizedDefaultArgs> = z.object({
  select: z.lazy(() => BlobResizedSelectSchema).optional(),
  include: z.lazy(() => BlobResizedIncludeSchema).optional(),
}).strict();

export const BlobResizedSelectSchema: z.ZodType<Prisma.BlobResizedSelect> = z.object({
  id: z.boolean().optional(),
  width: z.boolean().optional(),
  data: z.boolean().optional(),
  blobId: z.boolean().optional(),
  blob: z.union([z.boolean(),z.lazy(() => BlobArgsSchema)]).optional(),
}).strict()


/////////////////////////////////////////
// INPUT TYPES
/////////////////////////////////////////

export const SynchronizationLogWhereInputSchema: z.ZodType<Prisma.SynchronizationLogWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SynchronizationLogWhereInputSchema),z.lazy(() => SynchronizationLogWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SynchronizationLogWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SynchronizationLogWhereInputSchema),z.lazy(() => SynchronizationLogWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  category: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  details: z.lazy(() => JsonNullableFilterSchema).optional(),
  hasError: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  error: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const SynchronizationLogOrderByWithRelationInputSchema: z.ZodType<Prisma.SynchronizationLogOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  details: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  hasError: z.lazy(() => SortOrderSchema).optional(),
  error: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
}).strict();

export const SynchronizationLogWhereUniqueInputSchema: z.ZodType<Prisma.SynchronizationLogWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => SynchronizationLogWhereInputSchema),z.lazy(() => SynchronizationLogWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SynchronizationLogWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SynchronizationLogWhereInputSchema),z.lazy(() => SynchronizationLogWhereInputSchema).array() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  category: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  details: z.lazy(() => JsonNullableFilterSchema).optional(),
  hasError: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  error: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict());

export const SynchronizationLogOrderByWithAggregationInputSchema: z.ZodType<Prisma.SynchronizationLogOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  details: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  hasError: z.lazy(() => SortOrderSchema).optional(),
  error: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => SynchronizationLogCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => SynchronizationLogAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SynchronizationLogMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SynchronizationLogMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => SynchronizationLogSumOrderByAggregateInputSchema).optional()
}).strict();

export const SynchronizationLogScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SynchronizationLogScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SynchronizationLogScalarWhereWithAggregatesInputSchema),z.lazy(() => SynchronizationLogScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SynchronizationLogScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SynchronizationLogScalarWhereWithAggregatesInputSchema),z.lazy(() => SynchronizationLogScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  category: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  details: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  hasError: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  error: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const AccessPointWhereInputSchema: z.ZodType<Prisma.AccessPointWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AccessPointWhereInputSchema),z.lazy(() => AccessPointWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccessPointWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccessPointWhereInputSchema),z.lazy(() => AccessPointWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  sortorder: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const AccessPointOrderByWithRelationInputSchema: z.ZodType<Prisma.AccessPointOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sortorder: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
}).strict();

export const AccessPointWhereUniqueInputSchema: z.ZodType<Prisma.AccessPointWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    name: z.string()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    name: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  AND: z.union([ z.lazy(() => AccessPointWhereInputSchema),z.lazy(() => AccessPointWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccessPointWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccessPointWhereInputSchema),z.lazy(() => AccessPointWhereInputSchema).array() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  sortorder: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict());

export const AccessPointOrderByWithAggregationInputSchema: z.ZodType<Prisma.AccessPointOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sortorder: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => AccessPointCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => AccessPointAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AccessPointMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AccessPointMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => AccessPointSumOrderByAggregateInputSchema).optional()
}).strict();

export const AccessPointScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AccessPointScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AccessPointScalarWhereWithAggregatesInputSchema),z.lazy(() => AccessPointScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccessPointScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccessPointScalarWhereWithAggregatesInputSchema),z.lazy(() => AccessPointScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  sortorder: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const AuditLogWhereInputSchema: z.ZodType<Prisma.AuditLogWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AuditLogWhereInputSchema),z.lazy(() => AuditLogWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AuditLogWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AuditLogWhereInputSchema),z.lazy(() => AuditLogWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  action: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  entity: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  entityid: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  actor: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional()
}).strict();

export const AuditLogOrderByWithRelationInputSchema: z.ZodType<Prisma.AuditLogOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  entity: z.lazy(() => SortOrderSchema).optional(),
  entityid: z.lazy(() => SortOrderSchema).optional(),
  actor: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
}).strict();

export const AuditLogWhereUniqueInputSchema: z.ZodType<Prisma.AuditLogWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => AuditLogWhereInputSchema),z.lazy(() => AuditLogWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AuditLogWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AuditLogWhereInputSchema),z.lazy(() => AuditLogWhereInputSchema).array() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  action: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  entity: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  entityid: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  actor: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional()
}).strict());

export const AuditLogOrderByWithAggregationInputSchema: z.ZodType<Prisma.AuditLogOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  entity: z.lazy(() => SortOrderSchema).optional(),
  entityid: z.lazy(() => SortOrderSchema).optional(),
  actor: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => AuditLogCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => AuditLogAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AuditLogMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AuditLogMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => AuditLogSumOrderByAggregateInputSchema).optional()
}).strict();

export const AuditLogScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AuditLogScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AuditLogScalarWhereWithAggregatesInputSchema),z.lazy(() => AuditLogScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AuditLogScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AuditLogScalarWhereWithAggregatesInputSchema),z.lazy(() => AuditLogScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  action: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  entity: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  entityid: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  actor: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  metadata: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional()
}).strict();

export const BoardWhereInputSchema: z.ZodType<Prisma.BoardWhereInput> = z.object({
  AND: z.union([ z.lazy(() => BoardWhereInputSchema),z.lazy(() => BoardWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => BoardWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BoardWhereInputSchema),z.lazy(() => BoardWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  status: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  layout: z.lazy(() => JsonNullableFilterSchema).optional(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  parentId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  groupOwnerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  groupViewerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  parent: z.union([ z.lazy(() => BoardNullableScalarRelationFilterSchema),z.lazy(() => BoardWhereInputSchema) ]).optional().nullable(),
  forks: z.lazy(() => BoardListRelationFilterSchema).optional(),
  managedBy: z.lazy(() => UserProfileListRelationFilterSchema).optional()
}).strict();

export const BoardOrderByWithRelationInputSchema: z.ZodType<Prisma.BoardOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  layout: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  parentId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  groupOwnerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  groupViewerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  parent: z.lazy(() => BoardOrderByWithRelationInputSchema).optional(),
  forks: z.lazy(() => BoardOrderByRelationAggregateInputSchema).optional(),
  managedBy: z.lazy(() => UserProfileOrderByRelationAggregateInputSchema).optional()
}).strict();

export const BoardWhereUniqueInputSchema: z.ZodType<Prisma.BoardWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => BoardWhereInputSchema),z.lazy(() => BoardWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => BoardWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BoardWhereInputSchema),z.lazy(() => BoardWhereInputSchema).array() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  status: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  layout: z.lazy(() => JsonNullableFilterSchema).optional(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  parentId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  groupOwnerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  groupViewerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  parent: z.union([ z.lazy(() => BoardNullableScalarRelationFilterSchema),z.lazy(() => BoardWhereInputSchema) ]).optional().nullable(),
  forks: z.lazy(() => BoardListRelationFilterSchema).optional(),
  managedBy: z.lazy(() => UserProfileListRelationFilterSchema).optional()
}).strict());

export const BoardOrderByWithAggregationInputSchema: z.ZodType<Prisma.BoardOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  layout: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  parentId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  groupOwnerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  groupViewerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => BoardCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => BoardAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => BoardMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => BoardMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => BoardSumOrderByAggregateInputSchema).optional()
}).strict();

export const BoardScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.BoardScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => BoardScalarWhereWithAggregatesInputSchema),z.lazy(() => BoardScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => BoardScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BoardScalarWhereWithAggregatesInputSchema),z.lazy(() => BoardScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  status: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  layout: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  metadata: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  parentId: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  groupOwnerId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  groupViewerId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const CategoryWhereInputSchema: z.ZodType<Prisma.CategoryWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CategoryWhereInputSchema),z.lazy(() => CategoryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CategoryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CategoryWhereInputSchema),z.lazy(() => CategoryWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  sortorder: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  color: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isGroupTool: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  tool: z.lazy(() => ToolListRelationFilterSchema).optional()
}).strict();

export const CategoryOrderByWithRelationInputSchema: z.ZodType<Prisma.CategoryOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sortorder: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  color: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  isGroupTool: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  tool: z.lazy(() => ToolOrderByRelationAggregateInputSchema).optional()
}).strict();

export const CategoryWhereUniqueInputSchema: z.ZodType<Prisma.CategoryWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    name: z.string()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    name: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  AND: z.union([ z.lazy(() => CategoryWhereInputSchema),z.lazy(() => CategoryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CategoryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CategoryWhereInputSchema),z.lazy(() => CategoryWhereInputSchema).array() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  sortorder: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  color: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isGroupTool: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  tool: z.lazy(() => ToolListRelationFilterSchema).optional()
}).strict());

export const CategoryOrderByWithAggregationInputSchema: z.ZodType<Prisma.CategoryOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sortorder: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  color: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  isGroupTool: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => CategoryCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => CategoryAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CategoryMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CategoryMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => CategorySumOrderByAggregateInputSchema).optional()
}).strict();

export const CategoryScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CategoryScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CategoryScalarWhereWithAggregatesInputSchema),z.lazy(() => CategoryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CategoryScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CategoryScalarWhereWithAggregatesInputSchema),z.lazy(() => CategoryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  sortorder: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  color: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  isGroupTool: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const CountryWhereInputSchema: z.ZodType<Prisma.CountryWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CountryWhereInputSchema),z.lazy(() => CountryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CountryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CountryWhereInputSchema),z.lazy(() => CountryWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  region_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  sortorder: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  channelId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  homePageUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  region: z.union([ z.lazy(() => RegionScalarRelationFilterSchema),z.lazy(() => RegionWhereInputSchema) ]).optional(),
  Channel: z.union([ z.lazy(() => ChannelNullableScalarRelationFilterSchema),z.lazy(() => ChannelWhereInputSchema) ]).optional().nullable(),
  tools: z.lazy(() => ToolListRelationFilterSchema).optional()
}).strict();

export const CountryOrderByWithRelationInputSchema: z.ZodType<Prisma.CountryOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  region_id: z.lazy(() => SortOrderSchema).optional(),
  sortorder: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  channelId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  homePageUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  region: z.lazy(() => RegionOrderByWithRelationInputSchema).optional(),
  Channel: z.lazy(() => ChannelOrderByWithRelationInputSchema).optional(),
  tools: z.lazy(() => ToolOrderByRelationAggregateInputSchema).optional()
}).strict();

export const CountryWhereUniqueInputSchema: z.ZodType<Prisma.CountryWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    name: z.string()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    name: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  AND: z.union([ z.lazy(() => CountryWhereInputSchema),z.lazy(() => CountryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CountryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CountryWhereInputSchema),z.lazy(() => CountryWhereInputSchema).array() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  region_id: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  sortorder: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  channelId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  homePageUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  region: z.union([ z.lazy(() => RegionScalarRelationFilterSchema),z.lazy(() => RegionWhereInputSchema) ]).optional(),
  Channel: z.union([ z.lazy(() => ChannelNullableScalarRelationFilterSchema),z.lazy(() => ChannelWhereInputSchema) ]).optional().nullable(),
  tools: z.lazy(() => ToolListRelationFilterSchema).optional()
}).strict());

export const CountryOrderByWithAggregationInputSchema: z.ZodType<Prisma.CountryOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  region_id: z.lazy(() => SortOrderSchema).optional(),
  sortorder: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  channelId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  homePageUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => CountryCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => CountryAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CountryMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CountryMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => CountrySumOrderByAggregateInputSchema).optional()
}).strict();

export const CountryScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CountryScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CountryScalarWhereWithAggregatesInputSchema),z.lazy(() => CountryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CountryScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CountryScalarWhereWithAggregatesInputSchema),z.lazy(() => CountryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  region_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  sortorder: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  channelId: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  homePageUrl: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const LanguageWhereInputSchema: z.ZodType<Prisma.LanguageWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LanguageWhereInputSchema),z.lazy(() => LanguageWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LanguageWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LanguageWhereInputSchema),z.lazy(() => LanguageWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sortorder: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ToolTexts: z.lazy(() => ToolTextsListRelationFilterSchema).optional()
}).strict();

export const LanguageOrderByWithRelationInputSchema: z.ZodType<Prisma.LanguageOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  sortorder: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ToolTexts: z.lazy(() => ToolTextsOrderByRelationAggregateInputSchema).optional()
}).strict();

export const LanguageWhereUniqueInputSchema: z.ZodType<Prisma.LanguageWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    name: z.string()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    name: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  AND: z.union([ z.lazy(() => LanguageWhereInputSchema),z.lazy(() => LanguageWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LanguageWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LanguageWhereInputSchema),z.lazy(() => LanguageWhereInputSchema).array() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sortorder: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ToolTexts: z.lazy(() => ToolTextsListRelationFilterSchema).optional()
}).strict());

export const LanguageOrderByWithAggregationInputSchema: z.ZodType<Prisma.LanguageOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  sortorder: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => LanguageCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => LanguageAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => LanguageMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => LanguageMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => LanguageSumOrderByAggregateInputSchema).optional()
}).strict();

export const LanguageScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.LanguageScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => LanguageScalarWhereWithAggregatesInputSchema),z.lazy(() => LanguageScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => LanguageScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LanguageScalarWhereWithAggregatesInputSchema),z.lazy(() => LanguageScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  code: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  sortorder: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const PurposeWhereInputSchema: z.ZodType<Prisma.PurposeWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PurposeWhereInputSchema),z.lazy(() => PurposeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PurposeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PurposeWhereInputSchema),z.lazy(() => PurposeWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  sortorder: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tools: z.lazy(() => ToolListRelationFilterSchema).optional()
}).strict();

export const PurposeOrderByWithRelationInputSchema: z.ZodType<Prisma.PurposeOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sortorder: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  tools: z.lazy(() => ToolOrderByRelationAggregateInputSchema).optional()
}).strict();

export const PurposeWhereUniqueInputSchema: z.ZodType<Prisma.PurposeWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    name: z.string()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    name: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  AND: z.union([ z.lazy(() => PurposeWhereInputSchema),z.lazy(() => PurposeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PurposeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PurposeWhereInputSchema),z.lazy(() => PurposeWhereInputSchema).array() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  sortorder: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tools: z.lazy(() => ToolListRelationFilterSchema).optional()
}).strict());

export const PurposeOrderByWithAggregationInputSchema: z.ZodType<Prisma.PurposeOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sortorder: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => PurposeCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => PurposeAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PurposeMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PurposeMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => PurposeSumOrderByAggregateInputSchema).optional()
}).strict();

export const PurposeScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PurposeScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PurposeScalarWhereWithAggregatesInputSchema),z.lazy(() => PurposeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PurposeScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PurposeScalarWhereWithAggregatesInputSchema),z.lazy(() => PurposeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  sortorder: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const RegionWhereInputSchema: z.ZodType<Prisma.RegionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RegionWhereInputSchema),z.lazy(() => RegionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RegionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RegionWhereInputSchema),z.lazy(() => RegionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  sortOrder: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Country: z.lazy(() => CountryListRelationFilterSchema).optional(),
  Channel: z.lazy(() => ChannelListRelationFilterSchema).optional()
}).strict();

export const RegionOrderByWithRelationInputSchema: z.ZodType<Prisma.RegionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sortOrder: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Country: z.lazy(() => CountryOrderByRelationAggregateInputSchema).optional(),
  Channel: z.lazy(() => ChannelOrderByRelationAggregateInputSchema).optional()
}).strict();

export const RegionWhereUniqueInputSchema: z.ZodType<Prisma.RegionWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    name: z.string()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    name: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  AND: z.union([ z.lazy(() => RegionWhereInputSchema),z.lazy(() => RegionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RegionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RegionWhereInputSchema),z.lazy(() => RegionWhereInputSchema).array() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  sortOrder: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Country: z.lazy(() => CountryListRelationFilterSchema).optional(),
  Channel: z.lazy(() => ChannelListRelationFilterSchema).optional()
}).strict());

export const RegionOrderByWithAggregationInputSchema: z.ZodType<Prisma.RegionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sortOrder: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => RegionCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => RegionAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => RegionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => RegionMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => RegionSumOrderByAggregateInputSchema).optional()
}).strict();

export const RegionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RegionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => RegionScalarWhereWithAggregatesInputSchema),z.lazy(() => RegionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => RegionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RegionScalarWhereWithAggregatesInputSchema),z.lazy(() => RegionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  sortOrder: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const SettingWhereInputSchema: z.ZodType<Prisma.SettingWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SettingWhereInputSchema),z.lazy(() => SettingWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SettingWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SettingWhereInputSchema),z.lazy(() => SettingWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  data: z.lazy(() => JsonNullableFilterSchema).optional()
}).strict();

export const SettingOrderByWithRelationInputSchema: z.ZodType<Prisma.SettingOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
}).strict();

export const SettingWhereUniqueInputSchema: z.ZodType<Prisma.SettingWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => SettingWhereInputSchema),z.lazy(() => SettingWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SettingWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SettingWhereInputSchema),z.lazy(() => SettingWhereInputSchema).array() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  data: z.lazy(() => JsonNullableFilterSchema).optional()
}).strict());

export const SettingOrderByWithAggregationInputSchema: z.ZodType<Prisma.SettingOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => SettingCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => SettingAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SettingMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SettingMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => SettingSumOrderByAggregateInputSchema).optional()
}).strict();

export const SettingScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SettingScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SettingScalarWhereWithAggregatesInputSchema),z.lazy(() => SettingScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SettingScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SettingScalarWhereWithAggregatesInputSchema),z.lazy(() => SettingScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  data: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional()
}).strict();

export const ToolWhereInputSchema: z.ZodType<Prisma.ToolWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ToolWhereInputSchema),z.lazy(() => ToolWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ToolWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ToolWhereInputSchema),z.lazy(() => ToolWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  documents: z.lazy(() => JsonNullableFilterSchema).optional(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  icon: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  uploaded_icon: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  categoryId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  parentId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  groupOwnerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  groupViewerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  category: z.union([ z.lazy(() => CategoryScalarRelationFilterSchema),z.lazy(() => CategoryWhereInputSchema) ]).optional(),
  purposes: z.lazy(() => PurposeListRelationFilterSchema).optional(),
  userProfiles: z.lazy(() => UserProfileListRelationFilterSchema).optional(),
  countries: z.lazy(() => CountryListRelationFilterSchema).optional(),
  ToolTexts: z.lazy(() => ToolTextsListRelationFilterSchema).optional(),
  parent: z.union([ z.lazy(() => ToolNullableScalarRelationFilterSchema),z.lazy(() => ToolWhereInputSchema) ]).optional().nullable(),
  forks: z.lazy(() => ToolListRelationFilterSchema).optional(),
  Blob: z.lazy(() => BlobListRelationFilterSchema).optional()
}).strict();

export const ToolOrderByWithRelationInputSchema: z.ZodType<Prisma.ToolOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  koksmat_masterdataref: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  koksmat_masterdata_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  koksmat_masterdata_etag: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  status: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  documents: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  icon: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  uploaded_icon: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  parentId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  groupOwnerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  groupViewerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  category: z.lazy(() => CategoryOrderByWithRelationInputSchema).optional(),
  purposes: z.lazy(() => PurposeOrderByRelationAggregateInputSchema).optional(),
  userProfiles: z.lazy(() => UserProfileOrderByRelationAggregateInputSchema).optional(),
  countries: z.lazy(() => CountryOrderByRelationAggregateInputSchema).optional(),
  ToolTexts: z.lazy(() => ToolTextsOrderByRelationAggregateInputSchema).optional(),
  parent: z.lazy(() => ToolOrderByWithRelationInputSchema).optional(),
  forks: z.lazy(() => ToolOrderByRelationAggregateInputSchema).optional(),
  Blob: z.lazy(() => BlobOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ToolWhereUniqueInputSchema: z.ZodType<Prisma.ToolWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => ToolWhereInputSchema),z.lazy(() => ToolWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ToolWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ToolWhereInputSchema),z.lazy(() => ToolWhereInputSchema).array() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  documents: z.lazy(() => JsonNullableFilterSchema).optional(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  icon: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  uploaded_icon: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  categoryId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  parentId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  groupOwnerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  groupViewerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  category: z.union([ z.lazy(() => CategoryScalarRelationFilterSchema),z.lazy(() => CategoryWhereInputSchema) ]).optional(),
  purposes: z.lazy(() => PurposeListRelationFilterSchema).optional(),
  userProfiles: z.lazy(() => UserProfileListRelationFilterSchema).optional(),
  countries: z.lazy(() => CountryListRelationFilterSchema).optional(),
  ToolTexts: z.lazy(() => ToolTextsListRelationFilterSchema).optional(),
  parent: z.union([ z.lazy(() => ToolNullableScalarRelationFilterSchema),z.lazy(() => ToolWhereInputSchema) ]).optional().nullable(),
  forks: z.lazy(() => ToolListRelationFilterSchema).optional(),
  Blob: z.lazy(() => BlobListRelationFilterSchema).optional()
}).strict());

export const ToolOrderByWithAggregationInputSchema: z.ZodType<Prisma.ToolOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  koksmat_masterdataref: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  koksmat_masterdata_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  koksmat_masterdata_etag: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  status: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  documents: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  icon: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  uploaded_icon: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  parentId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  groupOwnerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  groupViewerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => ToolCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ToolAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ToolMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ToolMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ToolSumOrderByAggregateInputSchema).optional()
}).strict();

export const ToolScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ToolScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ToolScalarWhereWithAggregatesInputSchema),z.lazy(() => ToolScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ToolScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ToolScalarWhereWithAggregatesInputSchema),z.lazy(() => ToolScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  url: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  documents: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  metadata: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  icon: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  uploaded_icon: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  categoryId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  parentId: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  groupOwnerId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  groupViewerId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const ToolTextsWhereInputSchema: z.ZodType<Prisma.ToolTextsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ToolTextsWhereInputSchema),z.lazy(() => ToolTextsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ToolTextsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ToolTextsWhereInputSchema),z.lazy(() => ToolTextsWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  toolId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  languageId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  tool: z.union([ z.lazy(() => ToolScalarRelationFilterSchema),z.lazy(() => ToolWhereInputSchema) ]).optional(),
  language: z.union([ z.lazy(() => LanguageScalarRelationFilterSchema),z.lazy(() => LanguageWhereInputSchema) ]).optional(),
}).strict();

export const ToolTextsOrderByWithRelationInputSchema: z.ZodType<Prisma.ToolTextsOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  toolId: z.lazy(() => SortOrderSchema).optional(),
  languageId: z.lazy(() => SortOrderSchema).optional(),
  tool: z.lazy(() => ToolOrderByWithRelationInputSchema).optional(),
  language: z.lazy(() => LanguageOrderByWithRelationInputSchema).optional()
}).strict();

export const ToolTextsWhereUniqueInputSchema: z.ZodType<Prisma.ToolTextsWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    toolId_languageId: z.lazy(() => ToolTextsToolId_languageIdCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    toolId_languageId: z.lazy(() => ToolTextsToolId_languageIdCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  toolId_languageId: z.lazy(() => ToolTextsToolId_languageIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => ToolTextsWhereInputSchema),z.lazy(() => ToolTextsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ToolTextsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ToolTextsWhereInputSchema),z.lazy(() => ToolTextsWhereInputSchema).array() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  toolId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  languageId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  tool: z.union([ z.lazy(() => ToolScalarRelationFilterSchema),z.lazy(() => ToolWhereInputSchema) ]).optional(),
  language: z.union([ z.lazy(() => LanguageScalarRelationFilterSchema),z.lazy(() => LanguageWhereInputSchema) ]).optional(),
}).strict());

export const ToolTextsOrderByWithAggregationInputSchema: z.ZodType<Prisma.ToolTextsOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  toolId: z.lazy(() => SortOrderSchema).optional(),
  languageId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ToolTextsCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ToolTextsAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ToolTextsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ToolTextsMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ToolTextsSumOrderByAggregateInputSchema).optional()
}).strict();

export const ToolTextsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ToolTextsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ToolTextsScalarWhereWithAggregatesInputSchema),z.lazy(() => ToolTextsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ToolTextsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ToolTextsScalarWhereWithAggregatesInputSchema),z.lazy(() => ToolTextsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  toolId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  languageId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const ToolGroupWhereInputSchema: z.ZodType<Prisma.ToolGroupWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ToolGroupWhereInputSchema),z.lazy(() => ToolGroupWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ToolGroupWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ToolGroupWhereInputSchema),z.lazy(() => ToolGroupWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  status: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  visibility: z.union([ z.lazy(() => EnumStatusFilterSchema),z.lazy(() => StatusSchema) ]).optional(),
  owners: z.lazy(() => UserProfileListRelationFilterSchema).optional(),
  userGroups: z.lazy(() => UserGroupListRelationFilterSchema).optional()
}).strict();

export const ToolGroupOrderByWithRelationInputSchema: z.ZodType<Prisma.ToolGroupOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  visibility: z.lazy(() => SortOrderSchema).optional(),
  owners: z.lazy(() => UserProfileOrderByRelationAggregateInputSchema).optional(),
  userGroups: z.lazy(() => UserGroupOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ToolGroupWhereUniqueInputSchema: z.ZodType<Prisma.ToolGroupWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    name: z.string()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    name: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  AND: z.union([ z.lazy(() => ToolGroupWhereInputSchema),z.lazy(() => ToolGroupWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ToolGroupWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ToolGroupWhereInputSchema),z.lazy(() => ToolGroupWhereInputSchema).array() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  status: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  visibility: z.union([ z.lazy(() => EnumStatusFilterSchema),z.lazy(() => StatusSchema) ]).optional(),
  owners: z.lazy(() => UserProfileListRelationFilterSchema).optional(),
  userGroups: z.lazy(() => UserGroupListRelationFilterSchema).optional()
}).strict());

export const ToolGroupOrderByWithAggregationInputSchema: z.ZodType<Prisma.ToolGroupOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  visibility: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ToolGroupCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ToolGroupAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ToolGroupMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ToolGroupMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ToolGroupSumOrderByAggregateInputSchema).optional()
}).strict();

export const ToolGroupScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ToolGroupScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ToolGroupScalarWhereWithAggregatesInputSchema),z.lazy(() => ToolGroupScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ToolGroupScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ToolGroupScalarWhereWithAggregatesInputSchema),z.lazy(() => ToolGroupScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  status: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  metadata: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  visibility: z.union([ z.lazy(() => EnumStatusWithAggregatesFilterSchema),z.lazy(() => StatusSchema) ]).optional(),
}).strict();

export const UserGroupWhereInputSchema: z.ZodType<Prisma.UserGroupWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserGroupWhereInputSchema),z.lazy(() => UserGroupWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserGroupWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserGroupWhereInputSchema),z.lazy(() => UserGroupWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  sortorder: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ToolGroup: z.lazy(() => ToolGroupListRelationFilterSchema).optional()
}).strict();

export const UserGroupOrderByWithRelationInputSchema: z.ZodType<Prisma.UserGroupOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sortorder: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ToolGroup: z.lazy(() => ToolGroupOrderByRelationAggregateInputSchema).optional()
}).strict();

export const UserGroupWhereUniqueInputSchema: z.ZodType<Prisma.UserGroupWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    name: z.string()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    name: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  AND: z.union([ z.lazy(() => UserGroupWhereInputSchema),z.lazy(() => UserGroupWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserGroupWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserGroupWhereInputSchema),z.lazy(() => UserGroupWhereInputSchema).array() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  sortorder: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ToolGroup: z.lazy(() => ToolGroupListRelationFilterSchema).optional()
}).strict());

export const UserGroupOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserGroupOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sortorder: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => UserGroupCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => UserGroupAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserGroupMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserGroupMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => UserGroupSumOrderByAggregateInputSchema).optional()
}).strict();

export const UserGroupScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserGroupScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserGroupScalarWhereWithAggregatesInputSchema),z.lazy(() => UserGroupScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserGroupScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserGroupScalarWhereWithAggregatesInputSchema),z.lazy(() => UserGroupScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  sortorder: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const UserProfileWhereInputSchema: z.ZodType<Prisma.UserProfileWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserProfileWhereInputSchema),z.lazy(() => UserProfileWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserProfileWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserProfileWhereInputSchema),z.lazy(() => UserProfileWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  displayName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  company: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  country: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  companykey: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isExternal: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  CurrentEmail: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OldEmail: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OnPremisesId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  boardId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  lastLogin: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  language: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  homePage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tools: z.lazy(() => ToolListRelationFilterSchema).optional(),
  Session: z.lazy(() => SessionListRelationFilterSchema).optional(),
  ToolGroup: z.lazy(() => ToolGroupListRelationFilterSchema).optional(),
  roles: z.lazy(() => UserRoleListRelationFilterSchema).optional(),
  Board: z.union([ z.lazy(() => BoardNullableScalarRelationFilterSchema),z.lazy(() => BoardWhereInputSchema) ]).optional().nullable(),
}).strict();

export const UserProfileOrderByWithRelationInputSchema: z.ZodType<Prisma.UserProfileOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  koksmat_masterdataref: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  koksmat_masterdata_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  koksmat_masterdata_etag: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  displayName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  status: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  company: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  country: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  companykey: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  isExternal: z.lazy(() => SortOrderSchema).optional(),
  CurrentEmail: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OldEmail: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OnPremisesId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  boardId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lastLogin: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  language: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  homePage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  tools: z.lazy(() => ToolOrderByRelationAggregateInputSchema).optional(),
  Session: z.lazy(() => SessionOrderByRelationAggregateInputSchema).optional(),
  ToolGroup: z.lazy(() => ToolGroupOrderByRelationAggregateInputSchema).optional(),
  roles: z.lazy(() => UserRoleOrderByRelationAggregateInputSchema).optional(),
  Board: z.lazy(() => BoardOrderByWithRelationInputSchema).optional()
}).strict();

export const UserProfileWhereUniqueInputSchema: z.ZodType<Prisma.UserProfileWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    name: z.string(),
    email: z.string()
  }),
  z.object({
    id: z.number().int(),
    name: z.string(),
  }),
  z.object({
    id: z.number().int(),
    email: z.string(),
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    name: z.string(),
    email: z.string(),
  }),
  z.object({
    name: z.string(),
  }),
  z.object({
    email: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  email: z.string().optional(),
  AND: z.union([ z.lazy(() => UserProfileWhereInputSchema),z.lazy(() => UserProfileWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserProfileWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserProfileWhereInputSchema),z.lazy(() => UserProfileWhereInputSchema).array() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  displayName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  status: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  company: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  country: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  companykey: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isExternal: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  CurrentEmail: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OldEmail: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OnPremisesId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  boardId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  lastLogin: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  language: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  homePage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tools: z.lazy(() => ToolListRelationFilterSchema).optional(),
  Session: z.lazy(() => SessionListRelationFilterSchema).optional(),
  ToolGroup: z.lazy(() => ToolGroupListRelationFilterSchema).optional(),
  roles: z.lazy(() => UserRoleListRelationFilterSchema).optional(),
  Board: z.union([ z.lazy(() => BoardNullableScalarRelationFilterSchema),z.lazy(() => BoardWhereInputSchema) ]).optional().nullable(),
}).strict());

export const UserProfileOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserProfileOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  koksmat_masterdataref: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  koksmat_masterdata_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  koksmat_masterdata_etag: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  displayName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  status: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  company: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  country: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  companykey: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  isExternal: z.lazy(() => SortOrderSchema).optional(),
  CurrentEmail: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OldEmail: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OnPremisesId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  boardId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lastLogin: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  language: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  homePage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => UserProfileCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => UserProfileAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserProfileMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserProfileMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => UserProfileSumOrderByAggregateInputSchema).optional()
}).strict();

export const UserProfileScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserProfileScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserProfileScalarWhereWithAggregatesInputSchema),z.lazy(() => UserProfileScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserProfileScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserProfileScalarWhereWithAggregatesInputSchema),z.lazy(() => UserProfileScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  displayName: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  email: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  company: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  country: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  companykey: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  isExternal: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  CurrentEmail: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  OldEmail: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  OnPremisesId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  boardId: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  lastLogin: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  language: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  homePage: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const UserRoleWhereInputSchema: z.ZodType<Prisma.UserRoleWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserRoleWhereInputSchema),z.lazy(() => UserRoleWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserRoleWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserRoleWhereInputSchema),z.lazy(() => UserRoleWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  sortorder: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  users: z.lazy(() => UserProfileListRelationFilterSchema).optional()
}).strict();

export const UserRoleOrderByWithRelationInputSchema: z.ZodType<Prisma.UserRoleOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sortorder: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  users: z.lazy(() => UserProfileOrderByRelationAggregateInputSchema).optional()
}).strict();

export const UserRoleWhereUniqueInputSchema: z.ZodType<Prisma.UserRoleWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    name: z.string()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    name: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  AND: z.union([ z.lazy(() => UserRoleWhereInputSchema),z.lazy(() => UserRoleWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserRoleWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserRoleWhereInputSchema),z.lazy(() => UserRoleWhereInputSchema).array() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  sortorder: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  users: z.lazy(() => UserProfileListRelationFilterSchema).optional()
}).strict());

export const UserRoleOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserRoleOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sortorder: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => UserRoleCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => UserRoleAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserRoleMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserRoleMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => UserRoleSumOrderByAggregateInputSchema).optional()
}).strict();

export const UserRoleScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserRoleScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserRoleScalarWhereWithAggregatesInputSchema),z.lazy(() => UserRoleScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserRoleScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserRoleScalarWhereWithAggregatesInputSchema),z.lazy(() => UserRoleScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  sortorder: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const SessionWhereInputSchema: z.ZodType<Prisma.SessionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  userProfileId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  user: z.union([ z.lazy(() => UserProfileScalarRelationFilterSchema),z.lazy(() => UserProfileWhereInputSchema) ]).optional(),
}).strict();

export const SessionOrderByWithRelationInputSchema: z.ZodType<Prisma.SessionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  data: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userProfileId: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserProfileOrderByWithRelationInputSchema).optional()
}).strict();

export const SessionWhereUniqueInputSchema: z.ZodType<Prisma.SessionWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  userProfileId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  user: z.union([ z.lazy(() => UserProfileScalarRelationFilterSchema),z.lazy(() => UserProfileWhereInputSchema) ]).optional(),
}).strict());

export const SessionOrderByWithAggregationInputSchema: z.ZodType<Prisma.SessionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  data: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userProfileId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SessionCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => SessionAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SessionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SessionMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => SessionSumOrderByAggregateInputSchema).optional()
}).strict();

export const SessionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SessionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SessionScalarWhereWithAggregatesInputSchema),z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionScalarWhereWithAggregatesInputSchema),z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  data: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  userProfileId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const BusinessUnitWhereInputSchema: z.ZodType<Prisma.BusinessUnitWhereInput> = z.object({
  AND: z.union([ z.lazy(() => BusinessUnitWhereInputSchema),z.lazy(() => BusinessUnitWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => BusinessUnitWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BusinessUnitWhereInputSchema),z.lazy(() => BusinessUnitWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  sortorder: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isGroupFunction: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  homePageUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  newsPageUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const BusinessUnitOrderByWithRelationInputSchema: z.ZodType<Prisma.BusinessUnitOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sortorder: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  isGroupFunction: z.lazy(() => SortOrderSchema).optional(),
  homePageUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  newsPageUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
}).strict();

export const BusinessUnitWhereUniqueInputSchema: z.ZodType<Prisma.BusinessUnitWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    name: z.string(),
    code: z.string()
  }),
  z.object({
    id: z.number().int(),
    name: z.string(),
  }),
  z.object({
    id: z.number().int(),
    code: z.string(),
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    name: z.string(),
    code: z.string(),
  }),
  z.object({
    name: z.string(),
  }),
  z.object({
    code: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  code: z.string().optional(),
  AND: z.union([ z.lazy(() => BusinessUnitWhereInputSchema),z.lazy(() => BusinessUnitWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => BusinessUnitWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BusinessUnitWhereInputSchema),z.lazy(() => BusinessUnitWhereInputSchema).array() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  sortorder: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isGroupFunction: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  homePageUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  newsPageUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict());

export const BusinessUnitOrderByWithAggregationInputSchema: z.ZodType<Prisma.BusinessUnitOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sortorder: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  isGroupFunction: z.lazy(() => SortOrderSchema).optional(),
  homePageUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  newsPageUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => BusinessUnitCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => BusinessUnitAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => BusinessUnitMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => BusinessUnitMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => BusinessUnitSumOrderByAggregateInputSchema).optional()
}).strict();

export const BusinessUnitScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.BusinessUnitScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => BusinessUnitScalarWhereWithAggregatesInputSchema),z.lazy(() => BusinessUnitScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => BusinessUnitScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BusinessUnitScalarWhereWithAggregatesInputSchema),z.lazy(() => BusinessUnitScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  sortorder: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  isGroupFunction: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  homePageUrl: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  newsPageUrl: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const GuestDomainWhereInputSchema: z.ZodType<Prisma.GuestDomainWhereInput> = z.object({
  AND: z.union([ z.lazy(() => GuestDomainWhereInputSchema),z.lazy(() => GuestDomainWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => GuestDomainWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => GuestDomainWhereInputSchema),z.lazy(() => GuestDomainWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  sortorder: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const GuestDomainOrderByWithRelationInputSchema: z.ZodType<Prisma.GuestDomainOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sortorder: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
}).strict();

export const GuestDomainWhereUniqueInputSchema: z.ZodType<Prisma.GuestDomainWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    name: z.string()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    name: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  AND: z.union([ z.lazy(() => GuestDomainWhereInputSchema),z.lazy(() => GuestDomainWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => GuestDomainWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => GuestDomainWhereInputSchema),z.lazy(() => GuestDomainWhereInputSchema).array() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  sortorder: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict());

export const GuestDomainOrderByWithAggregationInputSchema: z.ZodType<Prisma.GuestDomainOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sortorder: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => GuestDomainCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => GuestDomainAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => GuestDomainMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => GuestDomainMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => GuestDomainSumOrderByAggregateInputSchema).optional()
}).strict();

export const GuestDomainScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.GuestDomainScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => GuestDomainScalarWhereWithAggregatesInputSchema),z.lazy(() => GuestDomainScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => GuestDomainScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => GuestDomainScalarWhereWithAggregatesInputSchema),z.lazy(() => GuestDomainScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  sortorder: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const ChannelCategoryWhereInputSchema: z.ZodType<Prisma.ChannelCategoryWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ChannelCategoryWhereInputSchema),z.lazy(() => ChannelCategoryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ChannelCategoryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ChannelCategoryWhereInputSchema),z.lazy(() => ChannelCategoryWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  sortorder: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Channel: z.lazy(() => ChannelListRelationFilterSchema).optional()
}).strict();

export const ChannelCategoryOrderByWithRelationInputSchema: z.ZodType<Prisma.ChannelCategoryOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sortorder: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Channel: z.lazy(() => ChannelOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ChannelCategoryWhereUniqueInputSchema: z.ZodType<Prisma.ChannelCategoryWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    name: z.string()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    name: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  AND: z.union([ z.lazy(() => ChannelCategoryWhereInputSchema),z.lazy(() => ChannelCategoryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ChannelCategoryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ChannelCategoryWhereInputSchema),z.lazy(() => ChannelCategoryWhereInputSchema).array() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  sortorder: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Channel: z.lazy(() => ChannelListRelationFilterSchema).optional()
}).strict());

export const ChannelCategoryOrderByWithAggregationInputSchema: z.ZodType<Prisma.ChannelCategoryOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sortorder: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => ChannelCategoryCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ChannelCategoryAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ChannelCategoryMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ChannelCategoryMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ChannelCategorySumOrderByAggregateInputSchema).optional()
}).strict();

export const ChannelCategoryScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ChannelCategoryScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ChannelCategoryScalarWhereWithAggregatesInputSchema),z.lazy(() => ChannelCategoryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ChannelCategoryScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ChannelCategoryScalarWhereWithAggregatesInputSchema),z.lazy(() => ChannelCategoryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  sortorder: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const ChannelWhereInputSchema: z.ZodType<Prisma.ChannelWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ChannelWhereInputSchema),z.lazy(() => ChannelWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ChannelWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ChannelWhereInputSchema),z.lazy(() => ChannelWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  mandatory: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  sortorder: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  regionId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  externalGroup: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  categoryId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  region: z.union([ z.lazy(() => RegionNullableScalarRelationFilterSchema),z.lazy(() => RegionWhereInputSchema) ]).optional().nullable(),
  countries: z.lazy(() => CountryListRelationFilterSchema).optional(),
  category: z.union([ z.lazy(() => ChannelCategoryNullableScalarRelationFilterSchema),z.lazy(() => ChannelCategoryWhereInputSchema) ]).optional().nullable(),
}).strict();

export const ChannelOrderByWithRelationInputSchema: z.ZodType<Prisma.ChannelOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  mandatory: z.lazy(() => SortOrderSchema).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sortorder: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  regionId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  externalGroup: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  categoryId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  region: z.lazy(() => RegionOrderByWithRelationInputSchema).optional(),
  countries: z.lazy(() => CountryOrderByRelationAggregateInputSchema).optional(),
  category: z.lazy(() => ChannelCategoryOrderByWithRelationInputSchema).optional()
}).strict();

export const ChannelWhereUniqueInputSchema: z.ZodType<Prisma.ChannelWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    name: z.string()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    name: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  AND: z.union([ z.lazy(() => ChannelWhereInputSchema),z.lazy(() => ChannelWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ChannelWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ChannelWhereInputSchema),z.lazy(() => ChannelWhereInputSchema).array() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  mandatory: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  sortorder: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  regionId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  externalGroup: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  categoryId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  region: z.union([ z.lazy(() => RegionNullableScalarRelationFilterSchema),z.lazy(() => RegionWhereInputSchema) ]).optional().nullable(),
  countries: z.lazy(() => CountryListRelationFilterSchema).optional(),
  category: z.union([ z.lazy(() => ChannelCategoryNullableScalarRelationFilterSchema),z.lazy(() => ChannelCategoryWhereInputSchema) ]).optional().nullable(),
}).strict());

export const ChannelOrderByWithAggregationInputSchema: z.ZodType<Prisma.ChannelOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  mandatory: z.lazy(() => SortOrderSchema).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sortorder: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  regionId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  externalGroup: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  categoryId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => ChannelCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ChannelAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ChannelMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ChannelMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ChannelSumOrderByAggregateInputSchema).optional()
}).strict();

export const ChannelScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ChannelScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ChannelScalarWhereWithAggregatesInputSchema),z.lazy(() => ChannelScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ChannelScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ChannelScalarWhereWithAggregatesInputSchema),z.lazy(() => ChannelScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  mandatory: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  translations: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  sortorder: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  regionId: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  externalGroup: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  categoryId: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const BlobWhereInputSchema: z.ZodType<Prisma.BlobWhereInput> = z.object({
  AND: z.union([ z.lazy(() => BlobWhereInputSchema),z.lazy(() => BlobWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => BlobWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BlobWhereInputSchema),z.lazy(() => BlobWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  hash: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  content_type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  base64: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  data: z.union([ z.lazy(() => BytesFilterSchema),z.instanceof(Buffer) ]).optional(),
  source_tool_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  source_tool: z.union([ z.lazy(() => ToolNullableScalarRelationFilterSchema),z.lazy(() => ToolWhereInputSchema) ]).optional().nullable(),
  BlobResized: z.lazy(() => BlobResizedListRelationFilterSchema).optional()
}).strict();

export const BlobOrderByWithRelationInputSchema: z.ZodType<Prisma.BlobOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  hash: z.lazy(() => SortOrderSchema).optional(),
  content_type: z.lazy(() => SortOrderSchema).optional(),
  base64: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  source_tool_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  source_tool: z.lazy(() => ToolOrderByWithRelationInputSchema).optional(),
  BlobResized: z.lazy(() => BlobResizedOrderByRelationAggregateInputSchema).optional()
}).strict();

export const BlobWhereUniqueInputSchema: z.ZodType<Prisma.BlobWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    hash: z.string()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    hash: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  hash: z.string().optional(),
  AND: z.union([ z.lazy(() => BlobWhereInputSchema),z.lazy(() => BlobWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => BlobWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BlobWhereInputSchema),z.lazy(() => BlobWhereInputSchema).array() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  content_type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  base64: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  data: z.union([ z.lazy(() => BytesFilterSchema),z.instanceof(Buffer) ]).optional(),
  source_tool_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  source_tool: z.union([ z.lazy(() => ToolNullableScalarRelationFilterSchema),z.lazy(() => ToolWhereInputSchema) ]).optional().nullable(),
  BlobResized: z.lazy(() => BlobResizedListRelationFilterSchema).optional()
}).strict());

export const BlobOrderByWithAggregationInputSchema: z.ZodType<Prisma.BlobOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  hash: z.lazy(() => SortOrderSchema).optional(),
  content_type: z.lazy(() => SortOrderSchema).optional(),
  base64: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  source_tool_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => BlobCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => BlobAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => BlobMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => BlobMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => BlobSumOrderByAggregateInputSchema).optional()
}).strict();

export const BlobScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.BlobScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => BlobScalarWhereWithAggregatesInputSchema),z.lazy(() => BlobScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => BlobScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BlobScalarWhereWithAggregatesInputSchema),z.lazy(() => BlobScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  hash: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  content_type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  base64: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  data: z.union([ z.lazy(() => BytesWithAggregatesFilterSchema),z.instanceof(Buffer) ]).optional(),
  source_tool_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const BlobResizedWhereInputSchema: z.ZodType<Prisma.BlobResizedWhereInput> = z.object({
  AND: z.union([ z.lazy(() => BlobResizedWhereInputSchema),z.lazy(() => BlobResizedWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => BlobResizedWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BlobResizedWhereInputSchema),z.lazy(() => BlobResizedWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  width: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  data: z.union([ z.lazy(() => BytesFilterSchema),z.instanceof(Buffer) ]).optional(),
  blobId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  blob: z.union([ z.lazy(() => BlobScalarRelationFilterSchema),z.lazy(() => BlobWhereInputSchema) ]).optional(),
}).strict();

export const BlobResizedOrderByWithRelationInputSchema: z.ZodType<Prisma.BlobResizedOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  width: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  blobId: z.lazy(() => SortOrderSchema).optional(),
  blob: z.lazy(() => BlobOrderByWithRelationInputSchema).optional()
}).strict();

export const BlobResizedWhereUniqueInputSchema: z.ZodType<Prisma.BlobResizedWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => BlobResizedWhereInputSchema),z.lazy(() => BlobResizedWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => BlobResizedWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BlobResizedWhereInputSchema),z.lazy(() => BlobResizedWhereInputSchema).array() ]).optional(),
  width: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  data: z.union([ z.lazy(() => BytesFilterSchema),z.instanceof(Buffer) ]).optional(),
  blobId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  blob: z.union([ z.lazy(() => BlobScalarRelationFilterSchema),z.lazy(() => BlobWhereInputSchema) ]).optional(),
}).strict());

export const BlobResizedOrderByWithAggregationInputSchema: z.ZodType<Prisma.BlobResizedOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  width: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  blobId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => BlobResizedCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => BlobResizedAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => BlobResizedMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => BlobResizedMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => BlobResizedSumOrderByAggregateInputSchema).optional()
}).strict();

export const BlobResizedScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.BlobResizedScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => BlobResizedScalarWhereWithAggregatesInputSchema),z.lazy(() => BlobResizedScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => BlobResizedScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BlobResizedScalarWhereWithAggregatesInputSchema),z.lazy(() => BlobResizedScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  width: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  data: z.union([ z.lazy(() => BytesWithAggregatesFilterSchema),z.instanceof(Buffer) ]).optional(),
  blobId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const SynchronizationLogCreateInputSchema: z.ZodType<Prisma.SynchronizationLogCreateInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  category: z.string(),
  details: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  hasError: z.boolean(),
  error: z.string().optional().nullable()
}).strict();

export const SynchronizationLogUncheckedCreateInputSchema: z.ZodType<Prisma.SynchronizationLogUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  category: z.string(),
  details: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  hasError: z.boolean(),
  error: z.string().optional().nullable()
}).strict();

export const SynchronizationLogUpdateInputSchema: z.ZodType<Prisma.SynchronizationLogUpdateInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  details: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  hasError: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SynchronizationLogUncheckedUpdateInputSchema: z.ZodType<Prisma.SynchronizationLogUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  details: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  hasError: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SynchronizationLogCreateManyInputSchema: z.ZodType<Prisma.SynchronizationLogCreateManyInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  category: z.string(),
  details: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  hasError: z.boolean(),
  error: z.string().optional().nullable()
}).strict();

export const SynchronizationLogUpdateManyMutationInputSchema: z.ZodType<Prisma.SynchronizationLogUpdateManyMutationInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  details: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  hasError: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SynchronizationLogUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SynchronizationLogUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  details: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  hasError: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AccessPointCreateInputSchema: z.ZodType<Prisma.AccessPointCreateInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable()
}).strict();

export const AccessPointUncheckedCreateInputSchema: z.ZodType<Prisma.AccessPointUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable()
}).strict();

export const AccessPointUpdateInputSchema: z.ZodType<Prisma.AccessPointUpdateInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AccessPointUncheckedUpdateInputSchema: z.ZodType<Prisma.AccessPointUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AccessPointCreateManyInputSchema: z.ZodType<Prisma.AccessPointCreateManyInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable()
}).strict();

export const AccessPointUpdateManyMutationInputSchema: z.ZodType<Prisma.AccessPointUpdateManyMutationInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AccessPointUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AccessPointUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AuditLogCreateInputSchema: z.ZodType<Prisma.AuditLogCreateInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  action: z.string(),
  status: z.string(),
  entity: z.string(),
  entityid: z.string(),
  actor: z.string(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const AuditLogUncheckedCreateInputSchema: z.ZodType<Prisma.AuditLogUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  action: z.string(),
  status: z.string(),
  entity: z.string(),
  entityid: z.string(),
  actor: z.string(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const AuditLogUpdateInputSchema: z.ZodType<Prisma.AuditLogUpdateInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entity: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entityid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  actor: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const AuditLogUncheckedUpdateInputSchema: z.ZodType<Prisma.AuditLogUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entity: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entityid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  actor: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const AuditLogCreateManyInputSchema: z.ZodType<Prisma.AuditLogCreateManyInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  action: z.string(),
  status: z.string(),
  entity: z.string(),
  entityid: z.string(),
  actor: z.string(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const AuditLogUpdateManyMutationInputSchema: z.ZodType<Prisma.AuditLogUpdateManyMutationInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entity: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entityid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  actor: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const AuditLogUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AuditLogUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entity: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entityid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  actor: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const BoardCreateInputSchema: z.ZodType<Prisma.BoardCreateInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.string().optional().nullable(),
  layout: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  groupOwnerId: z.string().optional().nullable(),
  groupViewerId: z.string().optional().nullable(),
  parent: z.lazy(() => BoardCreateNestedOneWithoutForksInputSchema).optional(),
  forks: z.lazy(() => BoardCreateNestedManyWithoutParentInputSchema).optional(),
  managedBy: z.lazy(() => UserProfileCreateNestedManyWithoutBoardInputSchema).optional()
}).strict();

export const BoardUncheckedCreateInputSchema: z.ZodType<Prisma.BoardUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.string().optional().nullable(),
  layout: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  parentId: z.number().int().optional().nullable(),
  groupOwnerId: z.string().optional().nullable(),
  groupViewerId: z.string().optional().nullable(),
  forks: z.lazy(() => BoardUncheckedCreateNestedManyWithoutParentInputSchema).optional(),
  managedBy: z.lazy(() => UserProfileUncheckedCreateNestedManyWithoutBoardInputSchema).optional()
}).strict();

export const BoardUpdateInputSchema: z.ZodType<Prisma.BoardUpdateInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  layout: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  groupOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupViewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parent: z.lazy(() => BoardUpdateOneWithoutForksNestedInputSchema).optional(),
  forks: z.lazy(() => BoardUpdateManyWithoutParentNestedInputSchema).optional(),
  managedBy: z.lazy(() => UserProfileUpdateManyWithoutBoardNestedInputSchema).optional()
}).strict();

export const BoardUncheckedUpdateInputSchema: z.ZodType<Prisma.BoardUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  layout: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  parentId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupViewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  forks: z.lazy(() => BoardUncheckedUpdateManyWithoutParentNestedInputSchema).optional(),
  managedBy: z.lazy(() => UserProfileUncheckedUpdateManyWithoutBoardNestedInputSchema).optional()
}).strict();

export const BoardCreateManyInputSchema: z.ZodType<Prisma.BoardCreateManyInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.string().optional().nullable(),
  layout: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  parentId: z.number().int().optional().nullable(),
  groupOwnerId: z.string().optional().nullable(),
  groupViewerId: z.string().optional().nullable()
}).strict();

export const BoardUpdateManyMutationInputSchema: z.ZodType<Prisma.BoardUpdateManyMutationInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  layout: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  groupOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupViewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const BoardUncheckedUpdateManyInputSchema: z.ZodType<Prisma.BoardUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  layout: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  parentId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupViewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CategoryCreateInputSchema: z.ZodType<Prisma.CategoryCreateInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable(),
  color: z.string().optional().nullable(),
  isGroupTool: z.boolean().optional().nullable(),
  tool: z.lazy(() => ToolCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();

export const CategoryUncheckedCreateInputSchema: z.ZodType<Prisma.CategoryUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable(),
  color: z.string().optional().nullable(),
  isGroupTool: z.boolean().optional().nullable(),
  tool: z.lazy(() => ToolUncheckedCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();

export const CategoryUpdateInputSchema: z.ZodType<Prisma.CategoryUpdateInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isGroupTool: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tool: z.lazy(() => ToolUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();

export const CategoryUncheckedUpdateInputSchema: z.ZodType<Prisma.CategoryUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isGroupTool: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tool: z.lazy(() => ToolUncheckedUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();

export const CategoryCreateManyInputSchema: z.ZodType<Prisma.CategoryCreateManyInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable(),
  color: z.string().optional().nullable(),
  isGroupTool: z.boolean().optional().nullable()
}).strict();

export const CategoryUpdateManyMutationInputSchema: z.ZodType<Prisma.CategoryUpdateManyMutationInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isGroupTool: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CategoryUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CategoryUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isGroupTool: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CountryCreateInputSchema: z.ZodType<Prisma.CountryCreateInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable(),
  homePageUrl: z.string().optional().nullable(),
  region: z.lazy(() => RegionCreateNestedOneWithoutCountryInputSchema),
  Channel: z.lazy(() => ChannelCreateNestedOneWithoutCountriesInputSchema).optional(),
  tools: z.lazy(() => ToolCreateNestedManyWithoutCountriesInputSchema).optional()
}).strict();

export const CountryUncheckedCreateInputSchema: z.ZodType<Prisma.CountryUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  region_id: z.number().int(),
  sortorder: z.string().optional().nullable(),
  channelId: z.number().int().optional().nullable(),
  homePageUrl: z.string().optional().nullable(),
  tools: z.lazy(() => ToolUncheckedCreateNestedManyWithoutCountriesInputSchema).optional()
}).strict();

export const CountryUpdateInputSchema: z.ZodType<Prisma.CountryUpdateInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  homePageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  region: z.lazy(() => RegionUpdateOneRequiredWithoutCountryNestedInputSchema).optional(),
  Channel: z.lazy(() => ChannelUpdateOneWithoutCountriesNestedInputSchema).optional(),
  tools: z.lazy(() => ToolUpdateManyWithoutCountriesNestedInputSchema).optional()
}).strict();

export const CountryUncheckedUpdateInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  region_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  channelId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  homePageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tools: z.lazy(() => ToolUncheckedUpdateManyWithoutCountriesNestedInputSchema).optional()
}).strict();

export const CountryCreateManyInputSchema: z.ZodType<Prisma.CountryCreateManyInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  region_id: z.number().int(),
  sortorder: z.string().optional().nullable(),
  channelId: z.number().int().optional().nullable(),
  homePageUrl: z.string().optional().nullable()
}).strict();

export const CountryUpdateManyMutationInputSchema: z.ZodType<Prisma.CountryUpdateManyMutationInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  homePageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CountryUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  region_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  channelId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  homePageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LanguageCreateInputSchema: z.ZodType<Prisma.LanguageCreateInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  code: z.string(),
  sortorder: z.string().optional().nullable(),
  ToolTexts: z.lazy(() => ToolTextsCreateNestedManyWithoutLanguageInputSchema).optional()
}).strict();

export const LanguageUncheckedCreateInputSchema: z.ZodType<Prisma.LanguageUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  code: z.string(),
  sortorder: z.string().optional().nullable(),
  ToolTexts: z.lazy(() => ToolTextsUncheckedCreateNestedManyWithoutLanguageInputSchema).optional()
}).strict();

export const LanguageUpdateInputSchema: z.ZodType<Prisma.LanguageUpdateInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ToolTexts: z.lazy(() => ToolTextsUpdateManyWithoutLanguageNestedInputSchema).optional()
}).strict();

export const LanguageUncheckedUpdateInputSchema: z.ZodType<Prisma.LanguageUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ToolTexts: z.lazy(() => ToolTextsUncheckedUpdateManyWithoutLanguageNestedInputSchema).optional()
}).strict();

export const LanguageCreateManyInputSchema: z.ZodType<Prisma.LanguageCreateManyInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  code: z.string(),
  sortorder: z.string().optional().nullable()
}).strict();

export const LanguageUpdateManyMutationInputSchema: z.ZodType<Prisma.LanguageUpdateManyMutationInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LanguageUncheckedUpdateManyInputSchema: z.ZodType<Prisma.LanguageUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PurposeCreateInputSchema: z.ZodType<Prisma.PurposeCreateInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable(),
  tools: z.lazy(() => ToolCreateNestedManyWithoutPurposesInputSchema).optional()
}).strict();

export const PurposeUncheckedCreateInputSchema: z.ZodType<Prisma.PurposeUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable(),
  tools: z.lazy(() => ToolUncheckedCreateNestedManyWithoutPurposesInputSchema).optional()
}).strict();

export const PurposeUpdateInputSchema: z.ZodType<Prisma.PurposeUpdateInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tools: z.lazy(() => ToolUpdateManyWithoutPurposesNestedInputSchema).optional()
}).strict();

export const PurposeUncheckedUpdateInputSchema: z.ZodType<Prisma.PurposeUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tools: z.lazy(() => ToolUncheckedUpdateManyWithoutPurposesNestedInputSchema).optional()
}).strict();

export const PurposeCreateManyInputSchema: z.ZodType<Prisma.PurposeCreateManyInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable()
}).strict();

export const PurposeUpdateManyMutationInputSchema: z.ZodType<Prisma.PurposeUpdateManyMutationInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PurposeUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PurposeUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RegionCreateInputSchema: z.ZodType<Prisma.RegionCreateInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortOrder: z.string().optional().nullable(),
  Country: z.lazy(() => CountryCreateNestedManyWithoutRegionInputSchema).optional(),
  Channel: z.lazy(() => ChannelCreateNestedManyWithoutRegionInputSchema).optional()
}).strict();

export const RegionUncheckedCreateInputSchema: z.ZodType<Prisma.RegionUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortOrder: z.string().optional().nullable(),
  Country: z.lazy(() => CountryUncheckedCreateNestedManyWithoutRegionInputSchema).optional(),
  Channel: z.lazy(() => ChannelUncheckedCreateNestedManyWithoutRegionInputSchema).optional()
}).strict();

export const RegionUpdateInputSchema: z.ZodType<Prisma.RegionUpdateInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortOrder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Country: z.lazy(() => CountryUpdateManyWithoutRegionNestedInputSchema).optional(),
  Channel: z.lazy(() => ChannelUpdateManyWithoutRegionNestedInputSchema).optional()
}).strict();

export const RegionUncheckedUpdateInputSchema: z.ZodType<Prisma.RegionUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortOrder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Country: z.lazy(() => CountryUncheckedUpdateManyWithoutRegionNestedInputSchema).optional(),
  Channel: z.lazy(() => ChannelUncheckedUpdateManyWithoutRegionNestedInputSchema).optional()
}).strict();

export const RegionCreateManyInputSchema: z.ZodType<Prisma.RegionCreateManyInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortOrder: z.string().optional().nullable()
}).strict();

export const RegionUpdateManyMutationInputSchema: z.ZodType<Prisma.RegionUpdateManyMutationInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortOrder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RegionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RegionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortOrder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SettingCreateInputSchema: z.ZodType<Prisma.SettingCreateInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const SettingUncheckedCreateInputSchema: z.ZodType<Prisma.SettingUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const SettingUpdateInputSchema: z.ZodType<Prisma.SettingUpdateInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const SettingUncheckedUpdateInputSchema: z.ZodType<Prisma.SettingUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const SettingCreateManyInputSchema: z.ZodType<Prisma.SettingCreateManyInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const SettingUpdateManyMutationInputSchema: z.ZodType<Prisma.SettingUpdateManyMutationInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const SettingUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SettingUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const ToolCreateInputSchema: z.ZodType<Prisma.ToolCreateInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  koksmat_masterdataref: z.string().optional().nullable(),
  koksmat_masterdata_id: z.string().optional().nullable(),
  koksmat_masterdata_etag: z.string().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.string(),
  status: z.string().optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.string().optional().nullable(),
  uploaded_icon: z.string().optional().nullable(),
  groupOwnerId: z.string().optional().nullable(),
  groupViewerId: z.string().optional().nullable(),
  category: z.lazy(() => CategoryCreateNestedOneWithoutToolInputSchema),
  purposes: z.lazy(() => PurposeCreateNestedManyWithoutToolsInputSchema).optional(),
  userProfiles: z.lazy(() => UserProfileCreateNestedManyWithoutToolsInputSchema).optional(),
  countries: z.lazy(() => CountryCreateNestedManyWithoutToolsInputSchema).optional(),
  ToolTexts: z.lazy(() => ToolTextsCreateNestedManyWithoutToolInputSchema).optional(),
  parent: z.lazy(() => ToolCreateNestedOneWithoutForksInputSchema).optional(),
  forks: z.lazy(() => ToolCreateNestedManyWithoutParentInputSchema).optional(),
  Blob: z.lazy(() => BlobCreateNestedManyWithoutSource_toolInputSchema).optional()
}).strict();

export const ToolUncheckedCreateInputSchema: z.ZodType<Prisma.ToolUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  koksmat_masterdataref: z.string().optional().nullable(),
  koksmat_masterdata_id: z.string().optional().nullable(),
  koksmat_masterdata_etag: z.string().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.string(),
  status: z.string().optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.string().optional().nullable(),
  uploaded_icon: z.string().optional().nullable(),
  categoryId: z.number().int(),
  parentId: z.number().int().optional().nullable(),
  groupOwnerId: z.string().optional().nullable(),
  groupViewerId: z.string().optional().nullable(),
  purposes: z.lazy(() => PurposeUncheckedCreateNestedManyWithoutToolsInputSchema).optional(),
  userProfiles: z.lazy(() => UserProfileUncheckedCreateNestedManyWithoutToolsInputSchema).optional(),
  countries: z.lazy(() => CountryUncheckedCreateNestedManyWithoutToolsInputSchema).optional(),
  ToolTexts: z.lazy(() => ToolTextsUncheckedCreateNestedManyWithoutToolInputSchema).optional(),
  forks: z.lazy(() => ToolUncheckedCreateNestedManyWithoutParentInputSchema).optional(),
  Blob: z.lazy(() => BlobUncheckedCreateNestedManyWithoutSource_toolInputSchema).optional()
}).strict();

export const ToolUpdateInputSchema: z.ZodType<Prisma.ToolUpdateInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uploaded_icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupViewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.lazy(() => CategoryUpdateOneRequiredWithoutToolNestedInputSchema).optional(),
  purposes: z.lazy(() => PurposeUpdateManyWithoutToolsNestedInputSchema).optional(),
  userProfiles: z.lazy(() => UserProfileUpdateManyWithoutToolsNestedInputSchema).optional(),
  countries: z.lazy(() => CountryUpdateManyWithoutToolsNestedInputSchema).optional(),
  ToolTexts: z.lazy(() => ToolTextsUpdateManyWithoutToolNestedInputSchema).optional(),
  parent: z.lazy(() => ToolUpdateOneWithoutForksNestedInputSchema).optional(),
  forks: z.lazy(() => ToolUpdateManyWithoutParentNestedInputSchema).optional(),
  Blob: z.lazy(() => BlobUpdateManyWithoutSource_toolNestedInputSchema).optional()
}).strict();

export const ToolUncheckedUpdateInputSchema: z.ZodType<Prisma.ToolUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uploaded_icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parentId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupViewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  purposes: z.lazy(() => PurposeUncheckedUpdateManyWithoutToolsNestedInputSchema).optional(),
  userProfiles: z.lazy(() => UserProfileUncheckedUpdateManyWithoutToolsNestedInputSchema).optional(),
  countries: z.lazy(() => CountryUncheckedUpdateManyWithoutToolsNestedInputSchema).optional(),
  ToolTexts: z.lazy(() => ToolTextsUncheckedUpdateManyWithoutToolNestedInputSchema).optional(),
  forks: z.lazy(() => ToolUncheckedUpdateManyWithoutParentNestedInputSchema).optional(),
  Blob: z.lazy(() => BlobUncheckedUpdateManyWithoutSource_toolNestedInputSchema).optional()
}).strict();

export const ToolCreateManyInputSchema: z.ZodType<Prisma.ToolCreateManyInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  koksmat_masterdataref: z.string().optional().nullable(),
  koksmat_masterdata_id: z.string().optional().nullable(),
  koksmat_masterdata_etag: z.string().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.string(),
  status: z.string().optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.string().optional().nullable(),
  uploaded_icon: z.string().optional().nullable(),
  categoryId: z.number().int(),
  parentId: z.number().int().optional().nullable(),
  groupOwnerId: z.string().optional().nullable(),
  groupViewerId: z.string().optional().nullable()
}).strict();

export const ToolUpdateManyMutationInputSchema: z.ZodType<Prisma.ToolUpdateManyMutationInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uploaded_icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupViewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ToolUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ToolUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uploaded_icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parentId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupViewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ToolTextsCreateInputSchema: z.ZodType<Prisma.ToolTextsCreateInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  tool: z.lazy(() => ToolCreateNestedOneWithoutToolTextsInputSchema),
  language: z.lazy(() => LanguageCreateNestedOneWithoutToolTextsInputSchema)
}).strict();

export const ToolTextsUncheckedCreateInputSchema: z.ZodType<Prisma.ToolTextsUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  toolId: z.number().int(),
  languageId: z.number().int()
}).strict();

export const ToolTextsUpdateInputSchema: z.ZodType<Prisma.ToolTextsUpdateInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tool: z.lazy(() => ToolUpdateOneRequiredWithoutToolTextsNestedInputSchema).optional(),
  language: z.lazy(() => LanguageUpdateOneRequiredWithoutToolTextsNestedInputSchema).optional()
}).strict();

export const ToolTextsUncheckedUpdateInputSchema: z.ZodType<Prisma.ToolTextsUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toolId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  languageId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ToolTextsCreateManyInputSchema: z.ZodType<Prisma.ToolTextsCreateManyInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  toolId: z.number().int(),
  languageId: z.number().int()
}).strict();

export const ToolTextsUpdateManyMutationInputSchema: z.ZodType<Prisma.ToolTextsUpdateManyMutationInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ToolTextsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ToolTextsUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toolId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  languageId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ToolGroupCreateInputSchema: z.ZodType<Prisma.ToolGroupCreateInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.string().optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  visibility: z.lazy(() => StatusSchema).optional(),
  owners: z.lazy(() => UserProfileCreateNestedManyWithoutToolGroupInputSchema).optional(),
  userGroups: z.lazy(() => UserGroupCreateNestedManyWithoutToolGroupInputSchema).optional()
}).strict();

export const ToolGroupUncheckedCreateInputSchema: z.ZodType<Prisma.ToolGroupUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.string().optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  visibility: z.lazy(() => StatusSchema).optional(),
  owners: z.lazy(() => UserProfileUncheckedCreateNestedManyWithoutToolGroupInputSchema).optional(),
  userGroups: z.lazy(() => UserGroupUncheckedCreateNestedManyWithoutToolGroupInputSchema).optional()
}).strict();

export const ToolGroupUpdateInputSchema: z.ZodType<Prisma.ToolGroupUpdateInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  visibility: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
  owners: z.lazy(() => UserProfileUpdateManyWithoutToolGroupNestedInputSchema).optional(),
  userGroups: z.lazy(() => UserGroupUpdateManyWithoutToolGroupNestedInputSchema).optional()
}).strict();

export const ToolGroupUncheckedUpdateInputSchema: z.ZodType<Prisma.ToolGroupUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  visibility: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
  owners: z.lazy(() => UserProfileUncheckedUpdateManyWithoutToolGroupNestedInputSchema).optional(),
  userGroups: z.lazy(() => UserGroupUncheckedUpdateManyWithoutToolGroupNestedInputSchema).optional()
}).strict();

export const ToolGroupCreateManyInputSchema: z.ZodType<Prisma.ToolGroupCreateManyInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.string().optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  visibility: z.lazy(() => StatusSchema).optional()
}).strict();

export const ToolGroupUpdateManyMutationInputSchema: z.ZodType<Prisma.ToolGroupUpdateManyMutationInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  visibility: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ToolGroupUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ToolGroupUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  visibility: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserGroupCreateInputSchema: z.ZodType<Prisma.UserGroupCreateInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable(),
  ToolGroup: z.lazy(() => ToolGroupCreateNestedManyWithoutUserGroupsInputSchema).optional()
}).strict();

export const UserGroupUncheckedCreateInputSchema: z.ZodType<Prisma.UserGroupUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable(),
  ToolGroup: z.lazy(() => ToolGroupUncheckedCreateNestedManyWithoutUserGroupsInputSchema).optional()
}).strict();

export const UserGroupUpdateInputSchema: z.ZodType<Prisma.UserGroupUpdateInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ToolGroup: z.lazy(() => ToolGroupUpdateManyWithoutUserGroupsNestedInputSchema).optional()
}).strict();

export const UserGroupUncheckedUpdateInputSchema: z.ZodType<Prisma.UserGroupUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ToolGroup: z.lazy(() => ToolGroupUncheckedUpdateManyWithoutUserGroupsNestedInputSchema).optional()
}).strict();

export const UserGroupCreateManyInputSchema: z.ZodType<Prisma.UserGroupCreateManyInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable()
}).strict();

export const UserGroupUpdateManyMutationInputSchema: z.ZodType<Prisma.UserGroupUpdateManyMutationInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserGroupUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserGroupUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserProfileCreateInputSchema: z.ZodType<Prisma.UserProfileCreateInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  koksmat_masterdataref: z.string().optional().nullable(),
  koksmat_masterdata_id: z.string().optional().nullable(),
  koksmat_masterdata_etag: z.string().optional().nullable(),
  name: z.string(),
  displayName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  email: z.string(),
  status: z.string().optional().nullable(),
  company: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  companykey: z.string().optional().nullable(),
  isExternal: z.boolean().optional(),
  CurrentEmail: z.string().optional().nullable(),
  OldEmail: z.string().optional().nullable(),
  OnPremisesId: z.string().optional().nullable(),
  lastLogin: z.coerce.date().optional().nullable(),
  language: z.string().optional().nullable(),
  homePage: z.string().optional().nullable(),
  tools: z.lazy(() => ToolCreateNestedManyWithoutUserProfilesInputSchema).optional(),
  Session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  ToolGroup: z.lazy(() => ToolGroupCreateNestedManyWithoutOwnersInputSchema).optional(),
  roles: z.lazy(() => UserRoleCreateNestedManyWithoutUsersInputSchema).optional(),
  Board: z.lazy(() => BoardCreateNestedOneWithoutManagedByInputSchema).optional()
}).strict();

export const UserProfileUncheckedCreateInputSchema: z.ZodType<Prisma.UserProfileUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  koksmat_masterdataref: z.string().optional().nullable(),
  koksmat_masterdata_id: z.string().optional().nullable(),
  koksmat_masterdata_etag: z.string().optional().nullable(),
  name: z.string(),
  displayName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  email: z.string(),
  status: z.string().optional().nullable(),
  company: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  companykey: z.string().optional().nullable(),
  isExternal: z.boolean().optional(),
  CurrentEmail: z.string().optional().nullable(),
  OldEmail: z.string().optional().nullable(),
  OnPremisesId: z.string().optional().nullable(),
  boardId: z.number().int().optional().nullable(),
  lastLogin: z.coerce.date().optional().nullable(),
  language: z.string().optional().nullable(),
  homePage: z.string().optional().nullable(),
  tools: z.lazy(() => ToolUncheckedCreateNestedManyWithoutUserProfilesInputSchema).optional(),
  Session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ToolGroup: z.lazy(() => ToolGroupUncheckedCreateNestedManyWithoutOwnersInputSchema).optional(),
  roles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UserProfileUpdateInputSchema: z.ZodType<Prisma.UserProfileUpdateInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  displayName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  company: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companykey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isExternal: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  CurrentEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OldEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OnPremisesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLogin: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  homePage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tools: z.lazy(() => ToolUpdateManyWithoutUserProfilesNestedInputSchema).optional(),
  Session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  ToolGroup: z.lazy(() => ToolGroupUpdateManyWithoutOwnersNestedInputSchema).optional(),
  roles: z.lazy(() => UserRoleUpdateManyWithoutUsersNestedInputSchema).optional(),
  Board: z.lazy(() => BoardUpdateOneWithoutManagedByNestedInputSchema).optional()
}).strict();

export const UserProfileUncheckedUpdateInputSchema: z.ZodType<Prisma.UserProfileUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  displayName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  company: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companykey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isExternal: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  CurrentEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OldEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OnPremisesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boardId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLogin: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  homePage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tools: z.lazy(() => ToolUncheckedUpdateManyWithoutUserProfilesNestedInputSchema).optional(),
  Session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ToolGroup: z.lazy(() => ToolGroupUncheckedUpdateManyWithoutOwnersNestedInputSchema).optional(),
  roles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const UserProfileCreateManyInputSchema: z.ZodType<Prisma.UserProfileCreateManyInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  koksmat_masterdataref: z.string().optional().nullable(),
  koksmat_masterdata_id: z.string().optional().nullable(),
  koksmat_masterdata_etag: z.string().optional().nullable(),
  name: z.string(),
  displayName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  email: z.string(),
  status: z.string().optional().nullable(),
  company: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  companykey: z.string().optional().nullable(),
  isExternal: z.boolean().optional(),
  CurrentEmail: z.string().optional().nullable(),
  OldEmail: z.string().optional().nullable(),
  OnPremisesId: z.string().optional().nullable(),
  boardId: z.number().int().optional().nullable(),
  lastLogin: z.coerce.date().optional().nullable(),
  language: z.string().optional().nullable(),
  homePage: z.string().optional().nullable()
}).strict();

export const UserProfileUpdateManyMutationInputSchema: z.ZodType<Prisma.UserProfileUpdateManyMutationInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  displayName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  company: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companykey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isExternal: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  CurrentEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OldEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OnPremisesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLogin: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  homePage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserProfileUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserProfileUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  displayName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  company: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companykey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isExternal: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  CurrentEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OldEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OnPremisesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boardId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLogin: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  homePage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserRoleCreateInputSchema: z.ZodType<Prisma.UserRoleCreateInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable(),
  users: z.lazy(() => UserProfileCreateNestedManyWithoutRolesInputSchema).optional()
}).strict();

export const UserRoleUncheckedCreateInputSchema: z.ZodType<Prisma.UserRoleUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable(),
  users: z.lazy(() => UserProfileUncheckedCreateNestedManyWithoutRolesInputSchema).optional()
}).strict();

export const UserRoleUpdateInputSchema: z.ZodType<Prisma.UserRoleUpdateInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserProfileUpdateManyWithoutRolesNestedInputSchema).optional()
}).strict();

export const UserRoleUncheckedUpdateInputSchema: z.ZodType<Prisma.UserRoleUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserProfileUncheckedUpdateManyWithoutRolesNestedInputSchema).optional()
}).strict();

export const UserRoleCreateManyInputSchema: z.ZodType<Prisma.UserRoleCreateManyInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable()
}).strict();

export const UserRoleUpdateManyMutationInputSchema: z.ZodType<Prisma.UserRoleUpdateManyMutationInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserRoleUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserRoleUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SessionCreateInputSchema: z.ZodType<Prisma.SessionCreateInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  user: z.lazy(() => UserProfileCreateNestedOneWithoutSessionInputSchema)
}).strict();

export const SessionUncheckedCreateInputSchema: z.ZodType<Prisma.SessionUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  userProfileId: z.number().int()
}).strict();

export const SessionUpdateInputSchema: z.ZodType<Prisma.SessionUpdateInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  user: z.lazy(() => UserProfileUpdateOneRequiredWithoutSessionNestedInputSchema).optional()
}).strict();

export const SessionUncheckedUpdateInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  userProfileId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionCreateManyInputSchema: z.ZodType<Prisma.SessionCreateManyInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  userProfileId: z.number().int()
}).strict();

export const SessionUpdateManyMutationInputSchema: z.ZodType<Prisma.SessionUpdateManyMutationInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const SessionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  userProfileId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const BusinessUnitCreateInputSchema: z.ZodType<Prisma.BusinessUnitCreateInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  code: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable(),
  isGroupFunction: z.boolean(),
  homePageUrl: z.string().optional().nullable(),
  newsPageUrl: z.string().optional().nullable()
}).strict();

export const BusinessUnitUncheckedCreateInputSchema: z.ZodType<Prisma.BusinessUnitUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  code: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable(),
  isGroupFunction: z.boolean(),
  homePageUrl: z.string().optional().nullable(),
  newsPageUrl: z.string().optional().nullable()
}).strict();

export const BusinessUnitUpdateInputSchema: z.ZodType<Prisma.BusinessUnitUpdateInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isGroupFunction: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  homePageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  newsPageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const BusinessUnitUncheckedUpdateInputSchema: z.ZodType<Prisma.BusinessUnitUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isGroupFunction: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  homePageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  newsPageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const BusinessUnitCreateManyInputSchema: z.ZodType<Prisma.BusinessUnitCreateManyInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  code: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable(),
  isGroupFunction: z.boolean(),
  homePageUrl: z.string().optional().nullable(),
  newsPageUrl: z.string().optional().nullable()
}).strict();

export const BusinessUnitUpdateManyMutationInputSchema: z.ZodType<Prisma.BusinessUnitUpdateManyMutationInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isGroupFunction: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  homePageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  newsPageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const BusinessUnitUncheckedUpdateManyInputSchema: z.ZodType<Prisma.BusinessUnitUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isGroupFunction: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  homePageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  newsPageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const GuestDomainCreateInputSchema: z.ZodType<Prisma.GuestDomainCreateInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable()
}).strict();

export const GuestDomainUncheckedCreateInputSchema: z.ZodType<Prisma.GuestDomainUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable()
}).strict();

export const GuestDomainUpdateInputSchema: z.ZodType<Prisma.GuestDomainUpdateInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const GuestDomainUncheckedUpdateInputSchema: z.ZodType<Prisma.GuestDomainUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const GuestDomainCreateManyInputSchema: z.ZodType<Prisma.GuestDomainCreateManyInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable()
}).strict();

export const GuestDomainUpdateManyMutationInputSchema: z.ZodType<Prisma.GuestDomainUpdateManyMutationInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const GuestDomainUncheckedUpdateManyInputSchema: z.ZodType<Prisma.GuestDomainUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ChannelCategoryCreateInputSchema: z.ZodType<Prisma.ChannelCategoryCreateInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable(),
  Channel: z.lazy(() => ChannelCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();

export const ChannelCategoryUncheckedCreateInputSchema: z.ZodType<Prisma.ChannelCategoryUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable(),
  Channel: z.lazy(() => ChannelUncheckedCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();

export const ChannelCategoryUpdateInputSchema: z.ZodType<Prisma.ChannelCategoryUpdateInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Channel: z.lazy(() => ChannelUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();

export const ChannelCategoryUncheckedUpdateInputSchema: z.ZodType<Prisma.ChannelCategoryUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Channel: z.lazy(() => ChannelUncheckedUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();

export const ChannelCategoryCreateManyInputSchema: z.ZodType<Prisma.ChannelCategoryCreateManyInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable()
}).strict();

export const ChannelCategoryUpdateManyMutationInputSchema: z.ZodType<Prisma.ChannelCategoryUpdateManyMutationInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ChannelCategoryUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ChannelCategoryUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ChannelCreateInputSchema: z.ZodType<Prisma.ChannelCreateInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  mandatory: z.boolean().optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable(),
  externalGroup: z.string().optional().nullable(),
  region: z.lazy(() => RegionCreateNestedOneWithoutChannelInputSchema).optional(),
  countries: z.lazy(() => CountryCreateNestedManyWithoutChannelInputSchema).optional(),
  category: z.lazy(() => ChannelCategoryCreateNestedOneWithoutChannelInputSchema).optional()
}).strict();

export const ChannelUncheckedCreateInputSchema: z.ZodType<Prisma.ChannelUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  mandatory: z.boolean().optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable(),
  regionId: z.number().int().optional().nullable(),
  externalGroup: z.string().optional().nullable(),
  categoryId: z.number().int().optional().nullable(),
  countries: z.lazy(() => CountryUncheckedCreateNestedManyWithoutChannelInputSchema).optional()
}).strict();

export const ChannelUpdateInputSchema: z.ZodType<Prisma.ChannelUpdateInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mandatory: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  externalGroup: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  region: z.lazy(() => RegionUpdateOneWithoutChannelNestedInputSchema).optional(),
  countries: z.lazy(() => CountryUpdateManyWithoutChannelNestedInputSchema).optional(),
  category: z.lazy(() => ChannelCategoryUpdateOneWithoutChannelNestedInputSchema).optional()
}).strict();

export const ChannelUncheckedUpdateInputSchema: z.ZodType<Prisma.ChannelUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mandatory: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  regionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  externalGroup: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  countries: z.lazy(() => CountryUncheckedUpdateManyWithoutChannelNestedInputSchema).optional()
}).strict();

export const ChannelCreateManyInputSchema: z.ZodType<Prisma.ChannelCreateManyInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  mandatory: z.boolean().optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable(),
  regionId: z.number().int().optional().nullable(),
  externalGroup: z.string().optional().nullable(),
  categoryId: z.number().int().optional().nullable()
}).strict();

export const ChannelUpdateManyMutationInputSchema: z.ZodType<Prisma.ChannelUpdateManyMutationInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mandatory: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  externalGroup: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ChannelUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ChannelUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mandatory: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  regionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  externalGroup: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const BlobCreateInputSchema: z.ZodType<Prisma.BlobCreateInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  hash: z.string(),
  content_type: z.string(),
  base64: z.string(),
  data: z.instanceof(Buffer),
  source_tool: z.lazy(() => ToolCreateNestedOneWithoutBlobInputSchema).optional(),
  BlobResized: z.lazy(() => BlobResizedCreateNestedManyWithoutBlobInputSchema).optional()
}).strict();

export const BlobUncheckedCreateInputSchema: z.ZodType<Prisma.BlobUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  hash: z.string(),
  content_type: z.string(),
  base64: z.string(),
  data: z.instanceof(Buffer),
  source_tool_id: z.number().int().optional().nullable(),
  BlobResized: z.lazy(() => BlobResizedUncheckedCreateNestedManyWithoutBlobInputSchema).optional()
}).strict();

export const BlobUpdateInputSchema: z.ZodType<Prisma.BlobUpdateInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  hash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content_type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  base64: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.instanceof(Buffer),z.lazy(() => BytesFieldUpdateOperationsInputSchema) ]).optional(),
  source_tool: z.lazy(() => ToolUpdateOneWithoutBlobNestedInputSchema).optional(),
  BlobResized: z.lazy(() => BlobResizedUpdateManyWithoutBlobNestedInputSchema).optional()
}).strict();

export const BlobUncheckedUpdateInputSchema: z.ZodType<Prisma.BlobUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  hash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content_type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  base64: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.instanceof(Buffer),z.lazy(() => BytesFieldUpdateOperationsInputSchema) ]).optional(),
  source_tool_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BlobResized: z.lazy(() => BlobResizedUncheckedUpdateManyWithoutBlobNestedInputSchema).optional()
}).strict();

export const BlobCreateManyInputSchema: z.ZodType<Prisma.BlobCreateManyInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  hash: z.string(),
  content_type: z.string(),
  base64: z.string(),
  data: z.instanceof(Buffer),
  source_tool_id: z.number().int().optional().nullable()
}).strict();

export const BlobUpdateManyMutationInputSchema: z.ZodType<Prisma.BlobUpdateManyMutationInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  hash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content_type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  base64: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.instanceof(Buffer),z.lazy(() => BytesFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const BlobUncheckedUpdateManyInputSchema: z.ZodType<Prisma.BlobUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  hash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content_type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  base64: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.instanceof(Buffer),z.lazy(() => BytesFieldUpdateOperationsInputSchema) ]).optional(),
  source_tool_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const BlobResizedCreateInputSchema: z.ZodType<Prisma.BlobResizedCreateInput> = z.object({
  width: z.number().int(),
  data: z.instanceof(Buffer),
  blob: z.lazy(() => BlobCreateNestedOneWithoutBlobResizedInputSchema)
}).strict();

export const BlobResizedUncheckedCreateInputSchema: z.ZodType<Prisma.BlobResizedUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  width: z.number().int(),
  data: z.instanceof(Buffer),
  blobId: z.number().int()
}).strict();

export const BlobResizedUpdateInputSchema: z.ZodType<Prisma.BlobResizedUpdateInput> = z.object({
  width: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.instanceof(Buffer),z.lazy(() => BytesFieldUpdateOperationsInputSchema) ]).optional(),
  blob: z.lazy(() => BlobUpdateOneRequiredWithoutBlobResizedNestedInputSchema).optional()
}).strict();

export const BlobResizedUncheckedUpdateInputSchema: z.ZodType<Prisma.BlobResizedUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  width: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.instanceof(Buffer),z.lazy(() => BytesFieldUpdateOperationsInputSchema) ]).optional(),
  blobId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const BlobResizedCreateManyInputSchema: z.ZodType<Prisma.BlobResizedCreateManyInput> = z.object({
  id: z.number().int().optional(),
  width: z.number().int(),
  data: z.instanceof(Buffer),
  blobId: z.number().int()
}).strict();

export const BlobResizedUpdateManyMutationInputSchema: z.ZodType<Prisma.BlobResizedUpdateManyMutationInput> = z.object({
  width: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.instanceof(Buffer),z.lazy(() => BytesFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const BlobResizedUncheckedUpdateManyInputSchema: z.ZodType<Prisma.BlobResizedUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  width: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.instanceof(Buffer),z.lazy(() => BytesFieldUpdateOperationsInputSchema) ]).optional(),
  blobId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const IntFilterSchema: z.ZodType<Prisma.IntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const DateTimeFilterSchema: z.ZodType<Prisma.DateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const StringNullableFilterSchema: z.ZodType<Prisma.StringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const DateTimeNullableFilterSchema: z.ZodType<Prisma.DateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const StringFilterSchema: z.ZodType<Prisma.StringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const JsonNullableFilterSchema: z.ZodType<Prisma.JsonNullableFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional()
}).strict();

export const BoolFilterSchema: z.ZodType<Prisma.BoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const SortOrderInputSchema: z.ZodType<Prisma.SortOrderInput> = z.object({
  sort: z.lazy(() => SortOrderSchema),
  nulls: z.lazy(() => NullsOrderSchema).optional()
}).strict();

export const SynchronizationLogCountOrderByAggregateInputSchema: z.ZodType<Prisma.SynchronizationLogCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  details: z.lazy(() => SortOrderSchema).optional(),
  hasError: z.lazy(() => SortOrderSchema).optional(),
  error: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SynchronizationLogAvgOrderByAggregateInputSchema: z.ZodType<Prisma.SynchronizationLogAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SynchronizationLogMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SynchronizationLogMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  hasError: z.lazy(() => SortOrderSchema).optional(),
  error: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SynchronizationLogMinOrderByAggregateInputSchema: z.ZodType<Prisma.SynchronizationLogMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  hasError: z.lazy(() => SortOrderSchema).optional(),
  error: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SynchronizationLogSumOrderByAggregateInputSchema: z.ZodType<Prisma.SynchronizationLogSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntWithAggregatesFilterSchema: z.ZodType<Prisma.IntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const DateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const StringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.StringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const DateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const StringWithAggregatesFilterSchema: z.ZodType<Prisma.StringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const JsonNullableWithAggregatesFilterSchema: z.ZodType<Prisma.JsonNullableWithAggregatesFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedJsonNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedJsonNullableFilterSchema).optional()
}).strict();

export const BoolWithAggregatesFilterSchema: z.ZodType<Prisma.BoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const AccessPointCountOrderByAggregateInputSchema: z.ZodType<Prisma.AccessPointCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  translations: z.lazy(() => SortOrderSchema).optional(),
  sortorder: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccessPointAvgOrderByAggregateInputSchema: z.ZodType<Prisma.AccessPointAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccessPointMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AccessPointMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  sortorder: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccessPointMinOrderByAggregateInputSchema: z.ZodType<Prisma.AccessPointMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  sortorder: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccessPointSumOrderByAggregateInputSchema: z.ZodType<Prisma.AccessPointSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AuditLogCountOrderByAggregateInputSchema: z.ZodType<Prisma.AuditLogCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  translations: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  entity: z.lazy(() => SortOrderSchema).optional(),
  entityid: z.lazy(() => SortOrderSchema).optional(),
  actor: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AuditLogAvgOrderByAggregateInputSchema: z.ZodType<Prisma.AuditLogAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AuditLogMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AuditLogMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  entity: z.lazy(() => SortOrderSchema).optional(),
  entityid: z.lazy(() => SortOrderSchema).optional(),
  actor: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AuditLogMinOrderByAggregateInputSchema: z.ZodType<Prisma.AuditLogMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  entity: z.lazy(() => SortOrderSchema).optional(),
  entityid: z.lazy(() => SortOrderSchema).optional(),
  actor: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AuditLogSumOrderByAggregateInputSchema: z.ZodType<Prisma.AuditLogSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntNullableFilterSchema: z.ZodType<Prisma.IntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const BoardNullableScalarRelationFilterSchema: z.ZodType<Prisma.BoardNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => BoardWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => BoardWhereInputSchema).optional().nullable()
}).strict();

export const BoardListRelationFilterSchema: z.ZodType<Prisma.BoardListRelationFilter> = z.object({
  every: z.lazy(() => BoardWhereInputSchema).optional(),
  some: z.lazy(() => BoardWhereInputSchema).optional(),
  none: z.lazy(() => BoardWhereInputSchema).optional()
}).strict();

export const UserProfileListRelationFilterSchema: z.ZodType<Prisma.UserProfileListRelationFilter> = z.object({
  every: z.lazy(() => UserProfileWhereInputSchema).optional(),
  some: z.lazy(() => UserProfileWhereInputSchema).optional(),
  none: z.lazy(() => UserProfileWhereInputSchema).optional()
}).strict();

export const BoardOrderByRelationAggregateInputSchema: z.ZodType<Prisma.BoardOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserProfileOrderByRelationAggregateInputSchema: z.ZodType<Prisma.UserProfileOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BoardCountOrderByAggregateInputSchema: z.ZodType<Prisma.BoardCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  translations: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  layout: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  parentId: z.lazy(() => SortOrderSchema).optional(),
  groupOwnerId: z.lazy(() => SortOrderSchema).optional(),
  groupViewerId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BoardAvgOrderByAggregateInputSchema: z.ZodType<Prisma.BoardAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  parentId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BoardMaxOrderByAggregateInputSchema: z.ZodType<Prisma.BoardMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  parentId: z.lazy(() => SortOrderSchema).optional(),
  groupOwnerId: z.lazy(() => SortOrderSchema).optional(),
  groupViewerId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BoardMinOrderByAggregateInputSchema: z.ZodType<Prisma.BoardMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  parentId: z.lazy(() => SortOrderSchema).optional(),
  groupOwnerId: z.lazy(() => SortOrderSchema).optional(),
  groupViewerId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BoardSumOrderByAggregateInputSchema: z.ZodType<Prisma.BoardSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  parentId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.IntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const BoolNullableFilterSchema: z.ZodType<Prisma.BoolNullableFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const ToolListRelationFilterSchema: z.ZodType<Prisma.ToolListRelationFilter> = z.object({
  every: z.lazy(() => ToolWhereInputSchema).optional(),
  some: z.lazy(() => ToolWhereInputSchema).optional(),
  none: z.lazy(() => ToolWhereInputSchema).optional()
}).strict();

export const ToolOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ToolOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CategoryCountOrderByAggregateInputSchema: z.ZodType<Prisma.CategoryCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  translations: z.lazy(() => SortOrderSchema).optional(),
  sortorder: z.lazy(() => SortOrderSchema).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  isGroupTool: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CategoryAvgOrderByAggregateInputSchema: z.ZodType<Prisma.CategoryAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CategoryMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CategoryMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  sortorder: z.lazy(() => SortOrderSchema).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  isGroupTool: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CategoryMinOrderByAggregateInputSchema: z.ZodType<Prisma.CategoryMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  sortorder: z.lazy(() => SortOrderSchema).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  isGroupTool: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CategorySumOrderByAggregateInputSchema: z.ZodType<Prisma.CategorySumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BoolNullableWithAggregatesFilterSchema: z.ZodType<Prisma.BoolNullableWithAggregatesFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolNullableFilterSchema).optional()
}).strict();

export const RegionScalarRelationFilterSchema: z.ZodType<Prisma.RegionScalarRelationFilter> = z.object({
  is: z.lazy(() => RegionWhereInputSchema).optional(),
  isNot: z.lazy(() => RegionWhereInputSchema).optional()
}).strict();

export const ChannelNullableScalarRelationFilterSchema: z.ZodType<Prisma.ChannelNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => ChannelWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => ChannelWhereInputSchema).optional().nullable()
}).strict();

export const CountryCountOrderByAggregateInputSchema: z.ZodType<Prisma.CountryCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  translations: z.lazy(() => SortOrderSchema).optional(),
  region_id: z.lazy(() => SortOrderSchema).optional(),
  sortorder: z.lazy(() => SortOrderSchema).optional(),
  channelId: z.lazy(() => SortOrderSchema).optional(),
  homePageUrl: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CountryAvgOrderByAggregateInputSchema: z.ZodType<Prisma.CountryAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  region_id: z.lazy(() => SortOrderSchema).optional(),
  channelId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CountryMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CountryMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  region_id: z.lazy(() => SortOrderSchema).optional(),
  sortorder: z.lazy(() => SortOrderSchema).optional(),
  channelId: z.lazy(() => SortOrderSchema).optional(),
  homePageUrl: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CountryMinOrderByAggregateInputSchema: z.ZodType<Prisma.CountryMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  region_id: z.lazy(() => SortOrderSchema).optional(),
  sortorder: z.lazy(() => SortOrderSchema).optional(),
  channelId: z.lazy(() => SortOrderSchema).optional(),
  homePageUrl: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CountrySumOrderByAggregateInputSchema: z.ZodType<Prisma.CountrySumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  region_id: z.lazy(() => SortOrderSchema).optional(),
  channelId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ToolTextsListRelationFilterSchema: z.ZodType<Prisma.ToolTextsListRelationFilter> = z.object({
  every: z.lazy(() => ToolTextsWhereInputSchema).optional(),
  some: z.lazy(() => ToolTextsWhereInputSchema).optional(),
  none: z.lazy(() => ToolTextsWhereInputSchema).optional()
}).strict();

export const ToolTextsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ToolTextsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LanguageCountOrderByAggregateInputSchema: z.ZodType<Prisma.LanguageCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  translations: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  sortorder: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LanguageAvgOrderByAggregateInputSchema: z.ZodType<Prisma.LanguageAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LanguageMaxOrderByAggregateInputSchema: z.ZodType<Prisma.LanguageMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  sortorder: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LanguageMinOrderByAggregateInputSchema: z.ZodType<Prisma.LanguageMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  sortorder: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LanguageSumOrderByAggregateInputSchema: z.ZodType<Prisma.LanguageSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PurposeCountOrderByAggregateInputSchema: z.ZodType<Prisma.PurposeCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  translations: z.lazy(() => SortOrderSchema).optional(),
  sortorder: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PurposeAvgOrderByAggregateInputSchema: z.ZodType<Prisma.PurposeAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PurposeMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PurposeMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  sortorder: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PurposeMinOrderByAggregateInputSchema: z.ZodType<Prisma.PurposeMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  sortorder: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PurposeSumOrderByAggregateInputSchema: z.ZodType<Prisma.PurposeSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CountryListRelationFilterSchema: z.ZodType<Prisma.CountryListRelationFilter> = z.object({
  every: z.lazy(() => CountryWhereInputSchema).optional(),
  some: z.lazy(() => CountryWhereInputSchema).optional(),
  none: z.lazy(() => CountryWhereInputSchema).optional()
}).strict();

export const ChannelListRelationFilterSchema: z.ZodType<Prisma.ChannelListRelationFilter> = z.object({
  every: z.lazy(() => ChannelWhereInputSchema).optional(),
  some: z.lazy(() => ChannelWhereInputSchema).optional(),
  none: z.lazy(() => ChannelWhereInputSchema).optional()
}).strict();

export const CountryOrderByRelationAggregateInputSchema: z.ZodType<Prisma.CountryOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ChannelOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ChannelOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RegionCountOrderByAggregateInputSchema: z.ZodType<Prisma.RegionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  translations: z.lazy(() => SortOrderSchema).optional(),
  sortOrder: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RegionAvgOrderByAggregateInputSchema: z.ZodType<Prisma.RegionAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RegionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RegionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  sortOrder: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RegionMinOrderByAggregateInputSchema: z.ZodType<Prisma.RegionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  sortOrder: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RegionSumOrderByAggregateInputSchema: z.ZodType<Prisma.RegionSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SettingCountOrderByAggregateInputSchema: z.ZodType<Prisma.SettingCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  translations: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SettingAvgOrderByAggregateInputSchema: z.ZodType<Prisma.SettingAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SettingMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SettingMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SettingMinOrderByAggregateInputSchema: z.ZodType<Prisma.SettingMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SettingSumOrderByAggregateInputSchema: z.ZodType<Prisma.SettingSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CategoryScalarRelationFilterSchema: z.ZodType<Prisma.CategoryScalarRelationFilter> = z.object({
  is: z.lazy(() => CategoryWhereInputSchema).optional(),
  isNot: z.lazy(() => CategoryWhereInputSchema).optional()
}).strict();

export const PurposeListRelationFilterSchema: z.ZodType<Prisma.PurposeListRelationFilter> = z.object({
  every: z.lazy(() => PurposeWhereInputSchema).optional(),
  some: z.lazy(() => PurposeWhereInputSchema).optional(),
  none: z.lazy(() => PurposeWhereInputSchema).optional()
}).strict();

export const ToolNullableScalarRelationFilterSchema: z.ZodType<Prisma.ToolNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => ToolWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => ToolWhereInputSchema).optional().nullable()
}).strict();

export const BlobListRelationFilterSchema: z.ZodType<Prisma.BlobListRelationFilter> = z.object({
  every: z.lazy(() => BlobWhereInputSchema).optional(),
  some: z.lazy(() => BlobWhereInputSchema).optional(),
  none: z.lazy(() => BlobWhereInputSchema).optional()
}).strict();

export const PurposeOrderByRelationAggregateInputSchema: z.ZodType<Prisma.PurposeOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BlobOrderByRelationAggregateInputSchema: z.ZodType<Prisma.BlobOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ToolCountOrderByAggregateInputSchema: z.ZodType<Prisma.ToolCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  koksmat_masterdataref: z.lazy(() => SortOrderSchema).optional(),
  koksmat_masterdata_id: z.lazy(() => SortOrderSchema).optional(),
  koksmat_masterdata_etag: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  translations: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  documents: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  icon: z.lazy(() => SortOrderSchema).optional(),
  uploaded_icon: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  parentId: z.lazy(() => SortOrderSchema).optional(),
  groupOwnerId: z.lazy(() => SortOrderSchema).optional(),
  groupViewerId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ToolAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ToolAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  parentId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ToolMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ToolMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  koksmat_masterdataref: z.lazy(() => SortOrderSchema).optional(),
  koksmat_masterdata_id: z.lazy(() => SortOrderSchema).optional(),
  koksmat_masterdata_etag: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  icon: z.lazy(() => SortOrderSchema).optional(),
  uploaded_icon: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  parentId: z.lazy(() => SortOrderSchema).optional(),
  groupOwnerId: z.lazy(() => SortOrderSchema).optional(),
  groupViewerId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ToolMinOrderByAggregateInputSchema: z.ZodType<Prisma.ToolMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  koksmat_masterdataref: z.lazy(() => SortOrderSchema).optional(),
  koksmat_masterdata_id: z.lazy(() => SortOrderSchema).optional(),
  koksmat_masterdata_etag: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  icon: z.lazy(() => SortOrderSchema).optional(),
  uploaded_icon: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  parentId: z.lazy(() => SortOrderSchema).optional(),
  groupOwnerId: z.lazy(() => SortOrderSchema).optional(),
  groupViewerId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ToolSumOrderByAggregateInputSchema: z.ZodType<Prisma.ToolSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  parentId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ToolScalarRelationFilterSchema: z.ZodType<Prisma.ToolScalarRelationFilter> = z.object({
  is: z.lazy(() => ToolWhereInputSchema).optional(),
  isNot: z.lazy(() => ToolWhereInputSchema).optional()
}).strict();

export const LanguageScalarRelationFilterSchema: z.ZodType<Prisma.LanguageScalarRelationFilter> = z.object({
  is: z.lazy(() => LanguageWhereInputSchema).optional(),
  isNot: z.lazy(() => LanguageWhereInputSchema).optional()
}).strict();

export const ToolTextsToolId_languageIdCompoundUniqueInputSchema: z.ZodType<Prisma.ToolTextsToolId_languageIdCompoundUniqueInput> = z.object({
  toolId: z.number(),
  languageId: z.number()
}).strict();

export const ToolTextsCountOrderByAggregateInputSchema: z.ZodType<Prisma.ToolTextsCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  toolId: z.lazy(() => SortOrderSchema).optional(),
  languageId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ToolTextsAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ToolTextsAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  toolId: z.lazy(() => SortOrderSchema).optional(),
  languageId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ToolTextsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ToolTextsMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  toolId: z.lazy(() => SortOrderSchema).optional(),
  languageId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ToolTextsMinOrderByAggregateInputSchema: z.ZodType<Prisma.ToolTextsMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  toolId: z.lazy(() => SortOrderSchema).optional(),
  languageId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ToolTextsSumOrderByAggregateInputSchema: z.ZodType<Prisma.ToolTextsSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  toolId: z.lazy(() => SortOrderSchema).optional(),
  languageId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumStatusFilterSchema: z.ZodType<Prisma.EnumStatusFilter> = z.object({
  equals: z.lazy(() => StatusSchema).optional(),
  in: z.lazy(() => StatusSchema).array().optional(),
  notIn: z.lazy(() => StatusSchema).array().optional(),
  not: z.union([ z.lazy(() => StatusSchema),z.lazy(() => NestedEnumStatusFilterSchema) ]).optional(),
}).strict();

export const UserGroupListRelationFilterSchema: z.ZodType<Prisma.UserGroupListRelationFilter> = z.object({
  every: z.lazy(() => UserGroupWhereInputSchema).optional(),
  some: z.lazy(() => UserGroupWhereInputSchema).optional(),
  none: z.lazy(() => UserGroupWhereInputSchema).optional()
}).strict();

export const UserGroupOrderByRelationAggregateInputSchema: z.ZodType<Prisma.UserGroupOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ToolGroupCountOrderByAggregateInputSchema: z.ZodType<Prisma.ToolGroupCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  translations: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  visibility: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ToolGroupAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ToolGroupAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ToolGroupMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ToolGroupMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  visibility: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ToolGroupMinOrderByAggregateInputSchema: z.ZodType<Prisma.ToolGroupMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  visibility: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ToolGroupSumOrderByAggregateInputSchema: z.ZodType<Prisma.ToolGroupSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => StatusSchema).optional(),
  in: z.lazy(() => StatusSchema).array().optional(),
  notIn: z.lazy(() => StatusSchema).array().optional(),
  not: z.union([ z.lazy(() => StatusSchema),z.lazy(() => NestedEnumStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumStatusFilterSchema).optional()
}).strict();

export const ToolGroupListRelationFilterSchema: z.ZodType<Prisma.ToolGroupListRelationFilter> = z.object({
  every: z.lazy(() => ToolGroupWhereInputSchema).optional(),
  some: z.lazy(() => ToolGroupWhereInputSchema).optional(),
  none: z.lazy(() => ToolGroupWhereInputSchema).optional()
}).strict();

export const ToolGroupOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ToolGroupOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserGroupCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserGroupCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  translations: z.lazy(() => SortOrderSchema).optional(),
  sortorder: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserGroupAvgOrderByAggregateInputSchema: z.ZodType<Prisma.UserGroupAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserGroupMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserGroupMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  sortorder: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserGroupMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserGroupMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  sortorder: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserGroupSumOrderByAggregateInputSchema: z.ZodType<Prisma.UserGroupSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionListRelationFilterSchema: z.ZodType<Prisma.SessionListRelationFilter> = z.object({
  every: z.lazy(() => SessionWhereInputSchema).optional(),
  some: z.lazy(() => SessionWhereInputSchema).optional(),
  none: z.lazy(() => SessionWhereInputSchema).optional()
}).strict();

export const UserRoleListRelationFilterSchema: z.ZodType<Prisma.UserRoleListRelationFilter> = z.object({
  every: z.lazy(() => UserRoleWhereInputSchema).optional(),
  some: z.lazy(() => UserRoleWhereInputSchema).optional(),
  none: z.lazy(() => UserRoleWhereInputSchema).optional()
}).strict();

export const SessionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SessionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserRoleOrderByRelationAggregateInputSchema: z.ZodType<Prisma.UserRoleOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserProfileCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserProfileCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  koksmat_masterdataref: z.lazy(() => SortOrderSchema).optional(),
  koksmat_masterdata_id: z.lazy(() => SortOrderSchema).optional(),
  koksmat_masterdata_etag: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  displayName: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  translations: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  company: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => SortOrderSchema).optional(),
  companykey: z.lazy(() => SortOrderSchema).optional(),
  isExternal: z.lazy(() => SortOrderSchema).optional(),
  CurrentEmail: z.lazy(() => SortOrderSchema).optional(),
  OldEmail: z.lazy(() => SortOrderSchema).optional(),
  OnPremisesId: z.lazy(() => SortOrderSchema).optional(),
  boardId: z.lazy(() => SortOrderSchema).optional(),
  lastLogin: z.lazy(() => SortOrderSchema).optional(),
  language: z.lazy(() => SortOrderSchema).optional(),
  homePage: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserProfileAvgOrderByAggregateInputSchema: z.ZodType<Prisma.UserProfileAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  boardId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserProfileMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserProfileMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  koksmat_masterdataref: z.lazy(() => SortOrderSchema).optional(),
  koksmat_masterdata_id: z.lazy(() => SortOrderSchema).optional(),
  koksmat_masterdata_etag: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  displayName: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  company: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => SortOrderSchema).optional(),
  companykey: z.lazy(() => SortOrderSchema).optional(),
  isExternal: z.lazy(() => SortOrderSchema).optional(),
  CurrentEmail: z.lazy(() => SortOrderSchema).optional(),
  OldEmail: z.lazy(() => SortOrderSchema).optional(),
  OnPremisesId: z.lazy(() => SortOrderSchema).optional(),
  boardId: z.lazy(() => SortOrderSchema).optional(),
  lastLogin: z.lazy(() => SortOrderSchema).optional(),
  language: z.lazy(() => SortOrderSchema).optional(),
  homePage: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserProfileMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserProfileMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  koksmat_masterdataref: z.lazy(() => SortOrderSchema).optional(),
  koksmat_masterdata_id: z.lazy(() => SortOrderSchema).optional(),
  koksmat_masterdata_etag: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  displayName: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  company: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => SortOrderSchema).optional(),
  companykey: z.lazy(() => SortOrderSchema).optional(),
  isExternal: z.lazy(() => SortOrderSchema).optional(),
  CurrentEmail: z.lazy(() => SortOrderSchema).optional(),
  OldEmail: z.lazy(() => SortOrderSchema).optional(),
  OnPremisesId: z.lazy(() => SortOrderSchema).optional(),
  boardId: z.lazy(() => SortOrderSchema).optional(),
  lastLogin: z.lazy(() => SortOrderSchema).optional(),
  language: z.lazy(() => SortOrderSchema).optional(),
  homePage: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserProfileSumOrderByAggregateInputSchema: z.ZodType<Prisma.UserProfileSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  boardId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserRoleCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserRoleCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  translations: z.lazy(() => SortOrderSchema).optional(),
  sortorder: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserRoleAvgOrderByAggregateInputSchema: z.ZodType<Prisma.UserRoleAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserRoleMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserRoleMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  sortorder: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserRoleMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserRoleMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  sortorder: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserRoleSumOrderByAggregateInputSchema: z.ZodType<Prisma.UserRoleSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserProfileScalarRelationFilterSchema: z.ZodType<Prisma.UserProfileScalarRelationFilter> = z.object({
  is: z.lazy(() => UserProfileWhereInputSchema).optional(),
  isNot: z.lazy(() => UserProfileWhereInputSchema).optional()
}).strict();

export const SessionCountOrderByAggregateInputSchema: z.ZodType<Prisma.SessionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  userProfileId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionAvgOrderByAggregateInputSchema: z.ZodType<Prisma.SessionAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userProfileId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SessionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  userProfileId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionMinOrderByAggregateInputSchema: z.ZodType<Prisma.SessionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  userProfileId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionSumOrderByAggregateInputSchema: z.ZodType<Prisma.SessionSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userProfileId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BusinessUnitCountOrderByAggregateInputSchema: z.ZodType<Prisma.BusinessUnitCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  translations: z.lazy(() => SortOrderSchema).optional(),
  sortorder: z.lazy(() => SortOrderSchema).optional(),
  isGroupFunction: z.lazy(() => SortOrderSchema).optional(),
  homePageUrl: z.lazy(() => SortOrderSchema).optional(),
  newsPageUrl: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BusinessUnitAvgOrderByAggregateInputSchema: z.ZodType<Prisma.BusinessUnitAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BusinessUnitMaxOrderByAggregateInputSchema: z.ZodType<Prisma.BusinessUnitMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  sortorder: z.lazy(() => SortOrderSchema).optional(),
  isGroupFunction: z.lazy(() => SortOrderSchema).optional(),
  homePageUrl: z.lazy(() => SortOrderSchema).optional(),
  newsPageUrl: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BusinessUnitMinOrderByAggregateInputSchema: z.ZodType<Prisma.BusinessUnitMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  sortorder: z.lazy(() => SortOrderSchema).optional(),
  isGroupFunction: z.lazy(() => SortOrderSchema).optional(),
  homePageUrl: z.lazy(() => SortOrderSchema).optional(),
  newsPageUrl: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BusinessUnitSumOrderByAggregateInputSchema: z.ZodType<Prisma.BusinessUnitSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const GuestDomainCountOrderByAggregateInputSchema: z.ZodType<Prisma.GuestDomainCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  translations: z.lazy(() => SortOrderSchema).optional(),
  sortorder: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const GuestDomainAvgOrderByAggregateInputSchema: z.ZodType<Prisma.GuestDomainAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const GuestDomainMaxOrderByAggregateInputSchema: z.ZodType<Prisma.GuestDomainMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  sortorder: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const GuestDomainMinOrderByAggregateInputSchema: z.ZodType<Prisma.GuestDomainMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  sortorder: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const GuestDomainSumOrderByAggregateInputSchema: z.ZodType<Prisma.GuestDomainSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ChannelCategoryCountOrderByAggregateInputSchema: z.ZodType<Prisma.ChannelCategoryCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  translations: z.lazy(() => SortOrderSchema).optional(),
  sortorder: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ChannelCategoryAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ChannelCategoryAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ChannelCategoryMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ChannelCategoryMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  sortorder: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ChannelCategoryMinOrderByAggregateInputSchema: z.ZodType<Prisma.ChannelCategoryMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  sortorder: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ChannelCategorySumOrderByAggregateInputSchema: z.ZodType<Prisma.ChannelCategorySumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RegionNullableScalarRelationFilterSchema: z.ZodType<Prisma.RegionNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => RegionWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => RegionWhereInputSchema).optional().nullable()
}).strict();

export const ChannelCategoryNullableScalarRelationFilterSchema: z.ZodType<Prisma.ChannelCategoryNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => ChannelCategoryWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => ChannelCategoryWhereInputSchema).optional().nullable()
}).strict();

export const ChannelCountOrderByAggregateInputSchema: z.ZodType<Prisma.ChannelCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  mandatory: z.lazy(() => SortOrderSchema).optional(),
  translations: z.lazy(() => SortOrderSchema).optional(),
  sortorder: z.lazy(() => SortOrderSchema).optional(),
  regionId: z.lazy(() => SortOrderSchema).optional(),
  externalGroup: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ChannelAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ChannelAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  regionId: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ChannelMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ChannelMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  mandatory: z.lazy(() => SortOrderSchema).optional(),
  sortorder: z.lazy(() => SortOrderSchema).optional(),
  regionId: z.lazy(() => SortOrderSchema).optional(),
  externalGroup: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ChannelMinOrderByAggregateInputSchema: z.ZodType<Prisma.ChannelMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  mandatory: z.lazy(() => SortOrderSchema).optional(),
  sortorder: z.lazy(() => SortOrderSchema).optional(),
  regionId: z.lazy(() => SortOrderSchema).optional(),
  externalGroup: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ChannelSumOrderByAggregateInputSchema: z.ZodType<Prisma.ChannelSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  regionId: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BytesFilterSchema: z.ZodType<Prisma.BytesFilter> = z.object({
  equals: z.instanceof(Buffer).optional(),
  in: z.instanceof(Buffer).array().optional(),
  notIn: z.instanceof(Buffer).array().optional(),
  not: z.union([ z.instanceof(Buffer),z.lazy(() => NestedBytesFilterSchema) ]).optional(),
}).strict();

export const BlobResizedListRelationFilterSchema: z.ZodType<Prisma.BlobResizedListRelationFilter> = z.object({
  every: z.lazy(() => BlobResizedWhereInputSchema).optional(),
  some: z.lazy(() => BlobResizedWhereInputSchema).optional(),
  none: z.lazy(() => BlobResizedWhereInputSchema).optional()
}).strict();

export const BlobResizedOrderByRelationAggregateInputSchema: z.ZodType<Prisma.BlobResizedOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BlobCountOrderByAggregateInputSchema: z.ZodType<Prisma.BlobCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  hash: z.lazy(() => SortOrderSchema).optional(),
  content_type: z.lazy(() => SortOrderSchema).optional(),
  base64: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  source_tool_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BlobAvgOrderByAggregateInputSchema: z.ZodType<Prisma.BlobAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  source_tool_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BlobMaxOrderByAggregateInputSchema: z.ZodType<Prisma.BlobMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  hash: z.lazy(() => SortOrderSchema).optional(),
  content_type: z.lazy(() => SortOrderSchema).optional(),
  base64: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  source_tool_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BlobMinOrderByAggregateInputSchema: z.ZodType<Prisma.BlobMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  hash: z.lazy(() => SortOrderSchema).optional(),
  content_type: z.lazy(() => SortOrderSchema).optional(),
  base64: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  source_tool_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BlobSumOrderByAggregateInputSchema: z.ZodType<Prisma.BlobSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  source_tool_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BytesWithAggregatesFilterSchema: z.ZodType<Prisma.BytesWithAggregatesFilter> = z.object({
  equals: z.instanceof(Buffer).optional(),
  in: z.instanceof(Buffer).array().optional(),
  notIn: z.instanceof(Buffer).array().optional(),
  not: z.union([ z.instanceof(Buffer),z.lazy(() => NestedBytesWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBytesFilterSchema).optional(),
  _max: z.lazy(() => NestedBytesFilterSchema).optional()
}).strict();

export const BlobScalarRelationFilterSchema: z.ZodType<Prisma.BlobScalarRelationFilter> = z.object({
  is: z.lazy(() => BlobWhereInputSchema).optional(),
  isNot: z.lazy(() => BlobWhereInputSchema).optional()
}).strict();

export const BlobResizedCountOrderByAggregateInputSchema: z.ZodType<Prisma.BlobResizedCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  width: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  blobId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BlobResizedAvgOrderByAggregateInputSchema: z.ZodType<Prisma.BlobResizedAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  width: z.lazy(() => SortOrderSchema).optional(),
  blobId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BlobResizedMaxOrderByAggregateInputSchema: z.ZodType<Prisma.BlobResizedMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  width: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  blobId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BlobResizedMinOrderByAggregateInputSchema: z.ZodType<Prisma.BlobResizedMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  width: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  blobId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BlobResizedSumOrderByAggregateInputSchema: z.ZodType<Prisma.BlobResizedSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  width: z.lazy(() => SortOrderSchema).optional(),
  blobId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.DateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional()
}).strict();

export const NullableStringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableStringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional().nullable()
}).strict();

export const NullableDateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableDateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional().nullable()
}).strict();

export const StringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.StringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional()
}).strict();

export const BoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.BoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional()
}).strict();

export const IntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.IntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const BoardCreateNestedOneWithoutForksInputSchema: z.ZodType<Prisma.BoardCreateNestedOneWithoutForksInput> = z.object({
  create: z.union([ z.lazy(() => BoardCreateWithoutForksInputSchema),z.lazy(() => BoardUncheckedCreateWithoutForksInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => BoardCreateOrConnectWithoutForksInputSchema).optional(),
  connect: z.lazy(() => BoardWhereUniqueInputSchema).optional()
}).strict();

export const BoardCreateNestedManyWithoutParentInputSchema: z.ZodType<Prisma.BoardCreateNestedManyWithoutParentInput> = z.object({
  create: z.union([ z.lazy(() => BoardCreateWithoutParentInputSchema),z.lazy(() => BoardCreateWithoutParentInputSchema).array(),z.lazy(() => BoardUncheckedCreateWithoutParentInputSchema),z.lazy(() => BoardUncheckedCreateWithoutParentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BoardCreateOrConnectWithoutParentInputSchema),z.lazy(() => BoardCreateOrConnectWithoutParentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BoardCreateManyParentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => BoardWhereUniqueInputSchema),z.lazy(() => BoardWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserProfileCreateNestedManyWithoutBoardInputSchema: z.ZodType<Prisma.UserProfileCreateNestedManyWithoutBoardInput> = z.object({
  create: z.union([ z.lazy(() => UserProfileCreateWithoutBoardInputSchema),z.lazy(() => UserProfileCreateWithoutBoardInputSchema).array(),z.lazy(() => UserProfileUncheckedCreateWithoutBoardInputSchema),z.lazy(() => UserProfileUncheckedCreateWithoutBoardInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserProfileCreateOrConnectWithoutBoardInputSchema),z.lazy(() => UserProfileCreateOrConnectWithoutBoardInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserProfileCreateManyBoardInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const BoardUncheckedCreateNestedManyWithoutParentInputSchema: z.ZodType<Prisma.BoardUncheckedCreateNestedManyWithoutParentInput> = z.object({
  create: z.union([ z.lazy(() => BoardCreateWithoutParentInputSchema),z.lazy(() => BoardCreateWithoutParentInputSchema).array(),z.lazy(() => BoardUncheckedCreateWithoutParentInputSchema),z.lazy(() => BoardUncheckedCreateWithoutParentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BoardCreateOrConnectWithoutParentInputSchema),z.lazy(() => BoardCreateOrConnectWithoutParentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BoardCreateManyParentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => BoardWhereUniqueInputSchema),z.lazy(() => BoardWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserProfileUncheckedCreateNestedManyWithoutBoardInputSchema: z.ZodType<Prisma.UserProfileUncheckedCreateNestedManyWithoutBoardInput> = z.object({
  create: z.union([ z.lazy(() => UserProfileCreateWithoutBoardInputSchema),z.lazy(() => UserProfileCreateWithoutBoardInputSchema).array(),z.lazy(() => UserProfileUncheckedCreateWithoutBoardInputSchema),z.lazy(() => UserProfileUncheckedCreateWithoutBoardInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserProfileCreateOrConnectWithoutBoardInputSchema),z.lazy(() => UserProfileCreateOrConnectWithoutBoardInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserProfileCreateManyBoardInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const BoardUpdateOneWithoutForksNestedInputSchema: z.ZodType<Prisma.BoardUpdateOneWithoutForksNestedInput> = z.object({
  create: z.union([ z.lazy(() => BoardCreateWithoutForksInputSchema),z.lazy(() => BoardUncheckedCreateWithoutForksInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => BoardCreateOrConnectWithoutForksInputSchema).optional(),
  upsert: z.lazy(() => BoardUpsertWithoutForksInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => BoardWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => BoardWhereInputSchema) ]).optional(),
  connect: z.lazy(() => BoardWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => BoardUpdateToOneWithWhereWithoutForksInputSchema),z.lazy(() => BoardUpdateWithoutForksInputSchema),z.lazy(() => BoardUncheckedUpdateWithoutForksInputSchema) ]).optional(),
}).strict();

export const BoardUpdateManyWithoutParentNestedInputSchema: z.ZodType<Prisma.BoardUpdateManyWithoutParentNestedInput> = z.object({
  create: z.union([ z.lazy(() => BoardCreateWithoutParentInputSchema),z.lazy(() => BoardCreateWithoutParentInputSchema).array(),z.lazy(() => BoardUncheckedCreateWithoutParentInputSchema),z.lazy(() => BoardUncheckedCreateWithoutParentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BoardCreateOrConnectWithoutParentInputSchema),z.lazy(() => BoardCreateOrConnectWithoutParentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => BoardUpsertWithWhereUniqueWithoutParentInputSchema),z.lazy(() => BoardUpsertWithWhereUniqueWithoutParentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BoardCreateManyParentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => BoardWhereUniqueInputSchema),z.lazy(() => BoardWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => BoardWhereUniqueInputSchema),z.lazy(() => BoardWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => BoardWhereUniqueInputSchema),z.lazy(() => BoardWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => BoardWhereUniqueInputSchema),z.lazy(() => BoardWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => BoardUpdateWithWhereUniqueWithoutParentInputSchema),z.lazy(() => BoardUpdateWithWhereUniqueWithoutParentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => BoardUpdateManyWithWhereWithoutParentInputSchema),z.lazy(() => BoardUpdateManyWithWhereWithoutParentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => BoardScalarWhereInputSchema),z.lazy(() => BoardScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserProfileUpdateManyWithoutBoardNestedInputSchema: z.ZodType<Prisma.UserProfileUpdateManyWithoutBoardNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserProfileCreateWithoutBoardInputSchema),z.lazy(() => UserProfileCreateWithoutBoardInputSchema).array(),z.lazy(() => UserProfileUncheckedCreateWithoutBoardInputSchema),z.lazy(() => UserProfileUncheckedCreateWithoutBoardInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserProfileCreateOrConnectWithoutBoardInputSchema),z.lazy(() => UserProfileCreateOrConnectWithoutBoardInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserProfileUpsertWithWhereUniqueWithoutBoardInputSchema),z.lazy(() => UserProfileUpsertWithWhereUniqueWithoutBoardInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserProfileCreateManyBoardInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserProfileUpdateWithWhereUniqueWithoutBoardInputSchema),z.lazy(() => UserProfileUpdateWithWhereUniqueWithoutBoardInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserProfileUpdateManyWithWhereWithoutBoardInputSchema),z.lazy(() => UserProfileUpdateManyWithWhereWithoutBoardInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserProfileScalarWhereInputSchema),z.lazy(() => UserProfileScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const NullableIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableIntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const BoardUncheckedUpdateManyWithoutParentNestedInputSchema: z.ZodType<Prisma.BoardUncheckedUpdateManyWithoutParentNestedInput> = z.object({
  create: z.union([ z.lazy(() => BoardCreateWithoutParentInputSchema),z.lazy(() => BoardCreateWithoutParentInputSchema).array(),z.lazy(() => BoardUncheckedCreateWithoutParentInputSchema),z.lazy(() => BoardUncheckedCreateWithoutParentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BoardCreateOrConnectWithoutParentInputSchema),z.lazy(() => BoardCreateOrConnectWithoutParentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => BoardUpsertWithWhereUniqueWithoutParentInputSchema),z.lazy(() => BoardUpsertWithWhereUniqueWithoutParentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BoardCreateManyParentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => BoardWhereUniqueInputSchema),z.lazy(() => BoardWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => BoardWhereUniqueInputSchema),z.lazy(() => BoardWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => BoardWhereUniqueInputSchema),z.lazy(() => BoardWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => BoardWhereUniqueInputSchema),z.lazy(() => BoardWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => BoardUpdateWithWhereUniqueWithoutParentInputSchema),z.lazy(() => BoardUpdateWithWhereUniqueWithoutParentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => BoardUpdateManyWithWhereWithoutParentInputSchema),z.lazy(() => BoardUpdateManyWithWhereWithoutParentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => BoardScalarWhereInputSchema),z.lazy(() => BoardScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserProfileUncheckedUpdateManyWithoutBoardNestedInputSchema: z.ZodType<Prisma.UserProfileUncheckedUpdateManyWithoutBoardNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserProfileCreateWithoutBoardInputSchema),z.lazy(() => UserProfileCreateWithoutBoardInputSchema).array(),z.lazy(() => UserProfileUncheckedCreateWithoutBoardInputSchema),z.lazy(() => UserProfileUncheckedCreateWithoutBoardInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserProfileCreateOrConnectWithoutBoardInputSchema),z.lazy(() => UserProfileCreateOrConnectWithoutBoardInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserProfileUpsertWithWhereUniqueWithoutBoardInputSchema),z.lazy(() => UserProfileUpsertWithWhereUniqueWithoutBoardInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserProfileCreateManyBoardInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserProfileUpdateWithWhereUniqueWithoutBoardInputSchema),z.lazy(() => UserProfileUpdateWithWhereUniqueWithoutBoardInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserProfileUpdateManyWithWhereWithoutBoardInputSchema),z.lazy(() => UserProfileUpdateManyWithWhereWithoutBoardInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserProfileScalarWhereInputSchema),z.lazy(() => UserProfileScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ToolCreateNestedManyWithoutCategoryInputSchema: z.ZodType<Prisma.ToolCreateNestedManyWithoutCategoryInput> = z.object({
  create: z.union([ z.lazy(() => ToolCreateWithoutCategoryInputSchema),z.lazy(() => ToolCreateWithoutCategoryInputSchema).array(),z.lazy(() => ToolUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => ToolUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ToolCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => ToolCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ToolCreateManyCategoryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ToolUncheckedCreateNestedManyWithoutCategoryInputSchema: z.ZodType<Prisma.ToolUncheckedCreateNestedManyWithoutCategoryInput> = z.object({
  create: z.union([ z.lazy(() => ToolCreateWithoutCategoryInputSchema),z.lazy(() => ToolCreateWithoutCategoryInputSchema).array(),z.lazy(() => ToolUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => ToolUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ToolCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => ToolCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ToolCreateManyCategoryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NullableBoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableBoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional().nullable()
}).strict();

export const ToolUpdateManyWithoutCategoryNestedInputSchema: z.ZodType<Prisma.ToolUpdateManyWithoutCategoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => ToolCreateWithoutCategoryInputSchema),z.lazy(() => ToolCreateWithoutCategoryInputSchema).array(),z.lazy(() => ToolUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => ToolUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ToolCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => ToolCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ToolUpsertWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => ToolUpsertWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ToolCreateManyCategoryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ToolUpdateWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => ToolUpdateWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ToolUpdateManyWithWhereWithoutCategoryInputSchema),z.lazy(() => ToolUpdateManyWithWhereWithoutCategoryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ToolScalarWhereInputSchema),z.lazy(() => ToolScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ToolUncheckedUpdateManyWithoutCategoryNestedInputSchema: z.ZodType<Prisma.ToolUncheckedUpdateManyWithoutCategoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => ToolCreateWithoutCategoryInputSchema),z.lazy(() => ToolCreateWithoutCategoryInputSchema).array(),z.lazy(() => ToolUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => ToolUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ToolCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => ToolCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ToolUpsertWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => ToolUpsertWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ToolCreateManyCategoryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ToolUpdateWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => ToolUpdateWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ToolUpdateManyWithWhereWithoutCategoryInputSchema),z.lazy(() => ToolUpdateManyWithWhereWithoutCategoryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ToolScalarWhereInputSchema),z.lazy(() => ToolScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RegionCreateNestedOneWithoutCountryInputSchema: z.ZodType<Prisma.RegionCreateNestedOneWithoutCountryInput> = z.object({
  create: z.union([ z.lazy(() => RegionCreateWithoutCountryInputSchema),z.lazy(() => RegionUncheckedCreateWithoutCountryInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RegionCreateOrConnectWithoutCountryInputSchema).optional(),
  connect: z.lazy(() => RegionWhereUniqueInputSchema).optional()
}).strict();

export const ChannelCreateNestedOneWithoutCountriesInputSchema: z.ZodType<Prisma.ChannelCreateNestedOneWithoutCountriesInput> = z.object({
  create: z.union([ z.lazy(() => ChannelCreateWithoutCountriesInputSchema),z.lazy(() => ChannelUncheckedCreateWithoutCountriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ChannelCreateOrConnectWithoutCountriesInputSchema).optional(),
  connect: z.lazy(() => ChannelWhereUniqueInputSchema).optional()
}).strict();

export const ToolCreateNestedManyWithoutCountriesInputSchema: z.ZodType<Prisma.ToolCreateNestedManyWithoutCountriesInput> = z.object({
  create: z.union([ z.lazy(() => ToolCreateWithoutCountriesInputSchema),z.lazy(() => ToolCreateWithoutCountriesInputSchema).array(),z.lazy(() => ToolUncheckedCreateWithoutCountriesInputSchema),z.lazy(() => ToolUncheckedCreateWithoutCountriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ToolCreateOrConnectWithoutCountriesInputSchema),z.lazy(() => ToolCreateOrConnectWithoutCountriesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ToolUncheckedCreateNestedManyWithoutCountriesInputSchema: z.ZodType<Prisma.ToolUncheckedCreateNestedManyWithoutCountriesInput> = z.object({
  create: z.union([ z.lazy(() => ToolCreateWithoutCountriesInputSchema),z.lazy(() => ToolCreateWithoutCountriesInputSchema).array(),z.lazy(() => ToolUncheckedCreateWithoutCountriesInputSchema),z.lazy(() => ToolUncheckedCreateWithoutCountriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ToolCreateOrConnectWithoutCountriesInputSchema),z.lazy(() => ToolCreateOrConnectWithoutCountriesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RegionUpdateOneRequiredWithoutCountryNestedInputSchema: z.ZodType<Prisma.RegionUpdateOneRequiredWithoutCountryNestedInput> = z.object({
  create: z.union([ z.lazy(() => RegionCreateWithoutCountryInputSchema),z.lazy(() => RegionUncheckedCreateWithoutCountryInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RegionCreateOrConnectWithoutCountryInputSchema).optional(),
  upsert: z.lazy(() => RegionUpsertWithoutCountryInputSchema).optional(),
  connect: z.lazy(() => RegionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RegionUpdateToOneWithWhereWithoutCountryInputSchema),z.lazy(() => RegionUpdateWithoutCountryInputSchema),z.lazy(() => RegionUncheckedUpdateWithoutCountryInputSchema) ]).optional(),
}).strict();

export const ChannelUpdateOneWithoutCountriesNestedInputSchema: z.ZodType<Prisma.ChannelUpdateOneWithoutCountriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ChannelCreateWithoutCountriesInputSchema),z.lazy(() => ChannelUncheckedCreateWithoutCountriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ChannelCreateOrConnectWithoutCountriesInputSchema).optional(),
  upsert: z.lazy(() => ChannelUpsertWithoutCountriesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => ChannelWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => ChannelWhereInputSchema) ]).optional(),
  connect: z.lazy(() => ChannelWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ChannelUpdateToOneWithWhereWithoutCountriesInputSchema),z.lazy(() => ChannelUpdateWithoutCountriesInputSchema),z.lazy(() => ChannelUncheckedUpdateWithoutCountriesInputSchema) ]).optional(),
}).strict();

export const ToolUpdateManyWithoutCountriesNestedInputSchema: z.ZodType<Prisma.ToolUpdateManyWithoutCountriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ToolCreateWithoutCountriesInputSchema),z.lazy(() => ToolCreateWithoutCountriesInputSchema).array(),z.lazy(() => ToolUncheckedCreateWithoutCountriesInputSchema),z.lazy(() => ToolUncheckedCreateWithoutCountriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ToolCreateOrConnectWithoutCountriesInputSchema),z.lazy(() => ToolCreateOrConnectWithoutCountriesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ToolUpsertWithWhereUniqueWithoutCountriesInputSchema),z.lazy(() => ToolUpsertWithWhereUniqueWithoutCountriesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ToolUpdateWithWhereUniqueWithoutCountriesInputSchema),z.lazy(() => ToolUpdateWithWhereUniqueWithoutCountriesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ToolUpdateManyWithWhereWithoutCountriesInputSchema),z.lazy(() => ToolUpdateManyWithWhereWithoutCountriesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ToolScalarWhereInputSchema),z.lazy(() => ToolScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ToolUncheckedUpdateManyWithoutCountriesNestedInputSchema: z.ZodType<Prisma.ToolUncheckedUpdateManyWithoutCountriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ToolCreateWithoutCountriesInputSchema),z.lazy(() => ToolCreateWithoutCountriesInputSchema).array(),z.lazy(() => ToolUncheckedCreateWithoutCountriesInputSchema),z.lazy(() => ToolUncheckedCreateWithoutCountriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ToolCreateOrConnectWithoutCountriesInputSchema),z.lazy(() => ToolCreateOrConnectWithoutCountriesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ToolUpsertWithWhereUniqueWithoutCountriesInputSchema),z.lazy(() => ToolUpsertWithWhereUniqueWithoutCountriesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ToolUpdateWithWhereUniqueWithoutCountriesInputSchema),z.lazy(() => ToolUpdateWithWhereUniqueWithoutCountriesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ToolUpdateManyWithWhereWithoutCountriesInputSchema),z.lazy(() => ToolUpdateManyWithWhereWithoutCountriesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ToolScalarWhereInputSchema),z.lazy(() => ToolScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ToolTextsCreateNestedManyWithoutLanguageInputSchema: z.ZodType<Prisma.ToolTextsCreateNestedManyWithoutLanguageInput> = z.object({
  create: z.union([ z.lazy(() => ToolTextsCreateWithoutLanguageInputSchema),z.lazy(() => ToolTextsCreateWithoutLanguageInputSchema).array(),z.lazy(() => ToolTextsUncheckedCreateWithoutLanguageInputSchema),z.lazy(() => ToolTextsUncheckedCreateWithoutLanguageInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ToolTextsCreateOrConnectWithoutLanguageInputSchema),z.lazy(() => ToolTextsCreateOrConnectWithoutLanguageInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ToolTextsCreateManyLanguageInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ToolTextsWhereUniqueInputSchema),z.lazy(() => ToolTextsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ToolTextsUncheckedCreateNestedManyWithoutLanguageInputSchema: z.ZodType<Prisma.ToolTextsUncheckedCreateNestedManyWithoutLanguageInput> = z.object({
  create: z.union([ z.lazy(() => ToolTextsCreateWithoutLanguageInputSchema),z.lazy(() => ToolTextsCreateWithoutLanguageInputSchema).array(),z.lazy(() => ToolTextsUncheckedCreateWithoutLanguageInputSchema),z.lazy(() => ToolTextsUncheckedCreateWithoutLanguageInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ToolTextsCreateOrConnectWithoutLanguageInputSchema),z.lazy(() => ToolTextsCreateOrConnectWithoutLanguageInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ToolTextsCreateManyLanguageInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ToolTextsWhereUniqueInputSchema),z.lazy(() => ToolTextsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ToolTextsUpdateManyWithoutLanguageNestedInputSchema: z.ZodType<Prisma.ToolTextsUpdateManyWithoutLanguageNestedInput> = z.object({
  create: z.union([ z.lazy(() => ToolTextsCreateWithoutLanguageInputSchema),z.lazy(() => ToolTextsCreateWithoutLanguageInputSchema).array(),z.lazy(() => ToolTextsUncheckedCreateWithoutLanguageInputSchema),z.lazy(() => ToolTextsUncheckedCreateWithoutLanguageInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ToolTextsCreateOrConnectWithoutLanguageInputSchema),z.lazy(() => ToolTextsCreateOrConnectWithoutLanguageInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ToolTextsUpsertWithWhereUniqueWithoutLanguageInputSchema),z.lazy(() => ToolTextsUpsertWithWhereUniqueWithoutLanguageInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ToolTextsCreateManyLanguageInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ToolTextsWhereUniqueInputSchema),z.lazy(() => ToolTextsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ToolTextsWhereUniqueInputSchema),z.lazy(() => ToolTextsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ToolTextsWhereUniqueInputSchema),z.lazy(() => ToolTextsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ToolTextsWhereUniqueInputSchema),z.lazy(() => ToolTextsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ToolTextsUpdateWithWhereUniqueWithoutLanguageInputSchema),z.lazy(() => ToolTextsUpdateWithWhereUniqueWithoutLanguageInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ToolTextsUpdateManyWithWhereWithoutLanguageInputSchema),z.lazy(() => ToolTextsUpdateManyWithWhereWithoutLanguageInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ToolTextsScalarWhereInputSchema),z.lazy(() => ToolTextsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ToolTextsUncheckedUpdateManyWithoutLanguageNestedInputSchema: z.ZodType<Prisma.ToolTextsUncheckedUpdateManyWithoutLanguageNestedInput> = z.object({
  create: z.union([ z.lazy(() => ToolTextsCreateWithoutLanguageInputSchema),z.lazy(() => ToolTextsCreateWithoutLanguageInputSchema).array(),z.lazy(() => ToolTextsUncheckedCreateWithoutLanguageInputSchema),z.lazy(() => ToolTextsUncheckedCreateWithoutLanguageInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ToolTextsCreateOrConnectWithoutLanguageInputSchema),z.lazy(() => ToolTextsCreateOrConnectWithoutLanguageInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ToolTextsUpsertWithWhereUniqueWithoutLanguageInputSchema),z.lazy(() => ToolTextsUpsertWithWhereUniqueWithoutLanguageInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ToolTextsCreateManyLanguageInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ToolTextsWhereUniqueInputSchema),z.lazy(() => ToolTextsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ToolTextsWhereUniqueInputSchema),z.lazy(() => ToolTextsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ToolTextsWhereUniqueInputSchema),z.lazy(() => ToolTextsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ToolTextsWhereUniqueInputSchema),z.lazy(() => ToolTextsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ToolTextsUpdateWithWhereUniqueWithoutLanguageInputSchema),z.lazy(() => ToolTextsUpdateWithWhereUniqueWithoutLanguageInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ToolTextsUpdateManyWithWhereWithoutLanguageInputSchema),z.lazy(() => ToolTextsUpdateManyWithWhereWithoutLanguageInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ToolTextsScalarWhereInputSchema),z.lazy(() => ToolTextsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ToolCreateNestedManyWithoutPurposesInputSchema: z.ZodType<Prisma.ToolCreateNestedManyWithoutPurposesInput> = z.object({
  create: z.union([ z.lazy(() => ToolCreateWithoutPurposesInputSchema),z.lazy(() => ToolCreateWithoutPurposesInputSchema).array(),z.lazy(() => ToolUncheckedCreateWithoutPurposesInputSchema),z.lazy(() => ToolUncheckedCreateWithoutPurposesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ToolCreateOrConnectWithoutPurposesInputSchema),z.lazy(() => ToolCreateOrConnectWithoutPurposesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ToolUncheckedCreateNestedManyWithoutPurposesInputSchema: z.ZodType<Prisma.ToolUncheckedCreateNestedManyWithoutPurposesInput> = z.object({
  create: z.union([ z.lazy(() => ToolCreateWithoutPurposesInputSchema),z.lazy(() => ToolCreateWithoutPurposesInputSchema).array(),z.lazy(() => ToolUncheckedCreateWithoutPurposesInputSchema),z.lazy(() => ToolUncheckedCreateWithoutPurposesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ToolCreateOrConnectWithoutPurposesInputSchema),z.lazy(() => ToolCreateOrConnectWithoutPurposesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ToolUpdateManyWithoutPurposesNestedInputSchema: z.ZodType<Prisma.ToolUpdateManyWithoutPurposesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ToolCreateWithoutPurposesInputSchema),z.lazy(() => ToolCreateWithoutPurposesInputSchema).array(),z.lazy(() => ToolUncheckedCreateWithoutPurposesInputSchema),z.lazy(() => ToolUncheckedCreateWithoutPurposesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ToolCreateOrConnectWithoutPurposesInputSchema),z.lazy(() => ToolCreateOrConnectWithoutPurposesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ToolUpsertWithWhereUniqueWithoutPurposesInputSchema),z.lazy(() => ToolUpsertWithWhereUniqueWithoutPurposesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ToolUpdateWithWhereUniqueWithoutPurposesInputSchema),z.lazy(() => ToolUpdateWithWhereUniqueWithoutPurposesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ToolUpdateManyWithWhereWithoutPurposesInputSchema),z.lazy(() => ToolUpdateManyWithWhereWithoutPurposesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ToolScalarWhereInputSchema),z.lazy(() => ToolScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ToolUncheckedUpdateManyWithoutPurposesNestedInputSchema: z.ZodType<Prisma.ToolUncheckedUpdateManyWithoutPurposesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ToolCreateWithoutPurposesInputSchema),z.lazy(() => ToolCreateWithoutPurposesInputSchema).array(),z.lazy(() => ToolUncheckedCreateWithoutPurposesInputSchema),z.lazy(() => ToolUncheckedCreateWithoutPurposesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ToolCreateOrConnectWithoutPurposesInputSchema),z.lazy(() => ToolCreateOrConnectWithoutPurposesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ToolUpsertWithWhereUniqueWithoutPurposesInputSchema),z.lazy(() => ToolUpsertWithWhereUniqueWithoutPurposesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ToolUpdateWithWhereUniqueWithoutPurposesInputSchema),z.lazy(() => ToolUpdateWithWhereUniqueWithoutPurposesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ToolUpdateManyWithWhereWithoutPurposesInputSchema),z.lazy(() => ToolUpdateManyWithWhereWithoutPurposesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ToolScalarWhereInputSchema),z.lazy(() => ToolScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CountryCreateNestedManyWithoutRegionInputSchema: z.ZodType<Prisma.CountryCreateNestedManyWithoutRegionInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutRegionInputSchema),z.lazy(() => CountryCreateWithoutRegionInputSchema).array(),z.lazy(() => CountryUncheckedCreateWithoutRegionInputSchema),z.lazy(() => CountryUncheckedCreateWithoutRegionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CountryCreateOrConnectWithoutRegionInputSchema),z.lazy(() => CountryCreateOrConnectWithoutRegionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CountryCreateManyRegionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ChannelCreateNestedManyWithoutRegionInputSchema: z.ZodType<Prisma.ChannelCreateNestedManyWithoutRegionInput> = z.object({
  create: z.union([ z.lazy(() => ChannelCreateWithoutRegionInputSchema),z.lazy(() => ChannelCreateWithoutRegionInputSchema).array(),z.lazy(() => ChannelUncheckedCreateWithoutRegionInputSchema),z.lazy(() => ChannelUncheckedCreateWithoutRegionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChannelCreateOrConnectWithoutRegionInputSchema),z.lazy(() => ChannelCreateOrConnectWithoutRegionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChannelCreateManyRegionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ChannelWhereUniqueInputSchema),z.lazy(() => ChannelWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CountryUncheckedCreateNestedManyWithoutRegionInputSchema: z.ZodType<Prisma.CountryUncheckedCreateNestedManyWithoutRegionInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutRegionInputSchema),z.lazy(() => CountryCreateWithoutRegionInputSchema).array(),z.lazy(() => CountryUncheckedCreateWithoutRegionInputSchema),z.lazy(() => CountryUncheckedCreateWithoutRegionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CountryCreateOrConnectWithoutRegionInputSchema),z.lazy(() => CountryCreateOrConnectWithoutRegionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CountryCreateManyRegionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ChannelUncheckedCreateNestedManyWithoutRegionInputSchema: z.ZodType<Prisma.ChannelUncheckedCreateNestedManyWithoutRegionInput> = z.object({
  create: z.union([ z.lazy(() => ChannelCreateWithoutRegionInputSchema),z.lazy(() => ChannelCreateWithoutRegionInputSchema).array(),z.lazy(() => ChannelUncheckedCreateWithoutRegionInputSchema),z.lazy(() => ChannelUncheckedCreateWithoutRegionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChannelCreateOrConnectWithoutRegionInputSchema),z.lazy(() => ChannelCreateOrConnectWithoutRegionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChannelCreateManyRegionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ChannelWhereUniqueInputSchema),z.lazy(() => ChannelWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CountryUpdateManyWithoutRegionNestedInputSchema: z.ZodType<Prisma.CountryUpdateManyWithoutRegionNestedInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutRegionInputSchema),z.lazy(() => CountryCreateWithoutRegionInputSchema).array(),z.lazy(() => CountryUncheckedCreateWithoutRegionInputSchema),z.lazy(() => CountryUncheckedCreateWithoutRegionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CountryCreateOrConnectWithoutRegionInputSchema),z.lazy(() => CountryCreateOrConnectWithoutRegionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CountryUpsertWithWhereUniqueWithoutRegionInputSchema),z.lazy(() => CountryUpsertWithWhereUniqueWithoutRegionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CountryCreateManyRegionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CountryUpdateWithWhereUniqueWithoutRegionInputSchema),z.lazy(() => CountryUpdateWithWhereUniqueWithoutRegionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CountryUpdateManyWithWhereWithoutRegionInputSchema),z.lazy(() => CountryUpdateManyWithWhereWithoutRegionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CountryScalarWhereInputSchema),z.lazy(() => CountryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ChannelUpdateManyWithoutRegionNestedInputSchema: z.ZodType<Prisma.ChannelUpdateManyWithoutRegionNestedInput> = z.object({
  create: z.union([ z.lazy(() => ChannelCreateWithoutRegionInputSchema),z.lazy(() => ChannelCreateWithoutRegionInputSchema).array(),z.lazy(() => ChannelUncheckedCreateWithoutRegionInputSchema),z.lazy(() => ChannelUncheckedCreateWithoutRegionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChannelCreateOrConnectWithoutRegionInputSchema),z.lazy(() => ChannelCreateOrConnectWithoutRegionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ChannelUpsertWithWhereUniqueWithoutRegionInputSchema),z.lazy(() => ChannelUpsertWithWhereUniqueWithoutRegionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChannelCreateManyRegionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ChannelWhereUniqueInputSchema),z.lazy(() => ChannelWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ChannelWhereUniqueInputSchema),z.lazy(() => ChannelWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ChannelWhereUniqueInputSchema),z.lazy(() => ChannelWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ChannelWhereUniqueInputSchema),z.lazy(() => ChannelWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ChannelUpdateWithWhereUniqueWithoutRegionInputSchema),z.lazy(() => ChannelUpdateWithWhereUniqueWithoutRegionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ChannelUpdateManyWithWhereWithoutRegionInputSchema),z.lazy(() => ChannelUpdateManyWithWhereWithoutRegionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ChannelScalarWhereInputSchema),z.lazy(() => ChannelScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CountryUncheckedUpdateManyWithoutRegionNestedInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateManyWithoutRegionNestedInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutRegionInputSchema),z.lazy(() => CountryCreateWithoutRegionInputSchema).array(),z.lazy(() => CountryUncheckedCreateWithoutRegionInputSchema),z.lazy(() => CountryUncheckedCreateWithoutRegionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CountryCreateOrConnectWithoutRegionInputSchema),z.lazy(() => CountryCreateOrConnectWithoutRegionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CountryUpsertWithWhereUniqueWithoutRegionInputSchema),z.lazy(() => CountryUpsertWithWhereUniqueWithoutRegionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CountryCreateManyRegionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CountryUpdateWithWhereUniqueWithoutRegionInputSchema),z.lazy(() => CountryUpdateWithWhereUniqueWithoutRegionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CountryUpdateManyWithWhereWithoutRegionInputSchema),z.lazy(() => CountryUpdateManyWithWhereWithoutRegionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CountryScalarWhereInputSchema),z.lazy(() => CountryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ChannelUncheckedUpdateManyWithoutRegionNestedInputSchema: z.ZodType<Prisma.ChannelUncheckedUpdateManyWithoutRegionNestedInput> = z.object({
  create: z.union([ z.lazy(() => ChannelCreateWithoutRegionInputSchema),z.lazy(() => ChannelCreateWithoutRegionInputSchema).array(),z.lazy(() => ChannelUncheckedCreateWithoutRegionInputSchema),z.lazy(() => ChannelUncheckedCreateWithoutRegionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChannelCreateOrConnectWithoutRegionInputSchema),z.lazy(() => ChannelCreateOrConnectWithoutRegionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ChannelUpsertWithWhereUniqueWithoutRegionInputSchema),z.lazy(() => ChannelUpsertWithWhereUniqueWithoutRegionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChannelCreateManyRegionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ChannelWhereUniqueInputSchema),z.lazy(() => ChannelWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ChannelWhereUniqueInputSchema),z.lazy(() => ChannelWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ChannelWhereUniqueInputSchema),z.lazy(() => ChannelWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ChannelWhereUniqueInputSchema),z.lazy(() => ChannelWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ChannelUpdateWithWhereUniqueWithoutRegionInputSchema),z.lazy(() => ChannelUpdateWithWhereUniqueWithoutRegionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ChannelUpdateManyWithWhereWithoutRegionInputSchema),z.lazy(() => ChannelUpdateManyWithWhereWithoutRegionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ChannelScalarWhereInputSchema),z.lazy(() => ChannelScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CategoryCreateNestedOneWithoutToolInputSchema: z.ZodType<Prisma.CategoryCreateNestedOneWithoutToolInput> = z.object({
  create: z.union([ z.lazy(() => CategoryCreateWithoutToolInputSchema),z.lazy(() => CategoryUncheckedCreateWithoutToolInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CategoryCreateOrConnectWithoutToolInputSchema).optional(),
  connect: z.lazy(() => CategoryWhereUniqueInputSchema).optional()
}).strict();

export const PurposeCreateNestedManyWithoutToolsInputSchema: z.ZodType<Prisma.PurposeCreateNestedManyWithoutToolsInput> = z.object({
  create: z.union([ z.lazy(() => PurposeCreateWithoutToolsInputSchema),z.lazy(() => PurposeCreateWithoutToolsInputSchema).array(),z.lazy(() => PurposeUncheckedCreateWithoutToolsInputSchema),z.lazy(() => PurposeUncheckedCreateWithoutToolsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PurposeCreateOrConnectWithoutToolsInputSchema),z.lazy(() => PurposeCreateOrConnectWithoutToolsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PurposeWhereUniqueInputSchema),z.lazy(() => PurposeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserProfileCreateNestedManyWithoutToolsInputSchema: z.ZodType<Prisma.UserProfileCreateNestedManyWithoutToolsInput> = z.object({
  create: z.union([ z.lazy(() => UserProfileCreateWithoutToolsInputSchema),z.lazy(() => UserProfileCreateWithoutToolsInputSchema).array(),z.lazy(() => UserProfileUncheckedCreateWithoutToolsInputSchema),z.lazy(() => UserProfileUncheckedCreateWithoutToolsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserProfileCreateOrConnectWithoutToolsInputSchema),z.lazy(() => UserProfileCreateOrConnectWithoutToolsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CountryCreateNestedManyWithoutToolsInputSchema: z.ZodType<Prisma.CountryCreateNestedManyWithoutToolsInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutToolsInputSchema),z.lazy(() => CountryCreateWithoutToolsInputSchema).array(),z.lazy(() => CountryUncheckedCreateWithoutToolsInputSchema),z.lazy(() => CountryUncheckedCreateWithoutToolsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CountryCreateOrConnectWithoutToolsInputSchema),z.lazy(() => CountryCreateOrConnectWithoutToolsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ToolTextsCreateNestedManyWithoutToolInputSchema: z.ZodType<Prisma.ToolTextsCreateNestedManyWithoutToolInput> = z.object({
  create: z.union([ z.lazy(() => ToolTextsCreateWithoutToolInputSchema),z.lazy(() => ToolTextsCreateWithoutToolInputSchema).array(),z.lazy(() => ToolTextsUncheckedCreateWithoutToolInputSchema),z.lazy(() => ToolTextsUncheckedCreateWithoutToolInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ToolTextsCreateOrConnectWithoutToolInputSchema),z.lazy(() => ToolTextsCreateOrConnectWithoutToolInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ToolTextsCreateManyToolInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ToolTextsWhereUniqueInputSchema),z.lazy(() => ToolTextsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ToolCreateNestedOneWithoutForksInputSchema: z.ZodType<Prisma.ToolCreateNestedOneWithoutForksInput> = z.object({
  create: z.union([ z.lazy(() => ToolCreateWithoutForksInputSchema),z.lazy(() => ToolUncheckedCreateWithoutForksInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ToolCreateOrConnectWithoutForksInputSchema).optional(),
  connect: z.lazy(() => ToolWhereUniqueInputSchema).optional()
}).strict();

export const ToolCreateNestedManyWithoutParentInputSchema: z.ZodType<Prisma.ToolCreateNestedManyWithoutParentInput> = z.object({
  create: z.union([ z.lazy(() => ToolCreateWithoutParentInputSchema),z.lazy(() => ToolCreateWithoutParentInputSchema).array(),z.lazy(() => ToolUncheckedCreateWithoutParentInputSchema),z.lazy(() => ToolUncheckedCreateWithoutParentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ToolCreateOrConnectWithoutParentInputSchema),z.lazy(() => ToolCreateOrConnectWithoutParentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ToolCreateManyParentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const BlobCreateNestedManyWithoutSource_toolInputSchema: z.ZodType<Prisma.BlobCreateNestedManyWithoutSource_toolInput> = z.object({
  create: z.union([ z.lazy(() => BlobCreateWithoutSource_toolInputSchema),z.lazy(() => BlobCreateWithoutSource_toolInputSchema).array(),z.lazy(() => BlobUncheckedCreateWithoutSource_toolInputSchema),z.lazy(() => BlobUncheckedCreateWithoutSource_toolInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BlobCreateOrConnectWithoutSource_toolInputSchema),z.lazy(() => BlobCreateOrConnectWithoutSource_toolInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BlobCreateManySource_toolInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => BlobWhereUniqueInputSchema),z.lazy(() => BlobWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PurposeUncheckedCreateNestedManyWithoutToolsInputSchema: z.ZodType<Prisma.PurposeUncheckedCreateNestedManyWithoutToolsInput> = z.object({
  create: z.union([ z.lazy(() => PurposeCreateWithoutToolsInputSchema),z.lazy(() => PurposeCreateWithoutToolsInputSchema).array(),z.lazy(() => PurposeUncheckedCreateWithoutToolsInputSchema),z.lazy(() => PurposeUncheckedCreateWithoutToolsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PurposeCreateOrConnectWithoutToolsInputSchema),z.lazy(() => PurposeCreateOrConnectWithoutToolsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PurposeWhereUniqueInputSchema),z.lazy(() => PurposeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserProfileUncheckedCreateNestedManyWithoutToolsInputSchema: z.ZodType<Prisma.UserProfileUncheckedCreateNestedManyWithoutToolsInput> = z.object({
  create: z.union([ z.lazy(() => UserProfileCreateWithoutToolsInputSchema),z.lazy(() => UserProfileCreateWithoutToolsInputSchema).array(),z.lazy(() => UserProfileUncheckedCreateWithoutToolsInputSchema),z.lazy(() => UserProfileUncheckedCreateWithoutToolsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserProfileCreateOrConnectWithoutToolsInputSchema),z.lazy(() => UserProfileCreateOrConnectWithoutToolsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CountryUncheckedCreateNestedManyWithoutToolsInputSchema: z.ZodType<Prisma.CountryUncheckedCreateNestedManyWithoutToolsInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutToolsInputSchema),z.lazy(() => CountryCreateWithoutToolsInputSchema).array(),z.lazy(() => CountryUncheckedCreateWithoutToolsInputSchema),z.lazy(() => CountryUncheckedCreateWithoutToolsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CountryCreateOrConnectWithoutToolsInputSchema),z.lazy(() => CountryCreateOrConnectWithoutToolsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ToolTextsUncheckedCreateNestedManyWithoutToolInputSchema: z.ZodType<Prisma.ToolTextsUncheckedCreateNestedManyWithoutToolInput> = z.object({
  create: z.union([ z.lazy(() => ToolTextsCreateWithoutToolInputSchema),z.lazy(() => ToolTextsCreateWithoutToolInputSchema).array(),z.lazy(() => ToolTextsUncheckedCreateWithoutToolInputSchema),z.lazy(() => ToolTextsUncheckedCreateWithoutToolInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ToolTextsCreateOrConnectWithoutToolInputSchema),z.lazy(() => ToolTextsCreateOrConnectWithoutToolInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ToolTextsCreateManyToolInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ToolTextsWhereUniqueInputSchema),z.lazy(() => ToolTextsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ToolUncheckedCreateNestedManyWithoutParentInputSchema: z.ZodType<Prisma.ToolUncheckedCreateNestedManyWithoutParentInput> = z.object({
  create: z.union([ z.lazy(() => ToolCreateWithoutParentInputSchema),z.lazy(() => ToolCreateWithoutParentInputSchema).array(),z.lazy(() => ToolUncheckedCreateWithoutParentInputSchema),z.lazy(() => ToolUncheckedCreateWithoutParentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ToolCreateOrConnectWithoutParentInputSchema),z.lazy(() => ToolCreateOrConnectWithoutParentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ToolCreateManyParentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const BlobUncheckedCreateNestedManyWithoutSource_toolInputSchema: z.ZodType<Prisma.BlobUncheckedCreateNestedManyWithoutSource_toolInput> = z.object({
  create: z.union([ z.lazy(() => BlobCreateWithoutSource_toolInputSchema),z.lazy(() => BlobCreateWithoutSource_toolInputSchema).array(),z.lazy(() => BlobUncheckedCreateWithoutSource_toolInputSchema),z.lazy(() => BlobUncheckedCreateWithoutSource_toolInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BlobCreateOrConnectWithoutSource_toolInputSchema),z.lazy(() => BlobCreateOrConnectWithoutSource_toolInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BlobCreateManySource_toolInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => BlobWhereUniqueInputSchema),z.lazy(() => BlobWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CategoryUpdateOneRequiredWithoutToolNestedInputSchema: z.ZodType<Prisma.CategoryUpdateOneRequiredWithoutToolNestedInput> = z.object({
  create: z.union([ z.lazy(() => CategoryCreateWithoutToolInputSchema),z.lazy(() => CategoryUncheckedCreateWithoutToolInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CategoryCreateOrConnectWithoutToolInputSchema).optional(),
  upsert: z.lazy(() => CategoryUpsertWithoutToolInputSchema).optional(),
  connect: z.lazy(() => CategoryWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CategoryUpdateToOneWithWhereWithoutToolInputSchema),z.lazy(() => CategoryUpdateWithoutToolInputSchema),z.lazy(() => CategoryUncheckedUpdateWithoutToolInputSchema) ]).optional(),
}).strict();

export const PurposeUpdateManyWithoutToolsNestedInputSchema: z.ZodType<Prisma.PurposeUpdateManyWithoutToolsNestedInput> = z.object({
  create: z.union([ z.lazy(() => PurposeCreateWithoutToolsInputSchema),z.lazy(() => PurposeCreateWithoutToolsInputSchema).array(),z.lazy(() => PurposeUncheckedCreateWithoutToolsInputSchema),z.lazy(() => PurposeUncheckedCreateWithoutToolsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PurposeCreateOrConnectWithoutToolsInputSchema),z.lazy(() => PurposeCreateOrConnectWithoutToolsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PurposeUpsertWithWhereUniqueWithoutToolsInputSchema),z.lazy(() => PurposeUpsertWithWhereUniqueWithoutToolsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => PurposeWhereUniqueInputSchema),z.lazy(() => PurposeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PurposeWhereUniqueInputSchema),z.lazy(() => PurposeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PurposeWhereUniqueInputSchema),z.lazy(() => PurposeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PurposeWhereUniqueInputSchema),z.lazy(() => PurposeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PurposeUpdateWithWhereUniqueWithoutToolsInputSchema),z.lazy(() => PurposeUpdateWithWhereUniqueWithoutToolsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PurposeUpdateManyWithWhereWithoutToolsInputSchema),z.lazy(() => PurposeUpdateManyWithWhereWithoutToolsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PurposeScalarWhereInputSchema),z.lazy(() => PurposeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserProfileUpdateManyWithoutToolsNestedInputSchema: z.ZodType<Prisma.UserProfileUpdateManyWithoutToolsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserProfileCreateWithoutToolsInputSchema),z.lazy(() => UserProfileCreateWithoutToolsInputSchema).array(),z.lazy(() => UserProfileUncheckedCreateWithoutToolsInputSchema),z.lazy(() => UserProfileUncheckedCreateWithoutToolsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserProfileCreateOrConnectWithoutToolsInputSchema),z.lazy(() => UserProfileCreateOrConnectWithoutToolsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserProfileUpsertWithWhereUniqueWithoutToolsInputSchema),z.lazy(() => UserProfileUpsertWithWhereUniqueWithoutToolsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserProfileUpdateWithWhereUniqueWithoutToolsInputSchema),z.lazy(() => UserProfileUpdateWithWhereUniqueWithoutToolsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserProfileUpdateManyWithWhereWithoutToolsInputSchema),z.lazy(() => UserProfileUpdateManyWithWhereWithoutToolsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserProfileScalarWhereInputSchema),z.lazy(() => UserProfileScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CountryUpdateManyWithoutToolsNestedInputSchema: z.ZodType<Prisma.CountryUpdateManyWithoutToolsNestedInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutToolsInputSchema),z.lazy(() => CountryCreateWithoutToolsInputSchema).array(),z.lazy(() => CountryUncheckedCreateWithoutToolsInputSchema),z.lazy(() => CountryUncheckedCreateWithoutToolsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CountryCreateOrConnectWithoutToolsInputSchema),z.lazy(() => CountryCreateOrConnectWithoutToolsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CountryUpsertWithWhereUniqueWithoutToolsInputSchema),z.lazy(() => CountryUpsertWithWhereUniqueWithoutToolsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CountryUpdateWithWhereUniqueWithoutToolsInputSchema),z.lazy(() => CountryUpdateWithWhereUniqueWithoutToolsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CountryUpdateManyWithWhereWithoutToolsInputSchema),z.lazy(() => CountryUpdateManyWithWhereWithoutToolsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CountryScalarWhereInputSchema),z.lazy(() => CountryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ToolTextsUpdateManyWithoutToolNestedInputSchema: z.ZodType<Prisma.ToolTextsUpdateManyWithoutToolNestedInput> = z.object({
  create: z.union([ z.lazy(() => ToolTextsCreateWithoutToolInputSchema),z.lazy(() => ToolTextsCreateWithoutToolInputSchema).array(),z.lazy(() => ToolTextsUncheckedCreateWithoutToolInputSchema),z.lazy(() => ToolTextsUncheckedCreateWithoutToolInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ToolTextsCreateOrConnectWithoutToolInputSchema),z.lazy(() => ToolTextsCreateOrConnectWithoutToolInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ToolTextsUpsertWithWhereUniqueWithoutToolInputSchema),z.lazy(() => ToolTextsUpsertWithWhereUniqueWithoutToolInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ToolTextsCreateManyToolInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ToolTextsWhereUniqueInputSchema),z.lazy(() => ToolTextsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ToolTextsWhereUniqueInputSchema),z.lazy(() => ToolTextsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ToolTextsWhereUniqueInputSchema),z.lazy(() => ToolTextsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ToolTextsWhereUniqueInputSchema),z.lazy(() => ToolTextsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ToolTextsUpdateWithWhereUniqueWithoutToolInputSchema),z.lazy(() => ToolTextsUpdateWithWhereUniqueWithoutToolInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ToolTextsUpdateManyWithWhereWithoutToolInputSchema),z.lazy(() => ToolTextsUpdateManyWithWhereWithoutToolInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ToolTextsScalarWhereInputSchema),z.lazy(() => ToolTextsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ToolUpdateOneWithoutForksNestedInputSchema: z.ZodType<Prisma.ToolUpdateOneWithoutForksNestedInput> = z.object({
  create: z.union([ z.lazy(() => ToolCreateWithoutForksInputSchema),z.lazy(() => ToolUncheckedCreateWithoutForksInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ToolCreateOrConnectWithoutForksInputSchema).optional(),
  upsert: z.lazy(() => ToolUpsertWithoutForksInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => ToolWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => ToolWhereInputSchema) ]).optional(),
  connect: z.lazy(() => ToolWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ToolUpdateToOneWithWhereWithoutForksInputSchema),z.lazy(() => ToolUpdateWithoutForksInputSchema),z.lazy(() => ToolUncheckedUpdateWithoutForksInputSchema) ]).optional(),
}).strict();

export const ToolUpdateManyWithoutParentNestedInputSchema: z.ZodType<Prisma.ToolUpdateManyWithoutParentNestedInput> = z.object({
  create: z.union([ z.lazy(() => ToolCreateWithoutParentInputSchema),z.lazy(() => ToolCreateWithoutParentInputSchema).array(),z.lazy(() => ToolUncheckedCreateWithoutParentInputSchema),z.lazy(() => ToolUncheckedCreateWithoutParentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ToolCreateOrConnectWithoutParentInputSchema),z.lazy(() => ToolCreateOrConnectWithoutParentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ToolUpsertWithWhereUniqueWithoutParentInputSchema),z.lazy(() => ToolUpsertWithWhereUniqueWithoutParentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ToolCreateManyParentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ToolUpdateWithWhereUniqueWithoutParentInputSchema),z.lazy(() => ToolUpdateWithWhereUniqueWithoutParentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ToolUpdateManyWithWhereWithoutParentInputSchema),z.lazy(() => ToolUpdateManyWithWhereWithoutParentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ToolScalarWhereInputSchema),z.lazy(() => ToolScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const BlobUpdateManyWithoutSource_toolNestedInputSchema: z.ZodType<Prisma.BlobUpdateManyWithoutSource_toolNestedInput> = z.object({
  create: z.union([ z.lazy(() => BlobCreateWithoutSource_toolInputSchema),z.lazy(() => BlobCreateWithoutSource_toolInputSchema).array(),z.lazy(() => BlobUncheckedCreateWithoutSource_toolInputSchema),z.lazy(() => BlobUncheckedCreateWithoutSource_toolInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BlobCreateOrConnectWithoutSource_toolInputSchema),z.lazy(() => BlobCreateOrConnectWithoutSource_toolInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => BlobUpsertWithWhereUniqueWithoutSource_toolInputSchema),z.lazy(() => BlobUpsertWithWhereUniqueWithoutSource_toolInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BlobCreateManySource_toolInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => BlobWhereUniqueInputSchema),z.lazy(() => BlobWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => BlobWhereUniqueInputSchema),z.lazy(() => BlobWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => BlobWhereUniqueInputSchema),z.lazy(() => BlobWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => BlobWhereUniqueInputSchema),z.lazy(() => BlobWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => BlobUpdateWithWhereUniqueWithoutSource_toolInputSchema),z.lazy(() => BlobUpdateWithWhereUniqueWithoutSource_toolInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => BlobUpdateManyWithWhereWithoutSource_toolInputSchema),z.lazy(() => BlobUpdateManyWithWhereWithoutSource_toolInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => BlobScalarWhereInputSchema),z.lazy(() => BlobScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PurposeUncheckedUpdateManyWithoutToolsNestedInputSchema: z.ZodType<Prisma.PurposeUncheckedUpdateManyWithoutToolsNestedInput> = z.object({
  create: z.union([ z.lazy(() => PurposeCreateWithoutToolsInputSchema),z.lazy(() => PurposeCreateWithoutToolsInputSchema).array(),z.lazy(() => PurposeUncheckedCreateWithoutToolsInputSchema),z.lazy(() => PurposeUncheckedCreateWithoutToolsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PurposeCreateOrConnectWithoutToolsInputSchema),z.lazy(() => PurposeCreateOrConnectWithoutToolsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PurposeUpsertWithWhereUniqueWithoutToolsInputSchema),z.lazy(() => PurposeUpsertWithWhereUniqueWithoutToolsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => PurposeWhereUniqueInputSchema),z.lazy(() => PurposeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PurposeWhereUniqueInputSchema),z.lazy(() => PurposeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PurposeWhereUniqueInputSchema),z.lazy(() => PurposeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PurposeWhereUniqueInputSchema),z.lazy(() => PurposeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PurposeUpdateWithWhereUniqueWithoutToolsInputSchema),z.lazy(() => PurposeUpdateWithWhereUniqueWithoutToolsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PurposeUpdateManyWithWhereWithoutToolsInputSchema),z.lazy(() => PurposeUpdateManyWithWhereWithoutToolsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PurposeScalarWhereInputSchema),z.lazy(() => PurposeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserProfileUncheckedUpdateManyWithoutToolsNestedInputSchema: z.ZodType<Prisma.UserProfileUncheckedUpdateManyWithoutToolsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserProfileCreateWithoutToolsInputSchema),z.lazy(() => UserProfileCreateWithoutToolsInputSchema).array(),z.lazy(() => UserProfileUncheckedCreateWithoutToolsInputSchema),z.lazy(() => UserProfileUncheckedCreateWithoutToolsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserProfileCreateOrConnectWithoutToolsInputSchema),z.lazy(() => UserProfileCreateOrConnectWithoutToolsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserProfileUpsertWithWhereUniqueWithoutToolsInputSchema),z.lazy(() => UserProfileUpsertWithWhereUniqueWithoutToolsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserProfileUpdateWithWhereUniqueWithoutToolsInputSchema),z.lazy(() => UserProfileUpdateWithWhereUniqueWithoutToolsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserProfileUpdateManyWithWhereWithoutToolsInputSchema),z.lazy(() => UserProfileUpdateManyWithWhereWithoutToolsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserProfileScalarWhereInputSchema),z.lazy(() => UserProfileScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CountryUncheckedUpdateManyWithoutToolsNestedInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateManyWithoutToolsNestedInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutToolsInputSchema),z.lazy(() => CountryCreateWithoutToolsInputSchema).array(),z.lazy(() => CountryUncheckedCreateWithoutToolsInputSchema),z.lazy(() => CountryUncheckedCreateWithoutToolsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CountryCreateOrConnectWithoutToolsInputSchema),z.lazy(() => CountryCreateOrConnectWithoutToolsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CountryUpsertWithWhereUniqueWithoutToolsInputSchema),z.lazy(() => CountryUpsertWithWhereUniqueWithoutToolsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CountryUpdateWithWhereUniqueWithoutToolsInputSchema),z.lazy(() => CountryUpdateWithWhereUniqueWithoutToolsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CountryUpdateManyWithWhereWithoutToolsInputSchema),z.lazy(() => CountryUpdateManyWithWhereWithoutToolsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CountryScalarWhereInputSchema),z.lazy(() => CountryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ToolTextsUncheckedUpdateManyWithoutToolNestedInputSchema: z.ZodType<Prisma.ToolTextsUncheckedUpdateManyWithoutToolNestedInput> = z.object({
  create: z.union([ z.lazy(() => ToolTextsCreateWithoutToolInputSchema),z.lazy(() => ToolTextsCreateWithoutToolInputSchema).array(),z.lazy(() => ToolTextsUncheckedCreateWithoutToolInputSchema),z.lazy(() => ToolTextsUncheckedCreateWithoutToolInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ToolTextsCreateOrConnectWithoutToolInputSchema),z.lazy(() => ToolTextsCreateOrConnectWithoutToolInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ToolTextsUpsertWithWhereUniqueWithoutToolInputSchema),z.lazy(() => ToolTextsUpsertWithWhereUniqueWithoutToolInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ToolTextsCreateManyToolInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ToolTextsWhereUniqueInputSchema),z.lazy(() => ToolTextsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ToolTextsWhereUniqueInputSchema),z.lazy(() => ToolTextsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ToolTextsWhereUniqueInputSchema),z.lazy(() => ToolTextsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ToolTextsWhereUniqueInputSchema),z.lazy(() => ToolTextsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ToolTextsUpdateWithWhereUniqueWithoutToolInputSchema),z.lazy(() => ToolTextsUpdateWithWhereUniqueWithoutToolInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ToolTextsUpdateManyWithWhereWithoutToolInputSchema),z.lazy(() => ToolTextsUpdateManyWithWhereWithoutToolInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ToolTextsScalarWhereInputSchema),z.lazy(() => ToolTextsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ToolUncheckedUpdateManyWithoutParentNestedInputSchema: z.ZodType<Prisma.ToolUncheckedUpdateManyWithoutParentNestedInput> = z.object({
  create: z.union([ z.lazy(() => ToolCreateWithoutParentInputSchema),z.lazy(() => ToolCreateWithoutParentInputSchema).array(),z.lazy(() => ToolUncheckedCreateWithoutParentInputSchema),z.lazy(() => ToolUncheckedCreateWithoutParentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ToolCreateOrConnectWithoutParentInputSchema),z.lazy(() => ToolCreateOrConnectWithoutParentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ToolUpsertWithWhereUniqueWithoutParentInputSchema),z.lazy(() => ToolUpsertWithWhereUniqueWithoutParentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ToolCreateManyParentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ToolUpdateWithWhereUniqueWithoutParentInputSchema),z.lazy(() => ToolUpdateWithWhereUniqueWithoutParentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ToolUpdateManyWithWhereWithoutParentInputSchema),z.lazy(() => ToolUpdateManyWithWhereWithoutParentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ToolScalarWhereInputSchema),z.lazy(() => ToolScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const BlobUncheckedUpdateManyWithoutSource_toolNestedInputSchema: z.ZodType<Prisma.BlobUncheckedUpdateManyWithoutSource_toolNestedInput> = z.object({
  create: z.union([ z.lazy(() => BlobCreateWithoutSource_toolInputSchema),z.lazy(() => BlobCreateWithoutSource_toolInputSchema).array(),z.lazy(() => BlobUncheckedCreateWithoutSource_toolInputSchema),z.lazy(() => BlobUncheckedCreateWithoutSource_toolInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BlobCreateOrConnectWithoutSource_toolInputSchema),z.lazy(() => BlobCreateOrConnectWithoutSource_toolInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => BlobUpsertWithWhereUniqueWithoutSource_toolInputSchema),z.lazy(() => BlobUpsertWithWhereUniqueWithoutSource_toolInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BlobCreateManySource_toolInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => BlobWhereUniqueInputSchema),z.lazy(() => BlobWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => BlobWhereUniqueInputSchema),z.lazy(() => BlobWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => BlobWhereUniqueInputSchema),z.lazy(() => BlobWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => BlobWhereUniqueInputSchema),z.lazy(() => BlobWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => BlobUpdateWithWhereUniqueWithoutSource_toolInputSchema),z.lazy(() => BlobUpdateWithWhereUniqueWithoutSource_toolInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => BlobUpdateManyWithWhereWithoutSource_toolInputSchema),z.lazy(() => BlobUpdateManyWithWhereWithoutSource_toolInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => BlobScalarWhereInputSchema),z.lazy(() => BlobScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ToolCreateNestedOneWithoutToolTextsInputSchema: z.ZodType<Prisma.ToolCreateNestedOneWithoutToolTextsInput> = z.object({
  create: z.union([ z.lazy(() => ToolCreateWithoutToolTextsInputSchema),z.lazy(() => ToolUncheckedCreateWithoutToolTextsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ToolCreateOrConnectWithoutToolTextsInputSchema).optional(),
  connect: z.lazy(() => ToolWhereUniqueInputSchema).optional()
}).strict();

export const LanguageCreateNestedOneWithoutToolTextsInputSchema: z.ZodType<Prisma.LanguageCreateNestedOneWithoutToolTextsInput> = z.object({
  create: z.union([ z.lazy(() => LanguageCreateWithoutToolTextsInputSchema),z.lazy(() => LanguageUncheckedCreateWithoutToolTextsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => LanguageCreateOrConnectWithoutToolTextsInputSchema).optional(),
  connect: z.lazy(() => LanguageWhereUniqueInputSchema).optional()
}).strict();

export const ToolUpdateOneRequiredWithoutToolTextsNestedInputSchema: z.ZodType<Prisma.ToolUpdateOneRequiredWithoutToolTextsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ToolCreateWithoutToolTextsInputSchema),z.lazy(() => ToolUncheckedCreateWithoutToolTextsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ToolCreateOrConnectWithoutToolTextsInputSchema).optional(),
  upsert: z.lazy(() => ToolUpsertWithoutToolTextsInputSchema).optional(),
  connect: z.lazy(() => ToolWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ToolUpdateToOneWithWhereWithoutToolTextsInputSchema),z.lazy(() => ToolUpdateWithoutToolTextsInputSchema),z.lazy(() => ToolUncheckedUpdateWithoutToolTextsInputSchema) ]).optional(),
}).strict();

export const LanguageUpdateOneRequiredWithoutToolTextsNestedInputSchema: z.ZodType<Prisma.LanguageUpdateOneRequiredWithoutToolTextsNestedInput> = z.object({
  create: z.union([ z.lazy(() => LanguageCreateWithoutToolTextsInputSchema),z.lazy(() => LanguageUncheckedCreateWithoutToolTextsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => LanguageCreateOrConnectWithoutToolTextsInputSchema).optional(),
  upsert: z.lazy(() => LanguageUpsertWithoutToolTextsInputSchema).optional(),
  connect: z.lazy(() => LanguageWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => LanguageUpdateToOneWithWhereWithoutToolTextsInputSchema),z.lazy(() => LanguageUpdateWithoutToolTextsInputSchema),z.lazy(() => LanguageUncheckedUpdateWithoutToolTextsInputSchema) ]).optional(),
}).strict();

export const UserProfileCreateNestedManyWithoutToolGroupInputSchema: z.ZodType<Prisma.UserProfileCreateNestedManyWithoutToolGroupInput> = z.object({
  create: z.union([ z.lazy(() => UserProfileCreateWithoutToolGroupInputSchema),z.lazy(() => UserProfileCreateWithoutToolGroupInputSchema).array(),z.lazy(() => UserProfileUncheckedCreateWithoutToolGroupInputSchema),z.lazy(() => UserProfileUncheckedCreateWithoutToolGroupInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserProfileCreateOrConnectWithoutToolGroupInputSchema),z.lazy(() => UserProfileCreateOrConnectWithoutToolGroupInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserGroupCreateNestedManyWithoutToolGroupInputSchema: z.ZodType<Prisma.UserGroupCreateNestedManyWithoutToolGroupInput> = z.object({
  create: z.union([ z.lazy(() => UserGroupCreateWithoutToolGroupInputSchema),z.lazy(() => UserGroupCreateWithoutToolGroupInputSchema).array(),z.lazy(() => UserGroupUncheckedCreateWithoutToolGroupInputSchema),z.lazy(() => UserGroupUncheckedCreateWithoutToolGroupInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserGroupCreateOrConnectWithoutToolGroupInputSchema),z.lazy(() => UserGroupCreateOrConnectWithoutToolGroupInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserGroupWhereUniqueInputSchema),z.lazy(() => UserGroupWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserProfileUncheckedCreateNestedManyWithoutToolGroupInputSchema: z.ZodType<Prisma.UserProfileUncheckedCreateNestedManyWithoutToolGroupInput> = z.object({
  create: z.union([ z.lazy(() => UserProfileCreateWithoutToolGroupInputSchema),z.lazy(() => UserProfileCreateWithoutToolGroupInputSchema).array(),z.lazy(() => UserProfileUncheckedCreateWithoutToolGroupInputSchema),z.lazy(() => UserProfileUncheckedCreateWithoutToolGroupInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserProfileCreateOrConnectWithoutToolGroupInputSchema),z.lazy(() => UserProfileCreateOrConnectWithoutToolGroupInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserGroupUncheckedCreateNestedManyWithoutToolGroupInputSchema: z.ZodType<Prisma.UserGroupUncheckedCreateNestedManyWithoutToolGroupInput> = z.object({
  create: z.union([ z.lazy(() => UserGroupCreateWithoutToolGroupInputSchema),z.lazy(() => UserGroupCreateWithoutToolGroupInputSchema).array(),z.lazy(() => UserGroupUncheckedCreateWithoutToolGroupInputSchema),z.lazy(() => UserGroupUncheckedCreateWithoutToolGroupInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserGroupCreateOrConnectWithoutToolGroupInputSchema),z.lazy(() => UserGroupCreateOrConnectWithoutToolGroupInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserGroupWhereUniqueInputSchema),z.lazy(() => UserGroupWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => StatusSchema).optional()
}).strict();

export const UserProfileUpdateManyWithoutToolGroupNestedInputSchema: z.ZodType<Prisma.UserProfileUpdateManyWithoutToolGroupNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserProfileCreateWithoutToolGroupInputSchema),z.lazy(() => UserProfileCreateWithoutToolGroupInputSchema).array(),z.lazy(() => UserProfileUncheckedCreateWithoutToolGroupInputSchema),z.lazy(() => UserProfileUncheckedCreateWithoutToolGroupInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserProfileCreateOrConnectWithoutToolGroupInputSchema),z.lazy(() => UserProfileCreateOrConnectWithoutToolGroupInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserProfileUpsertWithWhereUniqueWithoutToolGroupInputSchema),z.lazy(() => UserProfileUpsertWithWhereUniqueWithoutToolGroupInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserProfileUpdateWithWhereUniqueWithoutToolGroupInputSchema),z.lazy(() => UserProfileUpdateWithWhereUniqueWithoutToolGroupInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserProfileUpdateManyWithWhereWithoutToolGroupInputSchema),z.lazy(() => UserProfileUpdateManyWithWhereWithoutToolGroupInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserProfileScalarWhereInputSchema),z.lazy(() => UserProfileScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserGroupUpdateManyWithoutToolGroupNestedInputSchema: z.ZodType<Prisma.UserGroupUpdateManyWithoutToolGroupNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserGroupCreateWithoutToolGroupInputSchema),z.lazy(() => UserGroupCreateWithoutToolGroupInputSchema).array(),z.lazy(() => UserGroupUncheckedCreateWithoutToolGroupInputSchema),z.lazy(() => UserGroupUncheckedCreateWithoutToolGroupInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserGroupCreateOrConnectWithoutToolGroupInputSchema),z.lazy(() => UserGroupCreateOrConnectWithoutToolGroupInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserGroupUpsertWithWhereUniqueWithoutToolGroupInputSchema),z.lazy(() => UserGroupUpsertWithWhereUniqueWithoutToolGroupInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => UserGroupWhereUniqueInputSchema),z.lazy(() => UserGroupWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserGroupWhereUniqueInputSchema),z.lazy(() => UserGroupWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserGroupWhereUniqueInputSchema),z.lazy(() => UserGroupWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserGroupWhereUniqueInputSchema),z.lazy(() => UserGroupWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserGroupUpdateWithWhereUniqueWithoutToolGroupInputSchema),z.lazy(() => UserGroupUpdateWithWhereUniqueWithoutToolGroupInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserGroupUpdateManyWithWhereWithoutToolGroupInputSchema),z.lazy(() => UserGroupUpdateManyWithWhereWithoutToolGroupInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserGroupScalarWhereInputSchema),z.lazy(() => UserGroupScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserProfileUncheckedUpdateManyWithoutToolGroupNestedInputSchema: z.ZodType<Prisma.UserProfileUncheckedUpdateManyWithoutToolGroupNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserProfileCreateWithoutToolGroupInputSchema),z.lazy(() => UserProfileCreateWithoutToolGroupInputSchema).array(),z.lazy(() => UserProfileUncheckedCreateWithoutToolGroupInputSchema),z.lazy(() => UserProfileUncheckedCreateWithoutToolGroupInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserProfileCreateOrConnectWithoutToolGroupInputSchema),z.lazy(() => UserProfileCreateOrConnectWithoutToolGroupInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserProfileUpsertWithWhereUniqueWithoutToolGroupInputSchema),z.lazy(() => UserProfileUpsertWithWhereUniqueWithoutToolGroupInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserProfileUpdateWithWhereUniqueWithoutToolGroupInputSchema),z.lazy(() => UserProfileUpdateWithWhereUniqueWithoutToolGroupInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserProfileUpdateManyWithWhereWithoutToolGroupInputSchema),z.lazy(() => UserProfileUpdateManyWithWhereWithoutToolGroupInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserProfileScalarWhereInputSchema),z.lazy(() => UserProfileScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserGroupUncheckedUpdateManyWithoutToolGroupNestedInputSchema: z.ZodType<Prisma.UserGroupUncheckedUpdateManyWithoutToolGroupNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserGroupCreateWithoutToolGroupInputSchema),z.lazy(() => UserGroupCreateWithoutToolGroupInputSchema).array(),z.lazy(() => UserGroupUncheckedCreateWithoutToolGroupInputSchema),z.lazy(() => UserGroupUncheckedCreateWithoutToolGroupInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserGroupCreateOrConnectWithoutToolGroupInputSchema),z.lazy(() => UserGroupCreateOrConnectWithoutToolGroupInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserGroupUpsertWithWhereUniqueWithoutToolGroupInputSchema),z.lazy(() => UserGroupUpsertWithWhereUniqueWithoutToolGroupInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => UserGroupWhereUniqueInputSchema),z.lazy(() => UserGroupWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserGroupWhereUniqueInputSchema),z.lazy(() => UserGroupWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserGroupWhereUniqueInputSchema),z.lazy(() => UserGroupWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserGroupWhereUniqueInputSchema),z.lazy(() => UserGroupWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserGroupUpdateWithWhereUniqueWithoutToolGroupInputSchema),z.lazy(() => UserGroupUpdateWithWhereUniqueWithoutToolGroupInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserGroupUpdateManyWithWhereWithoutToolGroupInputSchema),z.lazy(() => UserGroupUpdateManyWithWhereWithoutToolGroupInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserGroupScalarWhereInputSchema),z.lazy(() => UserGroupScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ToolGroupCreateNestedManyWithoutUserGroupsInputSchema: z.ZodType<Prisma.ToolGroupCreateNestedManyWithoutUserGroupsInput> = z.object({
  create: z.union([ z.lazy(() => ToolGroupCreateWithoutUserGroupsInputSchema),z.lazy(() => ToolGroupCreateWithoutUserGroupsInputSchema).array(),z.lazy(() => ToolGroupUncheckedCreateWithoutUserGroupsInputSchema),z.lazy(() => ToolGroupUncheckedCreateWithoutUserGroupsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ToolGroupCreateOrConnectWithoutUserGroupsInputSchema),z.lazy(() => ToolGroupCreateOrConnectWithoutUserGroupsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ToolGroupWhereUniqueInputSchema),z.lazy(() => ToolGroupWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ToolGroupUncheckedCreateNestedManyWithoutUserGroupsInputSchema: z.ZodType<Prisma.ToolGroupUncheckedCreateNestedManyWithoutUserGroupsInput> = z.object({
  create: z.union([ z.lazy(() => ToolGroupCreateWithoutUserGroupsInputSchema),z.lazy(() => ToolGroupCreateWithoutUserGroupsInputSchema).array(),z.lazy(() => ToolGroupUncheckedCreateWithoutUserGroupsInputSchema),z.lazy(() => ToolGroupUncheckedCreateWithoutUserGroupsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ToolGroupCreateOrConnectWithoutUserGroupsInputSchema),z.lazy(() => ToolGroupCreateOrConnectWithoutUserGroupsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ToolGroupWhereUniqueInputSchema),z.lazy(() => ToolGroupWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ToolGroupUpdateManyWithoutUserGroupsNestedInputSchema: z.ZodType<Prisma.ToolGroupUpdateManyWithoutUserGroupsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ToolGroupCreateWithoutUserGroupsInputSchema),z.lazy(() => ToolGroupCreateWithoutUserGroupsInputSchema).array(),z.lazy(() => ToolGroupUncheckedCreateWithoutUserGroupsInputSchema),z.lazy(() => ToolGroupUncheckedCreateWithoutUserGroupsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ToolGroupCreateOrConnectWithoutUserGroupsInputSchema),z.lazy(() => ToolGroupCreateOrConnectWithoutUserGroupsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ToolGroupUpsertWithWhereUniqueWithoutUserGroupsInputSchema),z.lazy(() => ToolGroupUpsertWithWhereUniqueWithoutUserGroupsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => ToolGroupWhereUniqueInputSchema),z.lazy(() => ToolGroupWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ToolGroupWhereUniqueInputSchema),z.lazy(() => ToolGroupWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ToolGroupWhereUniqueInputSchema),z.lazy(() => ToolGroupWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ToolGroupWhereUniqueInputSchema),z.lazy(() => ToolGroupWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ToolGroupUpdateWithWhereUniqueWithoutUserGroupsInputSchema),z.lazy(() => ToolGroupUpdateWithWhereUniqueWithoutUserGroupsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ToolGroupUpdateManyWithWhereWithoutUserGroupsInputSchema),z.lazy(() => ToolGroupUpdateManyWithWhereWithoutUserGroupsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ToolGroupScalarWhereInputSchema),z.lazy(() => ToolGroupScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ToolGroupUncheckedUpdateManyWithoutUserGroupsNestedInputSchema: z.ZodType<Prisma.ToolGroupUncheckedUpdateManyWithoutUserGroupsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ToolGroupCreateWithoutUserGroupsInputSchema),z.lazy(() => ToolGroupCreateWithoutUserGroupsInputSchema).array(),z.lazy(() => ToolGroupUncheckedCreateWithoutUserGroupsInputSchema),z.lazy(() => ToolGroupUncheckedCreateWithoutUserGroupsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ToolGroupCreateOrConnectWithoutUserGroupsInputSchema),z.lazy(() => ToolGroupCreateOrConnectWithoutUserGroupsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ToolGroupUpsertWithWhereUniqueWithoutUserGroupsInputSchema),z.lazy(() => ToolGroupUpsertWithWhereUniqueWithoutUserGroupsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => ToolGroupWhereUniqueInputSchema),z.lazy(() => ToolGroupWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ToolGroupWhereUniqueInputSchema),z.lazy(() => ToolGroupWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ToolGroupWhereUniqueInputSchema),z.lazy(() => ToolGroupWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ToolGroupWhereUniqueInputSchema),z.lazy(() => ToolGroupWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ToolGroupUpdateWithWhereUniqueWithoutUserGroupsInputSchema),z.lazy(() => ToolGroupUpdateWithWhereUniqueWithoutUserGroupsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ToolGroupUpdateManyWithWhereWithoutUserGroupsInputSchema),z.lazy(() => ToolGroupUpdateManyWithWhereWithoutUserGroupsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ToolGroupScalarWhereInputSchema),z.lazy(() => ToolGroupScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ToolCreateNestedManyWithoutUserProfilesInputSchema: z.ZodType<Prisma.ToolCreateNestedManyWithoutUserProfilesInput> = z.object({
  create: z.union([ z.lazy(() => ToolCreateWithoutUserProfilesInputSchema),z.lazy(() => ToolCreateWithoutUserProfilesInputSchema).array(),z.lazy(() => ToolUncheckedCreateWithoutUserProfilesInputSchema),z.lazy(() => ToolUncheckedCreateWithoutUserProfilesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ToolCreateOrConnectWithoutUserProfilesInputSchema),z.lazy(() => ToolCreateOrConnectWithoutUserProfilesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SessionCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ToolGroupCreateNestedManyWithoutOwnersInputSchema: z.ZodType<Prisma.ToolGroupCreateNestedManyWithoutOwnersInput> = z.object({
  create: z.union([ z.lazy(() => ToolGroupCreateWithoutOwnersInputSchema),z.lazy(() => ToolGroupCreateWithoutOwnersInputSchema).array(),z.lazy(() => ToolGroupUncheckedCreateWithoutOwnersInputSchema),z.lazy(() => ToolGroupUncheckedCreateWithoutOwnersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ToolGroupCreateOrConnectWithoutOwnersInputSchema),z.lazy(() => ToolGroupCreateOrConnectWithoutOwnersInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ToolGroupWhereUniqueInputSchema),z.lazy(() => ToolGroupWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserRoleCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.UserRoleCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => UserRoleCreateWithoutUsersInputSchema),z.lazy(() => UserRoleCreateWithoutUsersInputSchema).array(),z.lazy(() => UserRoleUncheckedCreateWithoutUsersInputSchema),z.lazy(() => UserRoleUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserRoleCreateOrConnectWithoutUsersInputSchema),z.lazy(() => UserRoleCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const BoardCreateNestedOneWithoutManagedByInputSchema: z.ZodType<Prisma.BoardCreateNestedOneWithoutManagedByInput> = z.object({
  create: z.union([ z.lazy(() => BoardCreateWithoutManagedByInputSchema),z.lazy(() => BoardUncheckedCreateWithoutManagedByInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => BoardCreateOrConnectWithoutManagedByInputSchema).optional(),
  connect: z.lazy(() => BoardWhereUniqueInputSchema).optional()
}).strict();

export const ToolUncheckedCreateNestedManyWithoutUserProfilesInputSchema: z.ZodType<Prisma.ToolUncheckedCreateNestedManyWithoutUserProfilesInput> = z.object({
  create: z.union([ z.lazy(() => ToolCreateWithoutUserProfilesInputSchema),z.lazy(() => ToolCreateWithoutUserProfilesInputSchema).array(),z.lazy(() => ToolUncheckedCreateWithoutUserProfilesInputSchema),z.lazy(() => ToolUncheckedCreateWithoutUserProfilesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ToolCreateOrConnectWithoutUserProfilesInputSchema),z.lazy(() => ToolCreateOrConnectWithoutUserProfilesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SessionUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ToolGroupUncheckedCreateNestedManyWithoutOwnersInputSchema: z.ZodType<Prisma.ToolGroupUncheckedCreateNestedManyWithoutOwnersInput> = z.object({
  create: z.union([ z.lazy(() => ToolGroupCreateWithoutOwnersInputSchema),z.lazy(() => ToolGroupCreateWithoutOwnersInputSchema).array(),z.lazy(() => ToolGroupUncheckedCreateWithoutOwnersInputSchema),z.lazy(() => ToolGroupUncheckedCreateWithoutOwnersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ToolGroupCreateOrConnectWithoutOwnersInputSchema),z.lazy(() => ToolGroupCreateOrConnectWithoutOwnersInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ToolGroupWhereUniqueInputSchema),z.lazy(() => ToolGroupWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserRoleUncheckedCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.UserRoleUncheckedCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => UserRoleCreateWithoutUsersInputSchema),z.lazy(() => UserRoleCreateWithoutUsersInputSchema).array(),z.lazy(() => UserRoleUncheckedCreateWithoutUsersInputSchema),z.lazy(() => UserRoleUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserRoleCreateOrConnectWithoutUsersInputSchema),z.lazy(() => UserRoleCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ToolUpdateManyWithoutUserProfilesNestedInputSchema: z.ZodType<Prisma.ToolUpdateManyWithoutUserProfilesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ToolCreateWithoutUserProfilesInputSchema),z.lazy(() => ToolCreateWithoutUserProfilesInputSchema).array(),z.lazy(() => ToolUncheckedCreateWithoutUserProfilesInputSchema),z.lazy(() => ToolUncheckedCreateWithoutUserProfilesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ToolCreateOrConnectWithoutUserProfilesInputSchema),z.lazy(() => ToolCreateOrConnectWithoutUserProfilesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ToolUpsertWithWhereUniqueWithoutUserProfilesInputSchema),z.lazy(() => ToolUpsertWithWhereUniqueWithoutUserProfilesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ToolUpdateWithWhereUniqueWithoutUserProfilesInputSchema),z.lazy(() => ToolUpdateWithWhereUniqueWithoutUserProfilesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ToolUpdateManyWithWhereWithoutUserProfilesInputSchema),z.lazy(() => ToolUpdateManyWithWhereWithoutUserProfilesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ToolScalarWhereInputSchema),z.lazy(() => ToolScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SessionUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.SessionUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ToolGroupUpdateManyWithoutOwnersNestedInputSchema: z.ZodType<Prisma.ToolGroupUpdateManyWithoutOwnersNestedInput> = z.object({
  create: z.union([ z.lazy(() => ToolGroupCreateWithoutOwnersInputSchema),z.lazy(() => ToolGroupCreateWithoutOwnersInputSchema).array(),z.lazy(() => ToolGroupUncheckedCreateWithoutOwnersInputSchema),z.lazy(() => ToolGroupUncheckedCreateWithoutOwnersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ToolGroupCreateOrConnectWithoutOwnersInputSchema),z.lazy(() => ToolGroupCreateOrConnectWithoutOwnersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ToolGroupUpsertWithWhereUniqueWithoutOwnersInputSchema),z.lazy(() => ToolGroupUpsertWithWhereUniqueWithoutOwnersInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => ToolGroupWhereUniqueInputSchema),z.lazy(() => ToolGroupWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ToolGroupWhereUniqueInputSchema),z.lazy(() => ToolGroupWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ToolGroupWhereUniqueInputSchema),z.lazy(() => ToolGroupWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ToolGroupWhereUniqueInputSchema),z.lazy(() => ToolGroupWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ToolGroupUpdateWithWhereUniqueWithoutOwnersInputSchema),z.lazy(() => ToolGroupUpdateWithWhereUniqueWithoutOwnersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ToolGroupUpdateManyWithWhereWithoutOwnersInputSchema),z.lazy(() => ToolGroupUpdateManyWithWhereWithoutOwnersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ToolGroupScalarWhereInputSchema),z.lazy(() => ToolGroupScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserRoleUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.UserRoleUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserRoleCreateWithoutUsersInputSchema),z.lazy(() => UserRoleCreateWithoutUsersInputSchema).array(),z.lazy(() => UserRoleUncheckedCreateWithoutUsersInputSchema),z.lazy(() => UserRoleUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserRoleCreateOrConnectWithoutUsersInputSchema),z.lazy(() => UserRoleCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserRoleUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => UserRoleUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserRoleUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => UserRoleUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserRoleUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => UserRoleUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserRoleScalarWhereInputSchema),z.lazy(() => UserRoleScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const BoardUpdateOneWithoutManagedByNestedInputSchema: z.ZodType<Prisma.BoardUpdateOneWithoutManagedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => BoardCreateWithoutManagedByInputSchema),z.lazy(() => BoardUncheckedCreateWithoutManagedByInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => BoardCreateOrConnectWithoutManagedByInputSchema).optional(),
  upsert: z.lazy(() => BoardUpsertWithoutManagedByInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => BoardWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => BoardWhereInputSchema) ]).optional(),
  connect: z.lazy(() => BoardWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => BoardUpdateToOneWithWhereWithoutManagedByInputSchema),z.lazy(() => BoardUpdateWithoutManagedByInputSchema),z.lazy(() => BoardUncheckedUpdateWithoutManagedByInputSchema) ]).optional(),
}).strict();

export const ToolUncheckedUpdateManyWithoutUserProfilesNestedInputSchema: z.ZodType<Prisma.ToolUncheckedUpdateManyWithoutUserProfilesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ToolCreateWithoutUserProfilesInputSchema),z.lazy(() => ToolCreateWithoutUserProfilesInputSchema).array(),z.lazy(() => ToolUncheckedCreateWithoutUserProfilesInputSchema),z.lazy(() => ToolUncheckedCreateWithoutUserProfilesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ToolCreateOrConnectWithoutUserProfilesInputSchema),z.lazy(() => ToolCreateOrConnectWithoutUserProfilesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ToolUpsertWithWhereUniqueWithoutUserProfilesInputSchema),z.lazy(() => ToolUpsertWithWhereUniqueWithoutUserProfilesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ToolWhereUniqueInputSchema),z.lazy(() => ToolWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ToolUpdateWithWhereUniqueWithoutUserProfilesInputSchema),z.lazy(() => ToolUpdateWithWhereUniqueWithoutUserProfilesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ToolUpdateManyWithWhereWithoutUserProfilesInputSchema),z.lazy(() => ToolUpdateManyWithWhereWithoutUserProfilesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ToolScalarWhereInputSchema),z.lazy(() => ToolScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SessionUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ToolGroupUncheckedUpdateManyWithoutOwnersNestedInputSchema: z.ZodType<Prisma.ToolGroupUncheckedUpdateManyWithoutOwnersNestedInput> = z.object({
  create: z.union([ z.lazy(() => ToolGroupCreateWithoutOwnersInputSchema),z.lazy(() => ToolGroupCreateWithoutOwnersInputSchema).array(),z.lazy(() => ToolGroupUncheckedCreateWithoutOwnersInputSchema),z.lazy(() => ToolGroupUncheckedCreateWithoutOwnersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ToolGroupCreateOrConnectWithoutOwnersInputSchema),z.lazy(() => ToolGroupCreateOrConnectWithoutOwnersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ToolGroupUpsertWithWhereUniqueWithoutOwnersInputSchema),z.lazy(() => ToolGroupUpsertWithWhereUniqueWithoutOwnersInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => ToolGroupWhereUniqueInputSchema),z.lazy(() => ToolGroupWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ToolGroupWhereUniqueInputSchema),z.lazy(() => ToolGroupWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ToolGroupWhereUniqueInputSchema),z.lazy(() => ToolGroupWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ToolGroupWhereUniqueInputSchema),z.lazy(() => ToolGroupWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ToolGroupUpdateWithWhereUniqueWithoutOwnersInputSchema),z.lazy(() => ToolGroupUpdateWithWhereUniqueWithoutOwnersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ToolGroupUpdateManyWithWhereWithoutOwnersInputSchema),z.lazy(() => ToolGroupUpdateManyWithWhereWithoutOwnersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ToolGroupScalarWhereInputSchema),z.lazy(() => ToolGroupScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserRoleUncheckedUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.UserRoleUncheckedUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserRoleCreateWithoutUsersInputSchema),z.lazy(() => UserRoleCreateWithoutUsersInputSchema).array(),z.lazy(() => UserRoleUncheckedCreateWithoutUsersInputSchema),z.lazy(() => UserRoleUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserRoleCreateOrConnectWithoutUsersInputSchema),z.lazy(() => UserRoleCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserRoleUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => UserRoleUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserRoleUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => UserRoleUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserRoleUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => UserRoleUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserRoleScalarWhereInputSchema),z.lazy(() => UserRoleScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserProfileCreateNestedManyWithoutRolesInputSchema: z.ZodType<Prisma.UserProfileCreateNestedManyWithoutRolesInput> = z.object({
  create: z.union([ z.lazy(() => UserProfileCreateWithoutRolesInputSchema),z.lazy(() => UserProfileCreateWithoutRolesInputSchema).array(),z.lazy(() => UserProfileUncheckedCreateWithoutRolesInputSchema),z.lazy(() => UserProfileUncheckedCreateWithoutRolesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserProfileCreateOrConnectWithoutRolesInputSchema),z.lazy(() => UserProfileCreateOrConnectWithoutRolesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserProfileUncheckedCreateNestedManyWithoutRolesInputSchema: z.ZodType<Prisma.UserProfileUncheckedCreateNestedManyWithoutRolesInput> = z.object({
  create: z.union([ z.lazy(() => UserProfileCreateWithoutRolesInputSchema),z.lazy(() => UserProfileCreateWithoutRolesInputSchema).array(),z.lazy(() => UserProfileUncheckedCreateWithoutRolesInputSchema),z.lazy(() => UserProfileUncheckedCreateWithoutRolesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserProfileCreateOrConnectWithoutRolesInputSchema),z.lazy(() => UserProfileCreateOrConnectWithoutRolesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserProfileUpdateManyWithoutRolesNestedInputSchema: z.ZodType<Prisma.UserProfileUpdateManyWithoutRolesNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserProfileCreateWithoutRolesInputSchema),z.lazy(() => UserProfileCreateWithoutRolesInputSchema).array(),z.lazy(() => UserProfileUncheckedCreateWithoutRolesInputSchema),z.lazy(() => UserProfileUncheckedCreateWithoutRolesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserProfileCreateOrConnectWithoutRolesInputSchema),z.lazy(() => UserProfileCreateOrConnectWithoutRolesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserProfileUpsertWithWhereUniqueWithoutRolesInputSchema),z.lazy(() => UserProfileUpsertWithWhereUniqueWithoutRolesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserProfileUpdateWithWhereUniqueWithoutRolesInputSchema),z.lazy(() => UserProfileUpdateWithWhereUniqueWithoutRolesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserProfileUpdateManyWithWhereWithoutRolesInputSchema),z.lazy(() => UserProfileUpdateManyWithWhereWithoutRolesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserProfileScalarWhereInputSchema),z.lazy(() => UserProfileScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserProfileUncheckedUpdateManyWithoutRolesNestedInputSchema: z.ZodType<Prisma.UserProfileUncheckedUpdateManyWithoutRolesNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserProfileCreateWithoutRolesInputSchema),z.lazy(() => UserProfileCreateWithoutRolesInputSchema).array(),z.lazy(() => UserProfileUncheckedCreateWithoutRolesInputSchema),z.lazy(() => UserProfileUncheckedCreateWithoutRolesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserProfileCreateOrConnectWithoutRolesInputSchema),z.lazy(() => UserProfileCreateOrConnectWithoutRolesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserProfileUpsertWithWhereUniqueWithoutRolesInputSchema),z.lazy(() => UserProfileUpsertWithWhereUniqueWithoutRolesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserProfileWhereUniqueInputSchema),z.lazy(() => UserProfileWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserProfileUpdateWithWhereUniqueWithoutRolesInputSchema),z.lazy(() => UserProfileUpdateWithWhereUniqueWithoutRolesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserProfileUpdateManyWithWhereWithoutRolesInputSchema),z.lazy(() => UserProfileUpdateManyWithWhereWithoutRolesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserProfileScalarWhereInputSchema),z.lazy(() => UserProfileScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserProfileCreateNestedOneWithoutSessionInputSchema: z.ZodType<Prisma.UserProfileCreateNestedOneWithoutSessionInput> = z.object({
  create: z.union([ z.lazy(() => UserProfileCreateWithoutSessionInputSchema),z.lazy(() => UserProfileUncheckedCreateWithoutSessionInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserProfileCreateOrConnectWithoutSessionInputSchema).optional(),
  connect: z.lazy(() => UserProfileWhereUniqueInputSchema).optional()
}).strict();

export const UserProfileUpdateOneRequiredWithoutSessionNestedInputSchema: z.ZodType<Prisma.UserProfileUpdateOneRequiredWithoutSessionNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserProfileCreateWithoutSessionInputSchema),z.lazy(() => UserProfileUncheckedCreateWithoutSessionInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserProfileCreateOrConnectWithoutSessionInputSchema).optional(),
  upsert: z.lazy(() => UserProfileUpsertWithoutSessionInputSchema).optional(),
  connect: z.lazy(() => UserProfileWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserProfileUpdateToOneWithWhereWithoutSessionInputSchema),z.lazy(() => UserProfileUpdateWithoutSessionInputSchema),z.lazy(() => UserProfileUncheckedUpdateWithoutSessionInputSchema) ]).optional(),
}).strict();

export const ChannelCreateNestedManyWithoutCategoryInputSchema: z.ZodType<Prisma.ChannelCreateNestedManyWithoutCategoryInput> = z.object({
  create: z.union([ z.lazy(() => ChannelCreateWithoutCategoryInputSchema),z.lazy(() => ChannelCreateWithoutCategoryInputSchema).array(),z.lazy(() => ChannelUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => ChannelUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChannelCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => ChannelCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChannelCreateManyCategoryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ChannelWhereUniqueInputSchema),z.lazy(() => ChannelWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ChannelUncheckedCreateNestedManyWithoutCategoryInputSchema: z.ZodType<Prisma.ChannelUncheckedCreateNestedManyWithoutCategoryInput> = z.object({
  create: z.union([ z.lazy(() => ChannelCreateWithoutCategoryInputSchema),z.lazy(() => ChannelCreateWithoutCategoryInputSchema).array(),z.lazy(() => ChannelUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => ChannelUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChannelCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => ChannelCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChannelCreateManyCategoryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ChannelWhereUniqueInputSchema),z.lazy(() => ChannelWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ChannelUpdateManyWithoutCategoryNestedInputSchema: z.ZodType<Prisma.ChannelUpdateManyWithoutCategoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => ChannelCreateWithoutCategoryInputSchema),z.lazy(() => ChannelCreateWithoutCategoryInputSchema).array(),z.lazy(() => ChannelUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => ChannelUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChannelCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => ChannelCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ChannelUpsertWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => ChannelUpsertWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChannelCreateManyCategoryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ChannelWhereUniqueInputSchema),z.lazy(() => ChannelWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ChannelWhereUniqueInputSchema),z.lazy(() => ChannelWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ChannelWhereUniqueInputSchema),z.lazy(() => ChannelWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ChannelWhereUniqueInputSchema),z.lazy(() => ChannelWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ChannelUpdateWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => ChannelUpdateWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ChannelUpdateManyWithWhereWithoutCategoryInputSchema),z.lazy(() => ChannelUpdateManyWithWhereWithoutCategoryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ChannelScalarWhereInputSchema),z.lazy(() => ChannelScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ChannelUncheckedUpdateManyWithoutCategoryNestedInputSchema: z.ZodType<Prisma.ChannelUncheckedUpdateManyWithoutCategoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => ChannelCreateWithoutCategoryInputSchema),z.lazy(() => ChannelCreateWithoutCategoryInputSchema).array(),z.lazy(() => ChannelUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => ChannelUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChannelCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => ChannelCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ChannelUpsertWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => ChannelUpsertWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChannelCreateManyCategoryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ChannelWhereUniqueInputSchema),z.lazy(() => ChannelWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ChannelWhereUniqueInputSchema),z.lazy(() => ChannelWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ChannelWhereUniqueInputSchema),z.lazy(() => ChannelWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ChannelWhereUniqueInputSchema),z.lazy(() => ChannelWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ChannelUpdateWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => ChannelUpdateWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ChannelUpdateManyWithWhereWithoutCategoryInputSchema),z.lazy(() => ChannelUpdateManyWithWhereWithoutCategoryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ChannelScalarWhereInputSchema),z.lazy(() => ChannelScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RegionCreateNestedOneWithoutChannelInputSchema: z.ZodType<Prisma.RegionCreateNestedOneWithoutChannelInput> = z.object({
  create: z.union([ z.lazy(() => RegionCreateWithoutChannelInputSchema),z.lazy(() => RegionUncheckedCreateWithoutChannelInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RegionCreateOrConnectWithoutChannelInputSchema).optional(),
  connect: z.lazy(() => RegionWhereUniqueInputSchema).optional()
}).strict();

export const CountryCreateNestedManyWithoutChannelInputSchema: z.ZodType<Prisma.CountryCreateNestedManyWithoutChannelInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutChannelInputSchema),z.lazy(() => CountryCreateWithoutChannelInputSchema).array(),z.lazy(() => CountryUncheckedCreateWithoutChannelInputSchema),z.lazy(() => CountryUncheckedCreateWithoutChannelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CountryCreateOrConnectWithoutChannelInputSchema),z.lazy(() => CountryCreateOrConnectWithoutChannelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CountryCreateManyChannelInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ChannelCategoryCreateNestedOneWithoutChannelInputSchema: z.ZodType<Prisma.ChannelCategoryCreateNestedOneWithoutChannelInput> = z.object({
  create: z.union([ z.lazy(() => ChannelCategoryCreateWithoutChannelInputSchema),z.lazy(() => ChannelCategoryUncheckedCreateWithoutChannelInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ChannelCategoryCreateOrConnectWithoutChannelInputSchema).optional(),
  connect: z.lazy(() => ChannelCategoryWhereUniqueInputSchema).optional()
}).strict();

export const CountryUncheckedCreateNestedManyWithoutChannelInputSchema: z.ZodType<Prisma.CountryUncheckedCreateNestedManyWithoutChannelInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutChannelInputSchema),z.lazy(() => CountryCreateWithoutChannelInputSchema).array(),z.lazy(() => CountryUncheckedCreateWithoutChannelInputSchema),z.lazy(() => CountryUncheckedCreateWithoutChannelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CountryCreateOrConnectWithoutChannelInputSchema),z.lazy(() => CountryCreateOrConnectWithoutChannelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CountryCreateManyChannelInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RegionUpdateOneWithoutChannelNestedInputSchema: z.ZodType<Prisma.RegionUpdateOneWithoutChannelNestedInput> = z.object({
  create: z.union([ z.lazy(() => RegionCreateWithoutChannelInputSchema),z.lazy(() => RegionUncheckedCreateWithoutChannelInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RegionCreateOrConnectWithoutChannelInputSchema).optional(),
  upsert: z.lazy(() => RegionUpsertWithoutChannelInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => RegionWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => RegionWhereInputSchema) ]).optional(),
  connect: z.lazy(() => RegionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RegionUpdateToOneWithWhereWithoutChannelInputSchema),z.lazy(() => RegionUpdateWithoutChannelInputSchema),z.lazy(() => RegionUncheckedUpdateWithoutChannelInputSchema) ]).optional(),
}).strict();

export const CountryUpdateManyWithoutChannelNestedInputSchema: z.ZodType<Prisma.CountryUpdateManyWithoutChannelNestedInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutChannelInputSchema),z.lazy(() => CountryCreateWithoutChannelInputSchema).array(),z.lazy(() => CountryUncheckedCreateWithoutChannelInputSchema),z.lazy(() => CountryUncheckedCreateWithoutChannelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CountryCreateOrConnectWithoutChannelInputSchema),z.lazy(() => CountryCreateOrConnectWithoutChannelInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CountryUpsertWithWhereUniqueWithoutChannelInputSchema),z.lazy(() => CountryUpsertWithWhereUniqueWithoutChannelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CountryCreateManyChannelInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CountryUpdateWithWhereUniqueWithoutChannelInputSchema),z.lazy(() => CountryUpdateWithWhereUniqueWithoutChannelInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CountryUpdateManyWithWhereWithoutChannelInputSchema),z.lazy(() => CountryUpdateManyWithWhereWithoutChannelInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CountryScalarWhereInputSchema),z.lazy(() => CountryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ChannelCategoryUpdateOneWithoutChannelNestedInputSchema: z.ZodType<Prisma.ChannelCategoryUpdateOneWithoutChannelNestedInput> = z.object({
  create: z.union([ z.lazy(() => ChannelCategoryCreateWithoutChannelInputSchema),z.lazy(() => ChannelCategoryUncheckedCreateWithoutChannelInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ChannelCategoryCreateOrConnectWithoutChannelInputSchema).optional(),
  upsert: z.lazy(() => ChannelCategoryUpsertWithoutChannelInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => ChannelCategoryWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => ChannelCategoryWhereInputSchema) ]).optional(),
  connect: z.lazy(() => ChannelCategoryWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ChannelCategoryUpdateToOneWithWhereWithoutChannelInputSchema),z.lazy(() => ChannelCategoryUpdateWithoutChannelInputSchema),z.lazy(() => ChannelCategoryUncheckedUpdateWithoutChannelInputSchema) ]).optional(),
}).strict();

export const CountryUncheckedUpdateManyWithoutChannelNestedInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateManyWithoutChannelNestedInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutChannelInputSchema),z.lazy(() => CountryCreateWithoutChannelInputSchema).array(),z.lazy(() => CountryUncheckedCreateWithoutChannelInputSchema),z.lazy(() => CountryUncheckedCreateWithoutChannelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CountryCreateOrConnectWithoutChannelInputSchema),z.lazy(() => CountryCreateOrConnectWithoutChannelInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CountryUpsertWithWhereUniqueWithoutChannelInputSchema),z.lazy(() => CountryUpsertWithWhereUniqueWithoutChannelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CountryCreateManyChannelInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CountryUpdateWithWhereUniqueWithoutChannelInputSchema),z.lazy(() => CountryUpdateWithWhereUniqueWithoutChannelInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CountryUpdateManyWithWhereWithoutChannelInputSchema),z.lazy(() => CountryUpdateManyWithWhereWithoutChannelInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CountryScalarWhereInputSchema),z.lazy(() => CountryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ToolCreateNestedOneWithoutBlobInputSchema: z.ZodType<Prisma.ToolCreateNestedOneWithoutBlobInput> = z.object({
  create: z.union([ z.lazy(() => ToolCreateWithoutBlobInputSchema),z.lazy(() => ToolUncheckedCreateWithoutBlobInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ToolCreateOrConnectWithoutBlobInputSchema).optional(),
  connect: z.lazy(() => ToolWhereUniqueInputSchema).optional()
}).strict();

export const BlobResizedCreateNestedManyWithoutBlobInputSchema: z.ZodType<Prisma.BlobResizedCreateNestedManyWithoutBlobInput> = z.object({
  create: z.union([ z.lazy(() => BlobResizedCreateWithoutBlobInputSchema),z.lazy(() => BlobResizedCreateWithoutBlobInputSchema).array(),z.lazy(() => BlobResizedUncheckedCreateWithoutBlobInputSchema),z.lazy(() => BlobResizedUncheckedCreateWithoutBlobInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BlobResizedCreateOrConnectWithoutBlobInputSchema),z.lazy(() => BlobResizedCreateOrConnectWithoutBlobInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BlobResizedCreateManyBlobInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => BlobResizedWhereUniqueInputSchema),z.lazy(() => BlobResizedWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const BlobResizedUncheckedCreateNestedManyWithoutBlobInputSchema: z.ZodType<Prisma.BlobResizedUncheckedCreateNestedManyWithoutBlobInput> = z.object({
  create: z.union([ z.lazy(() => BlobResizedCreateWithoutBlobInputSchema),z.lazy(() => BlobResizedCreateWithoutBlobInputSchema).array(),z.lazy(() => BlobResizedUncheckedCreateWithoutBlobInputSchema),z.lazy(() => BlobResizedUncheckedCreateWithoutBlobInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BlobResizedCreateOrConnectWithoutBlobInputSchema),z.lazy(() => BlobResizedCreateOrConnectWithoutBlobInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BlobResizedCreateManyBlobInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => BlobResizedWhereUniqueInputSchema),z.lazy(() => BlobResizedWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const BytesFieldUpdateOperationsInputSchema: z.ZodType<Prisma.BytesFieldUpdateOperationsInput> = z.object({
  set: z.instanceof(Buffer).optional()
}).strict();

export const ToolUpdateOneWithoutBlobNestedInputSchema: z.ZodType<Prisma.ToolUpdateOneWithoutBlobNestedInput> = z.object({
  create: z.union([ z.lazy(() => ToolCreateWithoutBlobInputSchema),z.lazy(() => ToolUncheckedCreateWithoutBlobInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ToolCreateOrConnectWithoutBlobInputSchema).optional(),
  upsert: z.lazy(() => ToolUpsertWithoutBlobInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => ToolWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => ToolWhereInputSchema) ]).optional(),
  connect: z.lazy(() => ToolWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ToolUpdateToOneWithWhereWithoutBlobInputSchema),z.lazy(() => ToolUpdateWithoutBlobInputSchema),z.lazy(() => ToolUncheckedUpdateWithoutBlobInputSchema) ]).optional(),
}).strict();

export const BlobResizedUpdateManyWithoutBlobNestedInputSchema: z.ZodType<Prisma.BlobResizedUpdateManyWithoutBlobNestedInput> = z.object({
  create: z.union([ z.lazy(() => BlobResizedCreateWithoutBlobInputSchema),z.lazy(() => BlobResizedCreateWithoutBlobInputSchema).array(),z.lazy(() => BlobResizedUncheckedCreateWithoutBlobInputSchema),z.lazy(() => BlobResizedUncheckedCreateWithoutBlobInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BlobResizedCreateOrConnectWithoutBlobInputSchema),z.lazy(() => BlobResizedCreateOrConnectWithoutBlobInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => BlobResizedUpsertWithWhereUniqueWithoutBlobInputSchema),z.lazy(() => BlobResizedUpsertWithWhereUniqueWithoutBlobInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BlobResizedCreateManyBlobInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => BlobResizedWhereUniqueInputSchema),z.lazy(() => BlobResizedWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => BlobResizedWhereUniqueInputSchema),z.lazy(() => BlobResizedWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => BlobResizedWhereUniqueInputSchema),z.lazy(() => BlobResizedWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => BlobResizedWhereUniqueInputSchema),z.lazy(() => BlobResizedWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => BlobResizedUpdateWithWhereUniqueWithoutBlobInputSchema),z.lazy(() => BlobResizedUpdateWithWhereUniqueWithoutBlobInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => BlobResizedUpdateManyWithWhereWithoutBlobInputSchema),z.lazy(() => BlobResizedUpdateManyWithWhereWithoutBlobInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => BlobResizedScalarWhereInputSchema),z.lazy(() => BlobResizedScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const BlobResizedUncheckedUpdateManyWithoutBlobNestedInputSchema: z.ZodType<Prisma.BlobResizedUncheckedUpdateManyWithoutBlobNestedInput> = z.object({
  create: z.union([ z.lazy(() => BlobResizedCreateWithoutBlobInputSchema),z.lazy(() => BlobResizedCreateWithoutBlobInputSchema).array(),z.lazy(() => BlobResizedUncheckedCreateWithoutBlobInputSchema),z.lazy(() => BlobResizedUncheckedCreateWithoutBlobInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BlobResizedCreateOrConnectWithoutBlobInputSchema),z.lazy(() => BlobResizedCreateOrConnectWithoutBlobInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => BlobResizedUpsertWithWhereUniqueWithoutBlobInputSchema),z.lazy(() => BlobResizedUpsertWithWhereUniqueWithoutBlobInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BlobResizedCreateManyBlobInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => BlobResizedWhereUniqueInputSchema),z.lazy(() => BlobResizedWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => BlobResizedWhereUniqueInputSchema),z.lazy(() => BlobResizedWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => BlobResizedWhereUniqueInputSchema),z.lazy(() => BlobResizedWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => BlobResizedWhereUniqueInputSchema),z.lazy(() => BlobResizedWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => BlobResizedUpdateWithWhereUniqueWithoutBlobInputSchema),z.lazy(() => BlobResizedUpdateWithWhereUniqueWithoutBlobInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => BlobResizedUpdateManyWithWhereWithoutBlobInputSchema),z.lazy(() => BlobResizedUpdateManyWithWhereWithoutBlobInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => BlobResizedScalarWhereInputSchema),z.lazy(() => BlobResizedScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const BlobCreateNestedOneWithoutBlobResizedInputSchema: z.ZodType<Prisma.BlobCreateNestedOneWithoutBlobResizedInput> = z.object({
  create: z.union([ z.lazy(() => BlobCreateWithoutBlobResizedInputSchema),z.lazy(() => BlobUncheckedCreateWithoutBlobResizedInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => BlobCreateOrConnectWithoutBlobResizedInputSchema).optional(),
  connect: z.lazy(() => BlobWhereUniqueInputSchema).optional()
}).strict();

export const BlobUpdateOneRequiredWithoutBlobResizedNestedInputSchema: z.ZodType<Prisma.BlobUpdateOneRequiredWithoutBlobResizedNestedInput> = z.object({
  create: z.union([ z.lazy(() => BlobCreateWithoutBlobResizedInputSchema),z.lazy(() => BlobUncheckedCreateWithoutBlobResizedInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => BlobCreateOrConnectWithoutBlobResizedInputSchema).optional(),
  upsert: z.lazy(() => BlobUpsertWithoutBlobResizedInputSchema).optional(),
  connect: z.lazy(() => BlobWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => BlobUpdateToOneWithWhereWithoutBlobResizedInputSchema),z.lazy(() => BlobUpdateWithoutBlobResizedInputSchema),z.lazy(() => BlobUncheckedUpdateWithoutBlobResizedInputSchema) ]).optional(),
}).strict();

export const NestedIntFilterSchema: z.ZodType<Prisma.NestedIntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const NestedDateTimeFilterSchema: z.ZodType<Prisma.NestedDateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const NestedStringNullableFilterSchema: z.ZodType<Prisma.NestedStringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeNullableFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedStringFilterSchema: z.ZodType<Prisma.NestedStringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const NestedBoolFilterSchema: z.ZodType<Prisma.NestedBoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const NestedIntWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const NestedFloatFilterSchema: z.ZodType<Prisma.NestedFloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const NestedDateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const NestedStringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const NestedIntNullableFilterSchema: z.ZodType<Prisma.NestedIntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const NestedStringWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const NestedJsonNullableFilterSchema: z.ZodType<Prisma.NestedJsonNullableFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional()
}).strict();

export const NestedBoolWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const NestedIntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const NestedFloatNullableFilterSchema: z.ZodType<Prisma.NestedFloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedBoolNullableFilterSchema: z.ZodType<Prisma.NestedBoolNullableFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedBoolNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolNullableWithAggregatesFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolNullableFilterSchema).optional()
}).strict();

export const NestedEnumStatusFilterSchema: z.ZodType<Prisma.NestedEnumStatusFilter> = z.object({
  equals: z.lazy(() => StatusSchema).optional(),
  in: z.lazy(() => StatusSchema).array().optional(),
  notIn: z.lazy(() => StatusSchema).array().optional(),
  not: z.union([ z.lazy(() => StatusSchema),z.lazy(() => NestedEnumStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => StatusSchema).optional(),
  in: z.lazy(() => StatusSchema).array().optional(),
  notIn: z.lazy(() => StatusSchema).array().optional(),
  not: z.union([ z.lazy(() => StatusSchema),z.lazy(() => NestedEnumStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumStatusFilterSchema).optional()
}).strict();

export const NestedBytesFilterSchema: z.ZodType<Prisma.NestedBytesFilter> = z.object({
  equals: z.instanceof(Buffer).optional(),
  in: z.instanceof(Buffer).array().optional(),
  notIn: z.instanceof(Buffer).array().optional(),
  not: z.union([ z.instanceof(Buffer),z.lazy(() => NestedBytesFilterSchema) ]).optional(),
}).strict();

export const NestedBytesWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBytesWithAggregatesFilter> = z.object({
  equals: z.instanceof(Buffer).optional(),
  in: z.instanceof(Buffer).array().optional(),
  notIn: z.instanceof(Buffer).array().optional(),
  not: z.union([ z.instanceof(Buffer),z.lazy(() => NestedBytesWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBytesFilterSchema).optional(),
  _max: z.lazy(() => NestedBytesFilterSchema).optional()
}).strict();

export const BoardCreateWithoutForksInputSchema: z.ZodType<Prisma.BoardCreateWithoutForksInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.string().optional().nullable(),
  layout: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  groupOwnerId: z.string().optional().nullable(),
  groupViewerId: z.string().optional().nullable(),
  parent: z.lazy(() => BoardCreateNestedOneWithoutForksInputSchema).optional(),
  managedBy: z.lazy(() => UserProfileCreateNestedManyWithoutBoardInputSchema).optional()
}).strict();

export const BoardUncheckedCreateWithoutForksInputSchema: z.ZodType<Prisma.BoardUncheckedCreateWithoutForksInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.string().optional().nullable(),
  layout: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  parentId: z.number().int().optional().nullable(),
  groupOwnerId: z.string().optional().nullable(),
  groupViewerId: z.string().optional().nullable(),
  managedBy: z.lazy(() => UserProfileUncheckedCreateNestedManyWithoutBoardInputSchema).optional()
}).strict();

export const BoardCreateOrConnectWithoutForksInputSchema: z.ZodType<Prisma.BoardCreateOrConnectWithoutForksInput> = z.object({
  where: z.lazy(() => BoardWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => BoardCreateWithoutForksInputSchema),z.lazy(() => BoardUncheckedCreateWithoutForksInputSchema) ]),
}).strict();

export const BoardCreateWithoutParentInputSchema: z.ZodType<Prisma.BoardCreateWithoutParentInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.string().optional().nullable(),
  layout: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  groupOwnerId: z.string().optional().nullable(),
  groupViewerId: z.string().optional().nullable(),
  forks: z.lazy(() => BoardCreateNestedManyWithoutParentInputSchema).optional(),
  managedBy: z.lazy(() => UserProfileCreateNestedManyWithoutBoardInputSchema).optional()
}).strict();

export const BoardUncheckedCreateWithoutParentInputSchema: z.ZodType<Prisma.BoardUncheckedCreateWithoutParentInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.string().optional().nullable(),
  layout: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  groupOwnerId: z.string().optional().nullable(),
  groupViewerId: z.string().optional().nullable(),
  forks: z.lazy(() => BoardUncheckedCreateNestedManyWithoutParentInputSchema).optional(),
  managedBy: z.lazy(() => UserProfileUncheckedCreateNestedManyWithoutBoardInputSchema).optional()
}).strict();

export const BoardCreateOrConnectWithoutParentInputSchema: z.ZodType<Prisma.BoardCreateOrConnectWithoutParentInput> = z.object({
  where: z.lazy(() => BoardWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => BoardCreateWithoutParentInputSchema),z.lazy(() => BoardUncheckedCreateWithoutParentInputSchema) ]),
}).strict();

export const BoardCreateManyParentInputEnvelopeSchema: z.ZodType<Prisma.BoardCreateManyParentInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => BoardCreateManyParentInputSchema),z.lazy(() => BoardCreateManyParentInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserProfileCreateWithoutBoardInputSchema: z.ZodType<Prisma.UserProfileCreateWithoutBoardInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  koksmat_masterdataref: z.string().optional().nullable(),
  koksmat_masterdata_id: z.string().optional().nullable(),
  koksmat_masterdata_etag: z.string().optional().nullable(),
  name: z.string(),
  displayName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  email: z.string(),
  status: z.string().optional().nullable(),
  company: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  companykey: z.string().optional().nullable(),
  isExternal: z.boolean().optional(),
  CurrentEmail: z.string().optional().nullable(),
  OldEmail: z.string().optional().nullable(),
  OnPremisesId: z.string().optional().nullable(),
  lastLogin: z.coerce.date().optional().nullable(),
  language: z.string().optional().nullable(),
  homePage: z.string().optional().nullable(),
  tools: z.lazy(() => ToolCreateNestedManyWithoutUserProfilesInputSchema).optional(),
  Session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  ToolGroup: z.lazy(() => ToolGroupCreateNestedManyWithoutOwnersInputSchema).optional(),
  roles: z.lazy(() => UserRoleCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UserProfileUncheckedCreateWithoutBoardInputSchema: z.ZodType<Prisma.UserProfileUncheckedCreateWithoutBoardInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  koksmat_masterdataref: z.string().optional().nullable(),
  koksmat_masterdata_id: z.string().optional().nullable(),
  koksmat_masterdata_etag: z.string().optional().nullable(),
  name: z.string(),
  displayName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  email: z.string(),
  status: z.string().optional().nullable(),
  company: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  companykey: z.string().optional().nullable(),
  isExternal: z.boolean().optional(),
  CurrentEmail: z.string().optional().nullable(),
  OldEmail: z.string().optional().nullable(),
  OnPremisesId: z.string().optional().nullable(),
  lastLogin: z.coerce.date().optional().nullable(),
  language: z.string().optional().nullable(),
  homePage: z.string().optional().nullable(),
  tools: z.lazy(() => ToolUncheckedCreateNestedManyWithoutUserProfilesInputSchema).optional(),
  Session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ToolGroup: z.lazy(() => ToolGroupUncheckedCreateNestedManyWithoutOwnersInputSchema).optional(),
  roles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UserProfileCreateOrConnectWithoutBoardInputSchema: z.ZodType<Prisma.UserProfileCreateOrConnectWithoutBoardInput> = z.object({
  where: z.lazy(() => UserProfileWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserProfileCreateWithoutBoardInputSchema),z.lazy(() => UserProfileUncheckedCreateWithoutBoardInputSchema) ]),
}).strict();

export const UserProfileCreateManyBoardInputEnvelopeSchema: z.ZodType<Prisma.UserProfileCreateManyBoardInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => UserProfileCreateManyBoardInputSchema),z.lazy(() => UserProfileCreateManyBoardInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const BoardUpsertWithoutForksInputSchema: z.ZodType<Prisma.BoardUpsertWithoutForksInput> = z.object({
  update: z.union([ z.lazy(() => BoardUpdateWithoutForksInputSchema),z.lazy(() => BoardUncheckedUpdateWithoutForksInputSchema) ]),
  create: z.union([ z.lazy(() => BoardCreateWithoutForksInputSchema),z.lazy(() => BoardUncheckedCreateWithoutForksInputSchema) ]),
  where: z.lazy(() => BoardWhereInputSchema).optional()
}).strict();

export const BoardUpdateToOneWithWhereWithoutForksInputSchema: z.ZodType<Prisma.BoardUpdateToOneWithWhereWithoutForksInput> = z.object({
  where: z.lazy(() => BoardWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => BoardUpdateWithoutForksInputSchema),z.lazy(() => BoardUncheckedUpdateWithoutForksInputSchema) ]),
}).strict();

export const BoardUpdateWithoutForksInputSchema: z.ZodType<Prisma.BoardUpdateWithoutForksInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  layout: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  groupOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupViewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parent: z.lazy(() => BoardUpdateOneWithoutForksNestedInputSchema).optional(),
  managedBy: z.lazy(() => UserProfileUpdateManyWithoutBoardNestedInputSchema).optional()
}).strict();

export const BoardUncheckedUpdateWithoutForksInputSchema: z.ZodType<Prisma.BoardUncheckedUpdateWithoutForksInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  layout: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  parentId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupViewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  managedBy: z.lazy(() => UserProfileUncheckedUpdateManyWithoutBoardNestedInputSchema).optional()
}).strict();

export const BoardUpsertWithWhereUniqueWithoutParentInputSchema: z.ZodType<Prisma.BoardUpsertWithWhereUniqueWithoutParentInput> = z.object({
  where: z.lazy(() => BoardWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => BoardUpdateWithoutParentInputSchema),z.lazy(() => BoardUncheckedUpdateWithoutParentInputSchema) ]),
  create: z.union([ z.lazy(() => BoardCreateWithoutParentInputSchema),z.lazy(() => BoardUncheckedCreateWithoutParentInputSchema) ]),
}).strict();

export const BoardUpdateWithWhereUniqueWithoutParentInputSchema: z.ZodType<Prisma.BoardUpdateWithWhereUniqueWithoutParentInput> = z.object({
  where: z.lazy(() => BoardWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => BoardUpdateWithoutParentInputSchema),z.lazy(() => BoardUncheckedUpdateWithoutParentInputSchema) ]),
}).strict();

export const BoardUpdateManyWithWhereWithoutParentInputSchema: z.ZodType<Prisma.BoardUpdateManyWithWhereWithoutParentInput> = z.object({
  where: z.lazy(() => BoardScalarWhereInputSchema),
  data: z.union([ z.lazy(() => BoardUpdateManyMutationInputSchema),z.lazy(() => BoardUncheckedUpdateManyWithoutParentInputSchema) ]),
}).strict();

export const BoardScalarWhereInputSchema: z.ZodType<Prisma.BoardScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => BoardScalarWhereInputSchema),z.lazy(() => BoardScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => BoardScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BoardScalarWhereInputSchema),z.lazy(() => BoardScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  status: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  layout: z.lazy(() => JsonNullableFilterSchema).optional(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  parentId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  groupOwnerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  groupViewerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const UserProfileUpsertWithWhereUniqueWithoutBoardInputSchema: z.ZodType<Prisma.UserProfileUpsertWithWhereUniqueWithoutBoardInput> = z.object({
  where: z.lazy(() => UserProfileWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserProfileUpdateWithoutBoardInputSchema),z.lazy(() => UserProfileUncheckedUpdateWithoutBoardInputSchema) ]),
  create: z.union([ z.lazy(() => UserProfileCreateWithoutBoardInputSchema),z.lazy(() => UserProfileUncheckedCreateWithoutBoardInputSchema) ]),
}).strict();

export const UserProfileUpdateWithWhereUniqueWithoutBoardInputSchema: z.ZodType<Prisma.UserProfileUpdateWithWhereUniqueWithoutBoardInput> = z.object({
  where: z.lazy(() => UserProfileWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserProfileUpdateWithoutBoardInputSchema),z.lazy(() => UserProfileUncheckedUpdateWithoutBoardInputSchema) ]),
}).strict();

export const UserProfileUpdateManyWithWhereWithoutBoardInputSchema: z.ZodType<Prisma.UserProfileUpdateManyWithWhereWithoutBoardInput> = z.object({
  where: z.lazy(() => UserProfileScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserProfileUpdateManyMutationInputSchema),z.lazy(() => UserProfileUncheckedUpdateManyWithoutBoardInputSchema) ]),
}).strict();

export const UserProfileScalarWhereInputSchema: z.ZodType<Prisma.UserProfileScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserProfileScalarWhereInputSchema),z.lazy(() => UserProfileScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserProfileScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserProfileScalarWhereInputSchema),z.lazy(() => UserProfileScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  displayName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  company: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  country: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  companykey: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isExternal: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  CurrentEmail: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OldEmail: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OnPremisesId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  boardId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  lastLogin: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  language: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  homePage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const ToolCreateWithoutCategoryInputSchema: z.ZodType<Prisma.ToolCreateWithoutCategoryInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  koksmat_masterdataref: z.string().optional().nullable(),
  koksmat_masterdata_id: z.string().optional().nullable(),
  koksmat_masterdata_etag: z.string().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.string(),
  status: z.string().optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.string().optional().nullable(),
  uploaded_icon: z.string().optional().nullable(),
  groupOwnerId: z.string().optional().nullable(),
  groupViewerId: z.string().optional().nullable(),
  purposes: z.lazy(() => PurposeCreateNestedManyWithoutToolsInputSchema).optional(),
  userProfiles: z.lazy(() => UserProfileCreateNestedManyWithoutToolsInputSchema).optional(),
  countries: z.lazy(() => CountryCreateNestedManyWithoutToolsInputSchema).optional(),
  ToolTexts: z.lazy(() => ToolTextsCreateNestedManyWithoutToolInputSchema).optional(),
  parent: z.lazy(() => ToolCreateNestedOneWithoutForksInputSchema).optional(),
  forks: z.lazy(() => ToolCreateNestedManyWithoutParentInputSchema).optional(),
  Blob: z.lazy(() => BlobCreateNestedManyWithoutSource_toolInputSchema).optional()
}).strict();

export const ToolUncheckedCreateWithoutCategoryInputSchema: z.ZodType<Prisma.ToolUncheckedCreateWithoutCategoryInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  koksmat_masterdataref: z.string().optional().nullable(),
  koksmat_masterdata_id: z.string().optional().nullable(),
  koksmat_masterdata_etag: z.string().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.string(),
  status: z.string().optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.string().optional().nullable(),
  uploaded_icon: z.string().optional().nullable(),
  parentId: z.number().int().optional().nullable(),
  groupOwnerId: z.string().optional().nullable(),
  groupViewerId: z.string().optional().nullable(),
  purposes: z.lazy(() => PurposeUncheckedCreateNestedManyWithoutToolsInputSchema).optional(),
  userProfiles: z.lazy(() => UserProfileUncheckedCreateNestedManyWithoutToolsInputSchema).optional(),
  countries: z.lazy(() => CountryUncheckedCreateNestedManyWithoutToolsInputSchema).optional(),
  ToolTexts: z.lazy(() => ToolTextsUncheckedCreateNestedManyWithoutToolInputSchema).optional(),
  forks: z.lazy(() => ToolUncheckedCreateNestedManyWithoutParentInputSchema).optional(),
  Blob: z.lazy(() => BlobUncheckedCreateNestedManyWithoutSource_toolInputSchema).optional()
}).strict();

export const ToolCreateOrConnectWithoutCategoryInputSchema: z.ZodType<Prisma.ToolCreateOrConnectWithoutCategoryInput> = z.object({
  where: z.lazy(() => ToolWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ToolCreateWithoutCategoryInputSchema),z.lazy(() => ToolUncheckedCreateWithoutCategoryInputSchema) ]),
}).strict();

export const ToolCreateManyCategoryInputEnvelopeSchema: z.ZodType<Prisma.ToolCreateManyCategoryInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ToolCreateManyCategoryInputSchema),z.lazy(() => ToolCreateManyCategoryInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ToolUpsertWithWhereUniqueWithoutCategoryInputSchema: z.ZodType<Prisma.ToolUpsertWithWhereUniqueWithoutCategoryInput> = z.object({
  where: z.lazy(() => ToolWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ToolUpdateWithoutCategoryInputSchema),z.lazy(() => ToolUncheckedUpdateWithoutCategoryInputSchema) ]),
  create: z.union([ z.lazy(() => ToolCreateWithoutCategoryInputSchema),z.lazy(() => ToolUncheckedCreateWithoutCategoryInputSchema) ]),
}).strict();

export const ToolUpdateWithWhereUniqueWithoutCategoryInputSchema: z.ZodType<Prisma.ToolUpdateWithWhereUniqueWithoutCategoryInput> = z.object({
  where: z.lazy(() => ToolWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ToolUpdateWithoutCategoryInputSchema),z.lazy(() => ToolUncheckedUpdateWithoutCategoryInputSchema) ]),
}).strict();

export const ToolUpdateManyWithWhereWithoutCategoryInputSchema: z.ZodType<Prisma.ToolUpdateManyWithWhereWithoutCategoryInput> = z.object({
  where: z.lazy(() => ToolScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ToolUpdateManyMutationInputSchema),z.lazy(() => ToolUncheckedUpdateManyWithoutCategoryInputSchema) ]),
}).strict();

export const ToolScalarWhereInputSchema: z.ZodType<Prisma.ToolScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ToolScalarWhereInputSchema),z.lazy(() => ToolScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ToolScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ToolScalarWhereInputSchema),z.lazy(() => ToolScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  documents: z.lazy(() => JsonNullableFilterSchema).optional(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  icon: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  uploaded_icon: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  categoryId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  parentId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  groupOwnerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  groupViewerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const RegionCreateWithoutCountryInputSchema: z.ZodType<Prisma.RegionCreateWithoutCountryInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortOrder: z.string().optional().nullable(),
  Channel: z.lazy(() => ChannelCreateNestedManyWithoutRegionInputSchema).optional()
}).strict();

export const RegionUncheckedCreateWithoutCountryInputSchema: z.ZodType<Prisma.RegionUncheckedCreateWithoutCountryInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortOrder: z.string().optional().nullable(),
  Channel: z.lazy(() => ChannelUncheckedCreateNestedManyWithoutRegionInputSchema).optional()
}).strict();

export const RegionCreateOrConnectWithoutCountryInputSchema: z.ZodType<Prisma.RegionCreateOrConnectWithoutCountryInput> = z.object({
  where: z.lazy(() => RegionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RegionCreateWithoutCountryInputSchema),z.lazy(() => RegionUncheckedCreateWithoutCountryInputSchema) ]),
}).strict();

export const ChannelCreateWithoutCountriesInputSchema: z.ZodType<Prisma.ChannelCreateWithoutCountriesInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  mandatory: z.boolean().optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable(),
  externalGroup: z.string().optional().nullable(),
  region: z.lazy(() => RegionCreateNestedOneWithoutChannelInputSchema).optional(),
  category: z.lazy(() => ChannelCategoryCreateNestedOneWithoutChannelInputSchema).optional()
}).strict();

export const ChannelUncheckedCreateWithoutCountriesInputSchema: z.ZodType<Prisma.ChannelUncheckedCreateWithoutCountriesInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  mandatory: z.boolean().optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable(),
  regionId: z.number().int().optional().nullable(),
  externalGroup: z.string().optional().nullable(),
  categoryId: z.number().int().optional().nullable()
}).strict();

export const ChannelCreateOrConnectWithoutCountriesInputSchema: z.ZodType<Prisma.ChannelCreateOrConnectWithoutCountriesInput> = z.object({
  where: z.lazy(() => ChannelWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ChannelCreateWithoutCountriesInputSchema),z.lazy(() => ChannelUncheckedCreateWithoutCountriesInputSchema) ]),
}).strict();

export const ToolCreateWithoutCountriesInputSchema: z.ZodType<Prisma.ToolCreateWithoutCountriesInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  koksmat_masterdataref: z.string().optional().nullable(),
  koksmat_masterdata_id: z.string().optional().nullable(),
  koksmat_masterdata_etag: z.string().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.string(),
  status: z.string().optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.string().optional().nullable(),
  uploaded_icon: z.string().optional().nullable(),
  groupOwnerId: z.string().optional().nullable(),
  groupViewerId: z.string().optional().nullable(),
  category: z.lazy(() => CategoryCreateNestedOneWithoutToolInputSchema),
  purposes: z.lazy(() => PurposeCreateNestedManyWithoutToolsInputSchema).optional(),
  userProfiles: z.lazy(() => UserProfileCreateNestedManyWithoutToolsInputSchema).optional(),
  ToolTexts: z.lazy(() => ToolTextsCreateNestedManyWithoutToolInputSchema).optional(),
  parent: z.lazy(() => ToolCreateNestedOneWithoutForksInputSchema).optional(),
  forks: z.lazy(() => ToolCreateNestedManyWithoutParentInputSchema).optional(),
  Blob: z.lazy(() => BlobCreateNestedManyWithoutSource_toolInputSchema).optional()
}).strict();

export const ToolUncheckedCreateWithoutCountriesInputSchema: z.ZodType<Prisma.ToolUncheckedCreateWithoutCountriesInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  koksmat_masterdataref: z.string().optional().nullable(),
  koksmat_masterdata_id: z.string().optional().nullable(),
  koksmat_masterdata_etag: z.string().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.string(),
  status: z.string().optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.string().optional().nullable(),
  uploaded_icon: z.string().optional().nullable(),
  categoryId: z.number().int(),
  parentId: z.number().int().optional().nullable(),
  groupOwnerId: z.string().optional().nullable(),
  groupViewerId: z.string().optional().nullable(),
  purposes: z.lazy(() => PurposeUncheckedCreateNestedManyWithoutToolsInputSchema).optional(),
  userProfiles: z.lazy(() => UserProfileUncheckedCreateNestedManyWithoutToolsInputSchema).optional(),
  ToolTexts: z.lazy(() => ToolTextsUncheckedCreateNestedManyWithoutToolInputSchema).optional(),
  forks: z.lazy(() => ToolUncheckedCreateNestedManyWithoutParentInputSchema).optional(),
  Blob: z.lazy(() => BlobUncheckedCreateNestedManyWithoutSource_toolInputSchema).optional()
}).strict();

export const ToolCreateOrConnectWithoutCountriesInputSchema: z.ZodType<Prisma.ToolCreateOrConnectWithoutCountriesInput> = z.object({
  where: z.lazy(() => ToolWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ToolCreateWithoutCountriesInputSchema),z.lazy(() => ToolUncheckedCreateWithoutCountriesInputSchema) ]),
}).strict();

export const RegionUpsertWithoutCountryInputSchema: z.ZodType<Prisma.RegionUpsertWithoutCountryInput> = z.object({
  update: z.union([ z.lazy(() => RegionUpdateWithoutCountryInputSchema),z.lazy(() => RegionUncheckedUpdateWithoutCountryInputSchema) ]),
  create: z.union([ z.lazy(() => RegionCreateWithoutCountryInputSchema),z.lazy(() => RegionUncheckedCreateWithoutCountryInputSchema) ]),
  where: z.lazy(() => RegionWhereInputSchema).optional()
}).strict();

export const RegionUpdateToOneWithWhereWithoutCountryInputSchema: z.ZodType<Prisma.RegionUpdateToOneWithWhereWithoutCountryInput> = z.object({
  where: z.lazy(() => RegionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RegionUpdateWithoutCountryInputSchema),z.lazy(() => RegionUncheckedUpdateWithoutCountryInputSchema) ]),
}).strict();

export const RegionUpdateWithoutCountryInputSchema: z.ZodType<Prisma.RegionUpdateWithoutCountryInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortOrder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Channel: z.lazy(() => ChannelUpdateManyWithoutRegionNestedInputSchema).optional()
}).strict();

export const RegionUncheckedUpdateWithoutCountryInputSchema: z.ZodType<Prisma.RegionUncheckedUpdateWithoutCountryInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortOrder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Channel: z.lazy(() => ChannelUncheckedUpdateManyWithoutRegionNestedInputSchema).optional()
}).strict();

export const ChannelUpsertWithoutCountriesInputSchema: z.ZodType<Prisma.ChannelUpsertWithoutCountriesInput> = z.object({
  update: z.union([ z.lazy(() => ChannelUpdateWithoutCountriesInputSchema),z.lazy(() => ChannelUncheckedUpdateWithoutCountriesInputSchema) ]),
  create: z.union([ z.lazy(() => ChannelCreateWithoutCountriesInputSchema),z.lazy(() => ChannelUncheckedCreateWithoutCountriesInputSchema) ]),
  where: z.lazy(() => ChannelWhereInputSchema).optional()
}).strict();

export const ChannelUpdateToOneWithWhereWithoutCountriesInputSchema: z.ZodType<Prisma.ChannelUpdateToOneWithWhereWithoutCountriesInput> = z.object({
  where: z.lazy(() => ChannelWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ChannelUpdateWithoutCountriesInputSchema),z.lazy(() => ChannelUncheckedUpdateWithoutCountriesInputSchema) ]),
}).strict();

export const ChannelUpdateWithoutCountriesInputSchema: z.ZodType<Prisma.ChannelUpdateWithoutCountriesInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mandatory: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  externalGroup: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  region: z.lazy(() => RegionUpdateOneWithoutChannelNestedInputSchema).optional(),
  category: z.lazy(() => ChannelCategoryUpdateOneWithoutChannelNestedInputSchema).optional()
}).strict();

export const ChannelUncheckedUpdateWithoutCountriesInputSchema: z.ZodType<Prisma.ChannelUncheckedUpdateWithoutCountriesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mandatory: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  regionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  externalGroup: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ToolUpsertWithWhereUniqueWithoutCountriesInputSchema: z.ZodType<Prisma.ToolUpsertWithWhereUniqueWithoutCountriesInput> = z.object({
  where: z.lazy(() => ToolWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ToolUpdateWithoutCountriesInputSchema),z.lazy(() => ToolUncheckedUpdateWithoutCountriesInputSchema) ]),
  create: z.union([ z.lazy(() => ToolCreateWithoutCountriesInputSchema),z.lazy(() => ToolUncheckedCreateWithoutCountriesInputSchema) ]),
}).strict();

export const ToolUpdateWithWhereUniqueWithoutCountriesInputSchema: z.ZodType<Prisma.ToolUpdateWithWhereUniqueWithoutCountriesInput> = z.object({
  where: z.lazy(() => ToolWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ToolUpdateWithoutCountriesInputSchema),z.lazy(() => ToolUncheckedUpdateWithoutCountriesInputSchema) ]),
}).strict();

export const ToolUpdateManyWithWhereWithoutCountriesInputSchema: z.ZodType<Prisma.ToolUpdateManyWithWhereWithoutCountriesInput> = z.object({
  where: z.lazy(() => ToolScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ToolUpdateManyMutationInputSchema),z.lazy(() => ToolUncheckedUpdateManyWithoutCountriesInputSchema) ]),
}).strict();

export const ToolTextsCreateWithoutLanguageInputSchema: z.ZodType<Prisma.ToolTextsCreateWithoutLanguageInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  tool: z.lazy(() => ToolCreateNestedOneWithoutToolTextsInputSchema)
}).strict();

export const ToolTextsUncheckedCreateWithoutLanguageInputSchema: z.ZodType<Prisma.ToolTextsUncheckedCreateWithoutLanguageInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  toolId: z.number().int()
}).strict();

export const ToolTextsCreateOrConnectWithoutLanguageInputSchema: z.ZodType<Prisma.ToolTextsCreateOrConnectWithoutLanguageInput> = z.object({
  where: z.lazy(() => ToolTextsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ToolTextsCreateWithoutLanguageInputSchema),z.lazy(() => ToolTextsUncheckedCreateWithoutLanguageInputSchema) ]),
}).strict();

export const ToolTextsCreateManyLanguageInputEnvelopeSchema: z.ZodType<Prisma.ToolTextsCreateManyLanguageInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ToolTextsCreateManyLanguageInputSchema),z.lazy(() => ToolTextsCreateManyLanguageInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ToolTextsUpsertWithWhereUniqueWithoutLanguageInputSchema: z.ZodType<Prisma.ToolTextsUpsertWithWhereUniqueWithoutLanguageInput> = z.object({
  where: z.lazy(() => ToolTextsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ToolTextsUpdateWithoutLanguageInputSchema),z.lazy(() => ToolTextsUncheckedUpdateWithoutLanguageInputSchema) ]),
  create: z.union([ z.lazy(() => ToolTextsCreateWithoutLanguageInputSchema),z.lazy(() => ToolTextsUncheckedCreateWithoutLanguageInputSchema) ]),
}).strict();

export const ToolTextsUpdateWithWhereUniqueWithoutLanguageInputSchema: z.ZodType<Prisma.ToolTextsUpdateWithWhereUniqueWithoutLanguageInput> = z.object({
  where: z.lazy(() => ToolTextsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ToolTextsUpdateWithoutLanguageInputSchema),z.lazy(() => ToolTextsUncheckedUpdateWithoutLanguageInputSchema) ]),
}).strict();

export const ToolTextsUpdateManyWithWhereWithoutLanguageInputSchema: z.ZodType<Prisma.ToolTextsUpdateManyWithWhereWithoutLanguageInput> = z.object({
  where: z.lazy(() => ToolTextsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ToolTextsUpdateManyMutationInputSchema),z.lazy(() => ToolTextsUncheckedUpdateManyWithoutLanguageInputSchema) ]),
}).strict();

export const ToolTextsScalarWhereInputSchema: z.ZodType<Prisma.ToolTextsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ToolTextsScalarWhereInputSchema),z.lazy(() => ToolTextsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ToolTextsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ToolTextsScalarWhereInputSchema),z.lazy(() => ToolTextsScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  toolId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  languageId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const ToolCreateWithoutPurposesInputSchema: z.ZodType<Prisma.ToolCreateWithoutPurposesInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  koksmat_masterdataref: z.string().optional().nullable(),
  koksmat_masterdata_id: z.string().optional().nullable(),
  koksmat_masterdata_etag: z.string().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.string(),
  status: z.string().optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.string().optional().nullable(),
  uploaded_icon: z.string().optional().nullable(),
  groupOwnerId: z.string().optional().nullable(),
  groupViewerId: z.string().optional().nullable(),
  category: z.lazy(() => CategoryCreateNestedOneWithoutToolInputSchema),
  userProfiles: z.lazy(() => UserProfileCreateNestedManyWithoutToolsInputSchema).optional(),
  countries: z.lazy(() => CountryCreateNestedManyWithoutToolsInputSchema).optional(),
  ToolTexts: z.lazy(() => ToolTextsCreateNestedManyWithoutToolInputSchema).optional(),
  parent: z.lazy(() => ToolCreateNestedOneWithoutForksInputSchema).optional(),
  forks: z.lazy(() => ToolCreateNestedManyWithoutParentInputSchema).optional(),
  Blob: z.lazy(() => BlobCreateNestedManyWithoutSource_toolInputSchema).optional()
}).strict();

export const ToolUncheckedCreateWithoutPurposesInputSchema: z.ZodType<Prisma.ToolUncheckedCreateWithoutPurposesInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  koksmat_masterdataref: z.string().optional().nullable(),
  koksmat_masterdata_id: z.string().optional().nullable(),
  koksmat_masterdata_etag: z.string().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.string(),
  status: z.string().optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.string().optional().nullable(),
  uploaded_icon: z.string().optional().nullable(),
  categoryId: z.number().int(),
  parentId: z.number().int().optional().nullable(),
  groupOwnerId: z.string().optional().nullable(),
  groupViewerId: z.string().optional().nullable(),
  userProfiles: z.lazy(() => UserProfileUncheckedCreateNestedManyWithoutToolsInputSchema).optional(),
  countries: z.lazy(() => CountryUncheckedCreateNestedManyWithoutToolsInputSchema).optional(),
  ToolTexts: z.lazy(() => ToolTextsUncheckedCreateNestedManyWithoutToolInputSchema).optional(),
  forks: z.lazy(() => ToolUncheckedCreateNestedManyWithoutParentInputSchema).optional(),
  Blob: z.lazy(() => BlobUncheckedCreateNestedManyWithoutSource_toolInputSchema).optional()
}).strict();

export const ToolCreateOrConnectWithoutPurposesInputSchema: z.ZodType<Prisma.ToolCreateOrConnectWithoutPurposesInput> = z.object({
  where: z.lazy(() => ToolWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ToolCreateWithoutPurposesInputSchema),z.lazy(() => ToolUncheckedCreateWithoutPurposesInputSchema) ]),
}).strict();

export const ToolUpsertWithWhereUniqueWithoutPurposesInputSchema: z.ZodType<Prisma.ToolUpsertWithWhereUniqueWithoutPurposesInput> = z.object({
  where: z.lazy(() => ToolWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ToolUpdateWithoutPurposesInputSchema),z.lazy(() => ToolUncheckedUpdateWithoutPurposesInputSchema) ]),
  create: z.union([ z.lazy(() => ToolCreateWithoutPurposesInputSchema),z.lazy(() => ToolUncheckedCreateWithoutPurposesInputSchema) ]),
}).strict();

export const ToolUpdateWithWhereUniqueWithoutPurposesInputSchema: z.ZodType<Prisma.ToolUpdateWithWhereUniqueWithoutPurposesInput> = z.object({
  where: z.lazy(() => ToolWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ToolUpdateWithoutPurposesInputSchema),z.lazy(() => ToolUncheckedUpdateWithoutPurposesInputSchema) ]),
}).strict();

export const ToolUpdateManyWithWhereWithoutPurposesInputSchema: z.ZodType<Prisma.ToolUpdateManyWithWhereWithoutPurposesInput> = z.object({
  where: z.lazy(() => ToolScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ToolUpdateManyMutationInputSchema),z.lazy(() => ToolUncheckedUpdateManyWithoutPurposesInputSchema) ]),
}).strict();

export const CountryCreateWithoutRegionInputSchema: z.ZodType<Prisma.CountryCreateWithoutRegionInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable(),
  homePageUrl: z.string().optional().nullable(),
  Channel: z.lazy(() => ChannelCreateNestedOneWithoutCountriesInputSchema).optional(),
  tools: z.lazy(() => ToolCreateNestedManyWithoutCountriesInputSchema).optional()
}).strict();

export const CountryUncheckedCreateWithoutRegionInputSchema: z.ZodType<Prisma.CountryUncheckedCreateWithoutRegionInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable(),
  channelId: z.number().int().optional().nullable(),
  homePageUrl: z.string().optional().nullable(),
  tools: z.lazy(() => ToolUncheckedCreateNestedManyWithoutCountriesInputSchema).optional()
}).strict();

export const CountryCreateOrConnectWithoutRegionInputSchema: z.ZodType<Prisma.CountryCreateOrConnectWithoutRegionInput> = z.object({
  where: z.lazy(() => CountryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CountryCreateWithoutRegionInputSchema),z.lazy(() => CountryUncheckedCreateWithoutRegionInputSchema) ]),
}).strict();

export const CountryCreateManyRegionInputEnvelopeSchema: z.ZodType<Prisma.CountryCreateManyRegionInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CountryCreateManyRegionInputSchema),z.lazy(() => CountryCreateManyRegionInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ChannelCreateWithoutRegionInputSchema: z.ZodType<Prisma.ChannelCreateWithoutRegionInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  mandatory: z.boolean().optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable(),
  externalGroup: z.string().optional().nullable(),
  countries: z.lazy(() => CountryCreateNestedManyWithoutChannelInputSchema).optional(),
  category: z.lazy(() => ChannelCategoryCreateNestedOneWithoutChannelInputSchema).optional()
}).strict();

export const ChannelUncheckedCreateWithoutRegionInputSchema: z.ZodType<Prisma.ChannelUncheckedCreateWithoutRegionInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  mandatory: z.boolean().optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable(),
  externalGroup: z.string().optional().nullable(),
  categoryId: z.number().int().optional().nullable(),
  countries: z.lazy(() => CountryUncheckedCreateNestedManyWithoutChannelInputSchema).optional()
}).strict();

export const ChannelCreateOrConnectWithoutRegionInputSchema: z.ZodType<Prisma.ChannelCreateOrConnectWithoutRegionInput> = z.object({
  where: z.lazy(() => ChannelWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ChannelCreateWithoutRegionInputSchema),z.lazy(() => ChannelUncheckedCreateWithoutRegionInputSchema) ]),
}).strict();

export const ChannelCreateManyRegionInputEnvelopeSchema: z.ZodType<Prisma.ChannelCreateManyRegionInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ChannelCreateManyRegionInputSchema),z.lazy(() => ChannelCreateManyRegionInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CountryUpsertWithWhereUniqueWithoutRegionInputSchema: z.ZodType<Prisma.CountryUpsertWithWhereUniqueWithoutRegionInput> = z.object({
  where: z.lazy(() => CountryWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CountryUpdateWithoutRegionInputSchema),z.lazy(() => CountryUncheckedUpdateWithoutRegionInputSchema) ]),
  create: z.union([ z.lazy(() => CountryCreateWithoutRegionInputSchema),z.lazy(() => CountryUncheckedCreateWithoutRegionInputSchema) ]),
}).strict();

export const CountryUpdateWithWhereUniqueWithoutRegionInputSchema: z.ZodType<Prisma.CountryUpdateWithWhereUniqueWithoutRegionInput> = z.object({
  where: z.lazy(() => CountryWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CountryUpdateWithoutRegionInputSchema),z.lazy(() => CountryUncheckedUpdateWithoutRegionInputSchema) ]),
}).strict();

export const CountryUpdateManyWithWhereWithoutRegionInputSchema: z.ZodType<Prisma.CountryUpdateManyWithWhereWithoutRegionInput> = z.object({
  where: z.lazy(() => CountryScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CountryUpdateManyMutationInputSchema),z.lazy(() => CountryUncheckedUpdateManyWithoutRegionInputSchema) ]),
}).strict();

export const CountryScalarWhereInputSchema: z.ZodType<Prisma.CountryScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CountryScalarWhereInputSchema),z.lazy(() => CountryScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CountryScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CountryScalarWhereInputSchema),z.lazy(() => CountryScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  region_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  sortorder: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  channelId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  homePageUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const ChannelUpsertWithWhereUniqueWithoutRegionInputSchema: z.ZodType<Prisma.ChannelUpsertWithWhereUniqueWithoutRegionInput> = z.object({
  where: z.lazy(() => ChannelWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ChannelUpdateWithoutRegionInputSchema),z.lazy(() => ChannelUncheckedUpdateWithoutRegionInputSchema) ]),
  create: z.union([ z.lazy(() => ChannelCreateWithoutRegionInputSchema),z.lazy(() => ChannelUncheckedCreateWithoutRegionInputSchema) ]),
}).strict();

export const ChannelUpdateWithWhereUniqueWithoutRegionInputSchema: z.ZodType<Prisma.ChannelUpdateWithWhereUniqueWithoutRegionInput> = z.object({
  where: z.lazy(() => ChannelWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ChannelUpdateWithoutRegionInputSchema),z.lazy(() => ChannelUncheckedUpdateWithoutRegionInputSchema) ]),
}).strict();

export const ChannelUpdateManyWithWhereWithoutRegionInputSchema: z.ZodType<Prisma.ChannelUpdateManyWithWhereWithoutRegionInput> = z.object({
  where: z.lazy(() => ChannelScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ChannelUpdateManyMutationInputSchema),z.lazy(() => ChannelUncheckedUpdateManyWithoutRegionInputSchema) ]),
}).strict();

export const ChannelScalarWhereInputSchema: z.ZodType<Prisma.ChannelScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ChannelScalarWhereInputSchema),z.lazy(() => ChannelScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ChannelScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ChannelScalarWhereInputSchema),z.lazy(() => ChannelScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  mandatory: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  sortorder: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  regionId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  externalGroup: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  categoryId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const CategoryCreateWithoutToolInputSchema: z.ZodType<Prisma.CategoryCreateWithoutToolInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable(),
  color: z.string().optional().nullable(),
  isGroupTool: z.boolean().optional().nullable()
}).strict();

export const CategoryUncheckedCreateWithoutToolInputSchema: z.ZodType<Prisma.CategoryUncheckedCreateWithoutToolInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable(),
  color: z.string().optional().nullable(),
  isGroupTool: z.boolean().optional().nullable()
}).strict();

export const CategoryCreateOrConnectWithoutToolInputSchema: z.ZodType<Prisma.CategoryCreateOrConnectWithoutToolInput> = z.object({
  where: z.lazy(() => CategoryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CategoryCreateWithoutToolInputSchema),z.lazy(() => CategoryUncheckedCreateWithoutToolInputSchema) ]),
}).strict();

export const PurposeCreateWithoutToolsInputSchema: z.ZodType<Prisma.PurposeCreateWithoutToolsInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable()
}).strict();

export const PurposeUncheckedCreateWithoutToolsInputSchema: z.ZodType<Prisma.PurposeUncheckedCreateWithoutToolsInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable()
}).strict();

export const PurposeCreateOrConnectWithoutToolsInputSchema: z.ZodType<Prisma.PurposeCreateOrConnectWithoutToolsInput> = z.object({
  where: z.lazy(() => PurposeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PurposeCreateWithoutToolsInputSchema),z.lazy(() => PurposeUncheckedCreateWithoutToolsInputSchema) ]),
}).strict();

export const UserProfileCreateWithoutToolsInputSchema: z.ZodType<Prisma.UserProfileCreateWithoutToolsInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  koksmat_masterdataref: z.string().optional().nullable(),
  koksmat_masterdata_id: z.string().optional().nullable(),
  koksmat_masterdata_etag: z.string().optional().nullable(),
  name: z.string(),
  displayName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  email: z.string(),
  status: z.string().optional().nullable(),
  company: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  companykey: z.string().optional().nullable(),
  isExternal: z.boolean().optional(),
  CurrentEmail: z.string().optional().nullable(),
  OldEmail: z.string().optional().nullable(),
  OnPremisesId: z.string().optional().nullable(),
  lastLogin: z.coerce.date().optional().nullable(),
  language: z.string().optional().nullable(),
  homePage: z.string().optional().nullable(),
  Session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  ToolGroup: z.lazy(() => ToolGroupCreateNestedManyWithoutOwnersInputSchema).optional(),
  roles: z.lazy(() => UserRoleCreateNestedManyWithoutUsersInputSchema).optional(),
  Board: z.lazy(() => BoardCreateNestedOneWithoutManagedByInputSchema).optional()
}).strict();

export const UserProfileUncheckedCreateWithoutToolsInputSchema: z.ZodType<Prisma.UserProfileUncheckedCreateWithoutToolsInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  koksmat_masterdataref: z.string().optional().nullable(),
  koksmat_masterdata_id: z.string().optional().nullable(),
  koksmat_masterdata_etag: z.string().optional().nullable(),
  name: z.string(),
  displayName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  email: z.string(),
  status: z.string().optional().nullable(),
  company: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  companykey: z.string().optional().nullable(),
  isExternal: z.boolean().optional(),
  CurrentEmail: z.string().optional().nullable(),
  OldEmail: z.string().optional().nullable(),
  OnPremisesId: z.string().optional().nullable(),
  boardId: z.number().int().optional().nullable(),
  lastLogin: z.coerce.date().optional().nullable(),
  language: z.string().optional().nullable(),
  homePage: z.string().optional().nullable(),
  Session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ToolGroup: z.lazy(() => ToolGroupUncheckedCreateNestedManyWithoutOwnersInputSchema).optional(),
  roles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UserProfileCreateOrConnectWithoutToolsInputSchema: z.ZodType<Prisma.UserProfileCreateOrConnectWithoutToolsInput> = z.object({
  where: z.lazy(() => UserProfileWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserProfileCreateWithoutToolsInputSchema),z.lazy(() => UserProfileUncheckedCreateWithoutToolsInputSchema) ]),
}).strict();

export const CountryCreateWithoutToolsInputSchema: z.ZodType<Prisma.CountryCreateWithoutToolsInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable(),
  homePageUrl: z.string().optional().nullable(),
  region: z.lazy(() => RegionCreateNestedOneWithoutCountryInputSchema),
  Channel: z.lazy(() => ChannelCreateNestedOneWithoutCountriesInputSchema).optional()
}).strict();

export const CountryUncheckedCreateWithoutToolsInputSchema: z.ZodType<Prisma.CountryUncheckedCreateWithoutToolsInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  region_id: z.number().int(),
  sortorder: z.string().optional().nullable(),
  channelId: z.number().int().optional().nullable(),
  homePageUrl: z.string().optional().nullable()
}).strict();

export const CountryCreateOrConnectWithoutToolsInputSchema: z.ZodType<Prisma.CountryCreateOrConnectWithoutToolsInput> = z.object({
  where: z.lazy(() => CountryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CountryCreateWithoutToolsInputSchema),z.lazy(() => CountryUncheckedCreateWithoutToolsInputSchema) ]),
}).strict();

export const ToolTextsCreateWithoutToolInputSchema: z.ZodType<Prisma.ToolTextsCreateWithoutToolInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  language: z.lazy(() => LanguageCreateNestedOneWithoutToolTextsInputSchema)
}).strict();

export const ToolTextsUncheckedCreateWithoutToolInputSchema: z.ZodType<Prisma.ToolTextsUncheckedCreateWithoutToolInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  languageId: z.number().int()
}).strict();

export const ToolTextsCreateOrConnectWithoutToolInputSchema: z.ZodType<Prisma.ToolTextsCreateOrConnectWithoutToolInput> = z.object({
  where: z.lazy(() => ToolTextsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ToolTextsCreateWithoutToolInputSchema),z.lazy(() => ToolTextsUncheckedCreateWithoutToolInputSchema) ]),
}).strict();

export const ToolTextsCreateManyToolInputEnvelopeSchema: z.ZodType<Prisma.ToolTextsCreateManyToolInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ToolTextsCreateManyToolInputSchema),z.lazy(() => ToolTextsCreateManyToolInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ToolCreateWithoutForksInputSchema: z.ZodType<Prisma.ToolCreateWithoutForksInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  koksmat_masterdataref: z.string().optional().nullable(),
  koksmat_masterdata_id: z.string().optional().nullable(),
  koksmat_masterdata_etag: z.string().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.string(),
  status: z.string().optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.string().optional().nullable(),
  uploaded_icon: z.string().optional().nullable(),
  groupOwnerId: z.string().optional().nullable(),
  groupViewerId: z.string().optional().nullable(),
  category: z.lazy(() => CategoryCreateNestedOneWithoutToolInputSchema),
  purposes: z.lazy(() => PurposeCreateNestedManyWithoutToolsInputSchema).optional(),
  userProfiles: z.lazy(() => UserProfileCreateNestedManyWithoutToolsInputSchema).optional(),
  countries: z.lazy(() => CountryCreateNestedManyWithoutToolsInputSchema).optional(),
  ToolTexts: z.lazy(() => ToolTextsCreateNestedManyWithoutToolInputSchema).optional(),
  parent: z.lazy(() => ToolCreateNestedOneWithoutForksInputSchema).optional(),
  Blob: z.lazy(() => BlobCreateNestedManyWithoutSource_toolInputSchema).optional()
}).strict();

export const ToolUncheckedCreateWithoutForksInputSchema: z.ZodType<Prisma.ToolUncheckedCreateWithoutForksInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  koksmat_masterdataref: z.string().optional().nullable(),
  koksmat_masterdata_id: z.string().optional().nullable(),
  koksmat_masterdata_etag: z.string().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.string(),
  status: z.string().optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.string().optional().nullable(),
  uploaded_icon: z.string().optional().nullable(),
  categoryId: z.number().int(),
  parentId: z.number().int().optional().nullable(),
  groupOwnerId: z.string().optional().nullable(),
  groupViewerId: z.string().optional().nullable(),
  purposes: z.lazy(() => PurposeUncheckedCreateNestedManyWithoutToolsInputSchema).optional(),
  userProfiles: z.lazy(() => UserProfileUncheckedCreateNestedManyWithoutToolsInputSchema).optional(),
  countries: z.lazy(() => CountryUncheckedCreateNestedManyWithoutToolsInputSchema).optional(),
  ToolTexts: z.lazy(() => ToolTextsUncheckedCreateNestedManyWithoutToolInputSchema).optional(),
  Blob: z.lazy(() => BlobUncheckedCreateNestedManyWithoutSource_toolInputSchema).optional()
}).strict();

export const ToolCreateOrConnectWithoutForksInputSchema: z.ZodType<Prisma.ToolCreateOrConnectWithoutForksInput> = z.object({
  where: z.lazy(() => ToolWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ToolCreateWithoutForksInputSchema),z.lazy(() => ToolUncheckedCreateWithoutForksInputSchema) ]),
}).strict();

export const ToolCreateWithoutParentInputSchema: z.ZodType<Prisma.ToolCreateWithoutParentInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  koksmat_masterdataref: z.string().optional().nullable(),
  koksmat_masterdata_id: z.string().optional().nullable(),
  koksmat_masterdata_etag: z.string().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.string(),
  status: z.string().optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.string().optional().nullable(),
  uploaded_icon: z.string().optional().nullable(),
  groupOwnerId: z.string().optional().nullable(),
  groupViewerId: z.string().optional().nullable(),
  category: z.lazy(() => CategoryCreateNestedOneWithoutToolInputSchema),
  purposes: z.lazy(() => PurposeCreateNestedManyWithoutToolsInputSchema).optional(),
  userProfiles: z.lazy(() => UserProfileCreateNestedManyWithoutToolsInputSchema).optional(),
  countries: z.lazy(() => CountryCreateNestedManyWithoutToolsInputSchema).optional(),
  ToolTexts: z.lazy(() => ToolTextsCreateNestedManyWithoutToolInputSchema).optional(),
  forks: z.lazy(() => ToolCreateNestedManyWithoutParentInputSchema).optional(),
  Blob: z.lazy(() => BlobCreateNestedManyWithoutSource_toolInputSchema).optional()
}).strict();

export const ToolUncheckedCreateWithoutParentInputSchema: z.ZodType<Prisma.ToolUncheckedCreateWithoutParentInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  koksmat_masterdataref: z.string().optional().nullable(),
  koksmat_masterdata_id: z.string().optional().nullable(),
  koksmat_masterdata_etag: z.string().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.string(),
  status: z.string().optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.string().optional().nullable(),
  uploaded_icon: z.string().optional().nullable(),
  categoryId: z.number().int(),
  groupOwnerId: z.string().optional().nullable(),
  groupViewerId: z.string().optional().nullable(),
  purposes: z.lazy(() => PurposeUncheckedCreateNestedManyWithoutToolsInputSchema).optional(),
  userProfiles: z.lazy(() => UserProfileUncheckedCreateNestedManyWithoutToolsInputSchema).optional(),
  countries: z.lazy(() => CountryUncheckedCreateNestedManyWithoutToolsInputSchema).optional(),
  ToolTexts: z.lazy(() => ToolTextsUncheckedCreateNestedManyWithoutToolInputSchema).optional(),
  forks: z.lazy(() => ToolUncheckedCreateNestedManyWithoutParentInputSchema).optional(),
  Blob: z.lazy(() => BlobUncheckedCreateNestedManyWithoutSource_toolInputSchema).optional()
}).strict();

export const ToolCreateOrConnectWithoutParentInputSchema: z.ZodType<Prisma.ToolCreateOrConnectWithoutParentInput> = z.object({
  where: z.lazy(() => ToolWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ToolCreateWithoutParentInputSchema),z.lazy(() => ToolUncheckedCreateWithoutParentInputSchema) ]),
}).strict();

export const ToolCreateManyParentInputEnvelopeSchema: z.ZodType<Prisma.ToolCreateManyParentInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ToolCreateManyParentInputSchema),z.lazy(() => ToolCreateManyParentInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const BlobCreateWithoutSource_toolInputSchema: z.ZodType<Prisma.BlobCreateWithoutSource_toolInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  hash: z.string(),
  content_type: z.string(),
  base64: z.string(),
  data: z.instanceof(Buffer),
  BlobResized: z.lazy(() => BlobResizedCreateNestedManyWithoutBlobInputSchema).optional()
}).strict();

export const BlobUncheckedCreateWithoutSource_toolInputSchema: z.ZodType<Prisma.BlobUncheckedCreateWithoutSource_toolInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  hash: z.string(),
  content_type: z.string(),
  base64: z.string(),
  data: z.instanceof(Buffer),
  BlobResized: z.lazy(() => BlobResizedUncheckedCreateNestedManyWithoutBlobInputSchema).optional()
}).strict();

export const BlobCreateOrConnectWithoutSource_toolInputSchema: z.ZodType<Prisma.BlobCreateOrConnectWithoutSource_toolInput> = z.object({
  where: z.lazy(() => BlobWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => BlobCreateWithoutSource_toolInputSchema),z.lazy(() => BlobUncheckedCreateWithoutSource_toolInputSchema) ]),
}).strict();

export const BlobCreateManySource_toolInputEnvelopeSchema: z.ZodType<Prisma.BlobCreateManySource_toolInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => BlobCreateManySource_toolInputSchema),z.lazy(() => BlobCreateManySource_toolInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CategoryUpsertWithoutToolInputSchema: z.ZodType<Prisma.CategoryUpsertWithoutToolInput> = z.object({
  update: z.union([ z.lazy(() => CategoryUpdateWithoutToolInputSchema),z.lazy(() => CategoryUncheckedUpdateWithoutToolInputSchema) ]),
  create: z.union([ z.lazy(() => CategoryCreateWithoutToolInputSchema),z.lazy(() => CategoryUncheckedCreateWithoutToolInputSchema) ]),
  where: z.lazy(() => CategoryWhereInputSchema).optional()
}).strict();

export const CategoryUpdateToOneWithWhereWithoutToolInputSchema: z.ZodType<Prisma.CategoryUpdateToOneWithWhereWithoutToolInput> = z.object({
  where: z.lazy(() => CategoryWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CategoryUpdateWithoutToolInputSchema),z.lazy(() => CategoryUncheckedUpdateWithoutToolInputSchema) ]),
}).strict();

export const CategoryUpdateWithoutToolInputSchema: z.ZodType<Prisma.CategoryUpdateWithoutToolInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isGroupTool: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CategoryUncheckedUpdateWithoutToolInputSchema: z.ZodType<Prisma.CategoryUncheckedUpdateWithoutToolInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isGroupTool: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PurposeUpsertWithWhereUniqueWithoutToolsInputSchema: z.ZodType<Prisma.PurposeUpsertWithWhereUniqueWithoutToolsInput> = z.object({
  where: z.lazy(() => PurposeWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PurposeUpdateWithoutToolsInputSchema),z.lazy(() => PurposeUncheckedUpdateWithoutToolsInputSchema) ]),
  create: z.union([ z.lazy(() => PurposeCreateWithoutToolsInputSchema),z.lazy(() => PurposeUncheckedCreateWithoutToolsInputSchema) ]),
}).strict();

export const PurposeUpdateWithWhereUniqueWithoutToolsInputSchema: z.ZodType<Prisma.PurposeUpdateWithWhereUniqueWithoutToolsInput> = z.object({
  where: z.lazy(() => PurposeWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PurposeUpdateWithoutToolsInputSchema),z.lazy(() => PurposeUncheckedUpdateWithoutToolsInputSchema) ]),
}).strict();

export const PurposeUpdateManyWithWhereWithoutToolsInputSchema: z.ZodType<Prisma.PurposeUpdateManyWithWhereWithoutToolsInput> = z.object({
  where: z.lazy(() => PurposeScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PurposeUpdateManyMutationInputSchema),z.lazy(() => PurposeUncheckedUpdateManyWithoutToolsInputSchema) ]),
}).strict();

export const PurposeScalarWhereInputSchema: z.ZodType<Prisma.PurposeScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PurposeScalarWhereInputSchema),z.lazy(() => PurposeScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PurposeScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PurposeScalarWhereInputSchema),z.lazy(() => PurposeScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  sortorder: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const UserProfileUpsertWithWhereUniqueWithoutToolsInputSchema: z.ZodType<Prisma.UserProfileUpsertWithWhereUniqueWithoutToolsInput> = z.object({
  where: z.lazy(() => UserProfileWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserProfileUpdateWithoutToolsInputSchema),z.lazy(() => UserProfileUncheckedUpdateWithoutToolsInputSchema) ]),
  create: z.union([ z.lazy(() => UserProfileCreateWithoutToolsInputSchema),z.lazy(() => UserProfileUncheckedCreateWithoutToolsInputSchema) ]),
}).strict();

export const UserProfileUpdateWithWhereUniqueWithoutToolsInputSchema: z.ZodType<Prisma.UserProfileUpdateWithWhereUniqueWithoutToolsInput> = z.object({
  where: z.lazy(() => UserProfileWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserProfileUpdateWithoutToolsInputSchema),z.lazy(() => UserProfileUncheckedUpdateWithoutToolsInputSchema) ]),
}).strict();

export const UserProfileUpdateManyWithWhereWithoutToolsInputSchema: z.ZodType<Prisma.UserProfileUpdateManyWithWhereWithoutToolsInput> = z.object({
  where: z.lazy(() => UserProfileScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserProfileUpdateManyMutationInputSchema),z.lazy(() => UserProfileUncheckedUpdateManyWithoutToolsInputSchema) ]),
}).strict();

export const CountryUpsertWithWhereUniqueWithoutToolsInputSchema: z.ZodType<Prisma.CountryUpsertWithWhereUniqueWithoutToolsInput> = z.object({
  where: z.lazy(() => CountryWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CountryUpdateWithoutToolsInputSchema),z.lazy(() => CountryUncheckedUpdateWithoutToolsInputSchema) ]),
  create: z.union([ z.lazy(() => CountryCreateWithoutToolsInputSchema),z.lazy(() => CountryUncheckedCreateWithoutToolsInputSchema) ]),
}).strict();

export const CountryUpdateWithWhereUniqueWithoutToolsInputSchema: z.ZodType<Prisma.CountryUpdateWithWhereUniqueWithoutToolsInput> = z.object({
  where: z.lazy(() => CountryWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CountryUpdateWithoutToolsInputSchema),z.lazy(() => CountryUncheckedUpdateWithoutToolsInputSchema) ]),
}).strict();

export const CountryUpdateManyWithWhereWithoutToolsInputSchema: z.ZodType<Prisma.CountryUpdateManyWithWhereWithoutToolsInput> = z.object({
  where: z.lazy(() => CountryScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CountryUpdateManyMutationInputSchema),z.lazy(() => CountryUncheckedUpdateManyWithoutToolsInputSchema) ]),
}).strict();

export const ToolTextsUpsertWithWhereUniqueWithoutToolInputSchema: z.ZodType<Prisma.ToolTextsUpsertWithWhereUniqueWithoutToolInput> = z.object({
  where: z.lazy(() => ToolTextsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ToolTextsUpdateWithoutToolInputSchema),z.lazy(() => ToolTextsUncheckedUpdateWithoutToolInputSchema) ]),
  create: z.union([ z.lazy(() => ToolTextsCreateWithoutToolInputSchema),z.lazy(() => ToolTextsUncheckedCreateWithoutToolInputSchema) ]),
}).strict();

export const ToolTextsUpdateWithWhereUniqueWithoutToolInputSchema: z.ZodType<Prisma.ToolTextsUpdateWithWhereUniqueWithoutToolInput> = z.object({
  where: z.lazy(() => ToolTextsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ToolTextsUpdateWithoutToolInputSchema),z.lazy(() => ToolTextsUncheckedUpdateWithoutToolInputSchema) ]),
}).strict();

export const ToolTextsUpdateManyWithWhereWithoutToolInputSchema: z.ZodType<Prisma.ToolTextsUpdateManyWithWhereWithoutToolInput> = z.object({
  where: z.lazy(() => ToolTextsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ToolTextsUpdateManyMutationInputSchema),z.lazy(() => ToolTextsUncheckedUpdateManyWithoutToolInputSchema) ]),
}).strict();

export const ToolUpsertWithoutForksInputSchema: z.ZodType<Prisma.ToolUpsertWithoutForksInput> = z.object({
  update: z.union([ z.lazy(() => ToolUpdateWithoutForksInputSchema),z.lazy(() => ToolUncheckedUpdateWithoutForksInputSchema) ]),
  create: z.union([ z.lazy(() => ToolCreateWithoutForksInputSchema),z.lazy(() => ToolUncheckedCreateWithoutForksInputSchema) ]),
  where: z.lazy(() => ToolWhereInputSchema).optional()
}).strict();

export const ToolUpdateToOneWithWhereWithoutForksInputSchema: z.ZodType<Prisma.ToolUpdateToOneWithWhereWithoutForksInput> = z.object({
  where: z.lazy(() => ToolWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ToolUpdateWithoutForksInputSchema),z.lazy(() => ToolUncheckedUpdateWithoutForksInputSchema) ]),
}).strict();

export const ToolUpdateWithoutForksInputSchema: z.ZodType<Prisma.ToolUpdateWithoutForksInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uploaded_icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupViewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.lazy(() => CategoryUpdateOneRequiredWithoutToolNestedInputSchema).optional(),
  purposes: z.lazy(() => PurposeUpdateManyWithoutToolsNestedInputSchema).optional(),
  userProfiles: z.lazy(() => UserProfileUpdateManyWithoutToolsNestedInputSchema).optional(),
  countries: z.lazy(() => CountryUpdateManyWithoutToolsNestedInputSchema).optional(),
  ToolTexts: z.lazy(() => ToolTextsUpdateManyWithoutToolNestedInputSchema).optional(),
  parent: z.lazy(() => ToolUpdateOneWithoutForksNestedInputSchema).optional(),
  Blob: z.lazy(() => BlobUpdateManyWithoutSource_toolNestedInputSchema).optional()
}).strict();

export const ToolUncheckedUpdateWithoutForksInputSchema: z.ZodType<Prisma.ToolUncheckedUpdateWithoutForksInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uploaded_icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parentId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupViewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  purposes: z.lazy(() => PurposeUncheckedUpdateManyWithoutToolsNestedInputSchema).optional(),
  userProfiles: z.lazy(() => UserProfileUncheckedUpdateManyWithoutToolsNestedInputSchema).optional(),
  countries: z.lazy(() => CountryUncheckedUpdateManyWithoutToolsNestedInputSchema).optional(),
  ToolTexts: z.lazy(() => ToolTextsUncheckedUpdateManyWithoutToolNestedInputSchema).optional(),
  Blob: z.lazy(() => BlobUncheckedUpdateManyWithoutSource_toolNestedInputSchema).optional()
}).strict();

export const ToolUpsertWithWhereUniqueWithoutParentInputSchema: z.ZodType<Prisma.ToolUpsertWithWhereUniqueWithoutParentInput> = z.object({
  where: z.lazy(() => ToolWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ToolUpdateWithoutParentInputSchema),z.lazy(() => ToolUncheckedUpdateWithoutParentInputSchema) ]),
  create: z.union([ z.lazy(() => ToolCreateWithoutParentInputSchema),z.lazy(() => ToolUncheckedCreateWithoutParentInputSchema) ]),
}).strict();

export const ToolUpdateWithWhereUniqueWithoutParentInputSchema: z.ZodType<Prisma.ToolUpdateWithWhereUniqueWithoutParentInput> = z.object({
  where: z.lazy(() => ToolWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ToolUpdateWithoutParentInputSchema),z.lazy(() => ToolUncheckedUpdateWithoutParentInputSchema) ]),
}).strict();

export const ToolUpdateManyWithWhereWithoutParentInputSchema: z.ZodType<Prisma.ToolUpdateManyWithWhereWithoutParentInput> = z.object({
  where: z.lazy(() => ToolScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ToolUpdateManyMutationInputSchema),z.lazy(() => ToolUncheckedUpdateManyWithoutParentInputSchema) ]),
}).strict();

export const BlobUpsertWithWhereUniqueWithoutSource_toolInputSchema: z.ZodType<Prisma.BlobUpsertWithWhereUniqueWithoutSource_toolInput> = z.object({
  where: z.lazy(() => BlobWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => BlobUpdateWithoutSource_toolInputSchema),z.lazy(() => BlobUncheckedUpdateWithoutSource_toolInputSchema) ]),
  create: z.union([ z.lazy(() => BlobCreateWithoutSource_toolInputSchema),z.lazy(() => BlobUncheckedCreateWithoutSource_toolInputSchema) ]),
}).strict();

export const BlobUpdateWithWhereUniqueWithoutSource_toolInputSchema: z.ZodType<Prisma.BlobUpdateWithWhereUniqueWithoutSource_toolInput> = z.object({
  where: z.lazy(() => BlobWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => BlobUpdateWithoutSource_toolInputSchema),z.lazy(() => BlobUncheckedUpdateWithoutSource_toolInputSchema) ]),
}).strict();

export const BlobUpdateManyWithWhereWithoutSource_toolInputSchema: z.ZodType<Prisma.BlobUpdateManyWithWhereWithoutSource_toolInput> = z.object({
  where: z.lazy(() => BlobScalarWhereInputSchema),
  data: z.union([ z.lazy(() => BlobUpdateManyMutationInputSchema),z.lazy(() => BlobUncheckedUpdateManyWithoutSource_toolInputSchema) ]),
}).strict();

export const BlobScalarWhereInputSchema: z.ZodType<Prisma.BlobScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => BlobScalarWhereInputSchema),z.lazy(() => BlobScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => BlobScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BlobScalarWhereInputSchema),z.lazy(() => BlobScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  hash: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  content_type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  base64: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  data: z.union([ z.lazy(() => BytesFilterSchema),z.instanceof(Buffer) ]).optional(),
  source_tool_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const ToolCreateWithoutToolTextsInputSchema: z.ZodType<Prisma.ToolCreateWithoutToolTextsInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  koksmat_masterdataref: z.string().optional().nullable(),
  koksmat_masterdata_id: z.string().optional().nullable(),
  koksmat_masterdata_etag: z.string().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.string(),
  status: z.string().optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.string().optional().nullable(),
  uploaded_icon: z.string().optional().nullable(),
  groupOwnerId: z.string().optional().nullable(),
  groupViewerId: z.string().optional().nullable(),
  category: z.lazy(() => CategoryCreateNestedOneWithoutToolInputSchema),
  purposes: z.lazy(() => PurposeCreateNestedManyWithoutToolsInputSchema).optional(),
  userProfiles: z.lazy(() => UserProfileCreateNestedManyWithoutToolsInputSchema).optional(),
  countries: z.lazy(() => CountryCreateNestedManyWithoutToolsInputSchema).optional(),
  parent: z.lazy(() => ToolCreateNestedOneWithoutForksInputSchema).optional(),
  forks: z.lazy(() => ToolCreateNestedManyWithoutParentInputSchema).optional(),
  Blob: z.lazy(() => BlobCreateNestedManyWithoutSource_toolInputSchema).optional()
}).strict();

export const ToolUncheckedCreateWithoutToolTextsInputSchema: z.ZodType<Prisma.ToolUncheckedCreateWithoutToolTextsInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  koksmat_masterdataref: z.string().optional().nullable(),
  koksmat_masterdata_id: z.string().optional().nullable(),
  koksmat_masterdata_etag: z.string().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.string(),
  status: z.string().optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.string().optional().nullable(),
  uploaded_icon: z.string().optional().nullable(),
  categoryId: z.number().int(),
  parentId: z.number().int().optional().nullable(),
  groupOwnerId: z.string().optional().nullable(),
  groupViewerId: z.string().optional().nullable(),
  purposes: z.lazy(() => PurposeUncheckedCreateNestedManyWithoutToolsInputSchema).optional(),
  userProfiles: z.lazy(() => UserProfileUncheckedCreateNestedManyWithoutToolsInputSchema).optional(),
  countries: z.lazy(() => CountryUncheckedCreateNestedManyWithoutToolsInputSchema).optional(),
  forks: z.lazy(() => ToolUncheckedCreateNestedManyWithoutParentInputSchema).optional(),
  Blob: z.lazy(() => BlobUncheckedCreateNestedManyWithoutSource_toolInputSchema).optional()
}).strict();

export const ToolCreateOrConnectWithoutToolTextsInputSchema: z.ZodType<Prisma.ToolCreateOrConnectWithoutToolTextsInput> = z.object({
  where: z.lazy(() => ToolWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ToolCreateWithoutToolTextsInputSchema),z.lazy(() => ToolUncheckedCreateWithoutToolTextsInputSchema) ]),
}).strict();

export const LanguageCreateWithoutToolTextsInputSchema: z.ZodType<Prisma.LanguageCreateWithoutToolTextsInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  code: z.string(),
  sortorder: z.string().optional().nullable()
}).strict();

export const LanguageUncheckedCreateWithoutToolTextsInputSchema: z.ZodType<Prisma.LanguageUncheckedCreateWithoutToolTextsInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  code: z.string(),
  sortorder: z.string().optional().nullable()
}).strict();

export const LanguageCreateOrConnectWithoutToolTextsInputSchema: z.ZodType<Prisma.LanguageCreateOrConnectWithoutToolTextsInput> = z.object({
  where: z.lazy(() => LanguageWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LanguageCreateWithoutToolTextsInputSchema),z.lazy(() => LanguageUncheckedCreateWithoutToolTextsInputSchema) ]),
}).strict();

export const ToolUpsertWithoutToolTextsInputSchema: z.ZodType<Prisma.ToolUpsertWithoutToolTextsInput> = z.object({
  update: z.union([ z.lazy(() => ToolUpdateWithoutToolTextsInputSchema),z.lazy(() => ToolUncheckedUpdateWithoutToolTextsInputSchema) ]),
  create: z.union([ z.lazy(() => ToolCreateWithoutToolTextsInputSchema),z.lazy(() => ToolUncheckedCreateWithoutToolTextsInputSchema) ]),
  where: z.lazy(() => ToolWhereInputSchema).optional()
}).strict();

export const ToolUpdateToOneWithWhereWithoutToolTextsInputSchema: z.ZodType<Prisma.ToolUpdateToOneWithWhereWithoutToolTextsInput> = z.object({
  where: z.lazy(() => ToolWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ToolUpdateWithoutToolTextsInputSchema),z.lazy(() => ToolUncheckedUpdateWithoutToolTextsInputSchema) ]),
}).strict();

export const ToolUpdateWithoutToolTextsInputSchema: z.ZodType<Prisma.ToolUpdateWithoutToolTextsInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uploaded_icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupViewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.lazy(() => CategoryUpdateOneRequiredWithoutToolNestedInputSchema).optional(),
  purposes: z.lazy(() => PurposeUpdateManyWithoutToolsNestedInputSchema).optional(),
  userProfiles: z.lazy(() => UserProfileUpdateManyWithoutToolsNestedInputSchema).optional(),
  countries: z.lazy(() => CountryUpdateManyWithoutToolsNestedInputSchema).optional(),
  parent: z.lazy(() => ToolUpdateOneWithoutForksNestedInputSchema).optional(),
  forks: z.lazy(() => ToolUpdateManyWithoutParentNestedInputSchema).optional(),
  Blob: z.lazy(() => BlobUpdateManyWithoutSource_toolNestedInputSchema).optional()
}).strict();

export const ToolUncheckedUpdateWithoutToolTextsInputSchema: z.ZodType<Prisma.ToolUncheckedUpdateWithoutToolTextsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uploaded_icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parentId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupViewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  purposes: z.lazy(() => PurposeUncheckedUpdateManyWithoutToolsNestedInputSchema).optional(),
  userProfiles: z.lazy(() => UserProfileUncheckedUpdateManyWithoutToolsNestedInputSchema).optional(),
  countries: z.lazy(() => CountryUncheckedUpdateManyWithoutToolsNestedInputSchema).optional(),
  forks: z.lazy(() => ToolUncheckedUpdateManyWithoutParentNestedInputSchema).optional(),
  Blob: z.lazy(() => BlobUncheckedUpdateManyWithoutSource_toolNestedInputSchema).optional()
}).strict();

export const LanguageUpsertWithoutToolTextsInputSchema: z.ZodType<Prisma.LanguageUpsertWithoutToolTextsInput> = z.object({
  update: z.union([ z.lazy(() => LanguageUpdateWithoutToolTextsInputSchema),z.lazy(() => LanguageUncheckedUpdateWithoutToolTextsInputSchema) ]),
  create: z.union([ z.lazy(() => LanguageCreateWithoutToolTextsInputSchema),z.lazy(() => LanguageUncheckedCreateWithoutToolTextsInputSchema) ]),
  where: z.lazy(() => LanguageWhereInputSchema).optional()
}).strict();

export const LanguageUpdateToOneWithWhereWithoutToolTextsInputSchema: z.ZodType<Prisma.LanguageUpdateToOneWithWhereWithoutToolTextsInput> = z.object({
  where: z.lazy(() => LanguageWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => LanguageUpdateWithoutToolTextsInputSchema),z.lazy(() => LanguageUncheckedUpdateWithoutToolTextsInputSchema) ]),
}).strict();

export const LanguageUpdateWithoutToolTextsInputSchema: z.ZodType<Prisma.LanguageUpdateWithoutToolTextsInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LanguageUncheckedUpdateWithoutToolTextsInputSchema: z.ZodType<Prisma.LanguageUncheckedUpdateWithoutToolTextsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserProfileCreateWithoutToolGroupInputSchema: z.ZodType<Prisma.UserProfileCreateWithoutToolGroupInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  koksmat_masterdataref: z.string().optional().nullable(),
  koksmat_masterdata_id: z.string().optional().nullable(),
  koksmat_masterdata_etag: z.string().optional().nullable(),
  name: z.string(),
  displayName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  email: z.string(),
  status: z.string().optional().nullable(),
  company: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  companykey: z.string().optional().nullable(),
  isExternal: z.boolean().optional(),
  CurrentEmail: z.string().optional().nullable(),
  OldEmail: z.string().optional().nullable(),
  OnPremisesId: z.string().optional().nullable(),
  lastLogin: z.coerce.date().optional().nullable(),
  language: z.string().optional().nullable(),
  homePage: z.string().optional().nullable(),
  tools: z.lazy(() => ToolCreateNestedManyWithoutUserProfilesInputSchema).optional(),
  Session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  roles: z.lazy(() => UserRoleCreateNestedManyWithoutUsersInputSchema).optional(),
  Board: z.lazy(() => BoardCreateNestedOneWithoutManagedByInputSchema).optional()
}).strict();

export const UserProfileUncheckedCreateWithoutToolGroupInputSchema: z.ZodType<Prisma.UserProfileUncheckedCreateWithoutToolGroupInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  koksmat_masterdataref: z.string().optional().nullable(),
  koksmat_masterdata_id: z.string().optional().nullable(),
  koksmat_masterdata_etag: z.string().optional().nullable(),
  name: z.string(),
  displayName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  email: z.string(),
  status: z.string().optional().nullable(),
  company: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  companykey: z.string().optional().nullable(),
  isExternal: z.boolean().optional(),
  CurrentEmail: z.string().optional().nullable(),
  OldEmail: z.string().optional().nullable(),
  OnPremisesId: z.string().optional().nullable(),
  boardId: z.number().int().optional().nullable(),
  lastLogin: z.coerce.date().optional().nullable(),
  language: z.string().optional().nullable(),
  homePage: z.string().optional().nullable(),
  tools: z.lazy(() => ToolUncheckedCreateNestedManyWithoutUserProfilesInputSchema).optional(),
  Session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  roles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UserProfileCreateOrConnectWithoutToolGroupInputSchema: z.ZodType<Prisma.UserProfileCreateOrConnectWithoutToolGroupInput> = z.object({
  where: z.lazy(() => UserProfileWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserProfileCreateWithoutToolGroupInputSchema),z.lazy(() => UserProfileUncheckedCreateWithoutToolGroupInputSchema) ]),
}).strict();

export const UserGroupCreateWithoutToolGroupInputSchema: z.ZodType<Prisma.UserGroupCreateWithoutToolGroupInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable()
}).strict();

export const UserGroupUncheckedCreateWithoutToolGroupInputSchema: z.ZodType<Prisma.UserGroupUncheckedCreateWithoutToolGroupInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable()
}).strict();

export const UserGroupCreateOrConnectWithoutToolGroupInputSchema: z.ZodType<Prisma.UserGroupCreateOrConnectWithoutToolGroupInput> = z.object({
  where: z.lazy(() => UserGroupWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserGroupCreateWithoutToolGroupInputSchema),z.lazy(() => UserGroupUncheckedCreateWithoutToolGroupInputSchema) ]),
}).strict();

export const UserProfileUpsertWithWhereUniqueWithoutToolGroupInputSchema: z.ZodType<Prisma.UserProfileUpsertWithWhereUniqueWithoutToolGroupInput> = z.object({
  where: z.lazy(() => UserProfileWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserProfileUpdateWithoutToolGroupInputSchema),z.lazy(() => UserProfileUncheckedUpdateWithoutToolGroupInputSchema) ]),
  create: z.union([ z.lazy(() => UserProfileCreateWithoutToolGroupInputSchema),z.lazy(() => UserProfileUncheckedCreateWithoutToolGroupInputSchema) ]),
}).strict();

export const UserProfileUpdateWithWhereUniqueWithoutToolGroupInputSchema: z.ZodType<Prisma.UserProfileUpdateWithWhereUniqueWithoutToolGroupInput> = z.object({
  where: z.lazy(() => UserProfileWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserProfileUpdateWithoutToolGroupInputSchema),z.lazy(() => UserProfileUncheckedUpdateWithoutToolGroupInputSchema) ]),
}).strict();

export const UserProfileUpdateManyWithWhereWithoutToolGroupInputSchema: z.ZodType<Prisma.UserProfileUpdateManyWithWhereWithoutToolGroupInput> = z.object({
  where: z.lazy(() => UserProfileScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserProfileUpdateManyMutationInputSchema),z.lazy(() => UserProfileUncheckedUpdateManyWithoutToolGroupInputSchema) ]),
}).strict();

export const UserGroupUpsertWithWhereUniqueWithoutToolGroupInputSchema: z.ZodType<Prisma.UserGroupUpsertWithWhereUniqueWithoutToolGroupInput> = z.object({
  where: z.lazy(() => UserGroupWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserGroupUpdateWithoutToolGroupInputSchema),z.lazy(() => UserGroupUncheckedUpdateWithoutToolGroupInputSchema) ]),
  create: z.union([ z.lazy(() => UserGroupCreateWithoutToolGroupInputSchema),z.lazy(() => UserGroupUncheckedCreateWithoutToolGroupInputSchema) ]),
}).strict();

export const UserGroupUpdateWithWhereUniqueWithoutToolGroupInputSchema: z.ZodType<Prisma.UserGroupUpdateWithWhereUniqueWithoutToolGroupInput> = z.object({
  where: z.lazy(() => UserGroupWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserGroupUpdateWithoutToolGroupInputSchema),z.lazy(() => UserGroupUncheckedUpdateWithoutToolGroupInputSchema) ]),
}).strict();

export const UserGroupUpdateManyWithWhereWithoutToolGroupInputSchema: z.ZodType<Prisma.UserGroupUpdateManyWithWhereWithoutToolGroupInput> = z.object({
  where: z.lazy(() => UserGroupScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserGroupUpdateManyMutationInputSchema),z.lazy(() => UserGroupUncheckedUpdateManyWithoutToolGroupInputSchema) ]),
}).strict();

export const UserGroupScalarWhereInputSchema: z.ZodType<Prisma.UserGroupScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserGroupScalarWhereInputSchema),z.lazy(() => UserGroupScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserGroupScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserGroupScalarWhereInputSchema),z.lazy(() => UserGroupScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  sortorder: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const ToolGroupCreateWithoutUserGroupsInputSchema: z.ZodType<Prisma.ToolGroupCreateWithoutUserGroupsInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.string().optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  visibility: z.lazy(() => StatusSchema).optional(),
  owners: z.lazy(() => UserProfileCreateNestedManyWithoutToolGroupInputSchema).optional()
}).strict();

export const ToolGroupUncheckedCreateWithoutUserGroupsInputSchema: z.ZodType<Prisma.ToolGroupUncheckedCreateWithoutUserGroupsInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.string().optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  visibility: z.lazy(() => StatusSchema).optional(),
  owners: z.lazy(() => UserProfileUncheckedCreateNestedManyWithoutToolGroupInputSchema).optional()
}).strict();

export const ToolGroupCreateOrConnectWithoutUserGroupsInputSchema: z.ZodType<Prisma.ToolGroupCreateOrConnectWithoutUserGroupsInput> = z.object({
  where: z.lazy(() => ToolGroupWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ToolGroupCreateWithoutUserGroupsInputSchema),z.lazy(() => ToolGroupUncheckedCreateWithoutUserGroupsInputSchema) ]),
}).strict();

export const ToolGroupUpsertWithWhereUniqueWithoutUserGroupsInputSchema: z.ZodType<Prisma.ToolGroupUpsertWithWhereUniqueWithoutUserGroupsInput> = z.object({
  where: z.lazy(() => ToolGroupWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ToolGroupUpdateWithoutUserGroupsInputSchema),z.lazy(() => ToolGroupUncheckedUpdateWithoutUserGroupsInputSchema) ]),
  create: z.union([ z.lazy(() => ToolGroupCreateWithoutUserGroupsInputSchema),z.lazy(() => ToolGroupUncheckedCreateWithoutUserGroupsInputSchema) ]),
}).strict();

export const ToolGroupUpdateWithWhereUniqueWithoutUserGroupsInputSchema: z.ZodType<Prisma.ToolGroupUpdateWithWhereUniqueWithoutUserGroupsInput> = z.object({
  where: z.lazy(() => ToolGroupWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ToolGroupUpdateWithoutUserGroupsInputSchema),z.lazy(() => ToolGroupUncheckedUpdateWithoutUserGroupsInputSchema) ]),
}).strict();

export const ToolGroupUpdateManyWithWhereWithoutUserGroupsInputSchema: z.ZodType<Prisma.ToolGroupUpdateManyWithWhereWithoutUserGroupsInput> = z.object({
  where: z.lazy(() => ToolGroupScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ToolGroupUpdateManyMutationInputSchema),z.lazy(() => ToolGroupUncheckedUpdateManyWithoutUserGroupsInputSchema) ]),
}).strict();

export const ToolGroupScalarWhereInputSchema: z.ZodType<Prisma.ToolGroupScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ToolGroupScalarWhereInputSchema),z.lazy(() => ToolGroupScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ToolGroupScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ToolGroupScalarWhereInputSchema),z.lazy(() => ToolGroupScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  status: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  visibility: z.union([ z.lazy(() => EnumStatusFilterSchema),z.lazy(() => StatusSchema) ]).optional(),
}).strict();

export const ToolCreateWithoutUserProfilesInputSchema: z.ZodType<Prisma.ToolCreateWithoutUserProfilesInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  koksmat_masterdataref: z.string().optional().nullable(),
  koksmat_masterdata_id: z.string().optional().nullable(),
  koksmat_masterdata_etag: z.string().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.string(),
  status: z.string().optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.string().optional().nullable(),
  uploaded_icon: z.string().optional().nullable(),
  groupOwnerId: z.string().optional().nullable(),
  groupViewerId: z.string().optional().nullable(),
  category: z.lazy(() => CategoryCreateNestedOneWithoutToolInputSchema),
  purposes: z.lazy(() => PurposeCreateNestedManyWithoutToolsInputSchema).optional(),
  countries: z.lazy(() => CountryCreateNestedManyWithoutToolsInputSchema).optional(),
  ToolTexts: z.lazy(() => ToolTextsCreateNestedManyWithoutToolInputSchema).optional(),
  parent: z.lazy(() => ToolCreateNestedOneWithoutForksInputSchema).optional(),
  forks: z.lazy(() => ToolCreateNestedManyWithoutParentInputSchema).optional(),
  Blob: z.lazy(() => BlobCreateNestedManyWithoutSource_toolInputSchema).optional()
}).strict();

export const ToolUncheckedCreateWithoutUserProfilesInputSchema: z.ZodType<Prisma.ToolUncheckedCreateWithoutUserProfilesInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  koksmat_masterdataref: z.string().optional().nullable(),
  koksmat_masterdata_id: z.string().optional().nullable(),
  koksmat_masterdata_etag: z.string().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.string(),
  status: z.string().optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.string().optional().nullable(),
  uploaded_icon: z.string().optional().nullable(),
  categoryId: z.number().int(),
  parentId: z.number().int().optional().nullable(),
  groupOwnerId: z.string().optional().nullable(),
  groupViewerId: z.string().optional().nullable(),
  purposes: z.lazy(() => PurposeUncheckedCreateNestedManyWithoutToolsInputSchema).optional(),
  countries: z.lazy(() => CountryUncheckedCreateNestedManyWithoutToolsInputSchema).optional(),
  ToolTexts: z.lazy(() => ToolTextsUncheckedCreateNestedManyWithoutToolInputSchema).optional(),
  forks: z.lazy(() => ToolUncheckedCreateNestedManyWithoutParentInputSchema).optional(),
  Blob: z.lazy(() => BlobUncheckedCreateNestedManyWithoutSource_toolInputSchema).optional()
}).strict();

export const ToolCreateOrConnectWithoutUserProfilesInputSchema: z.ZodType<Prisma.ToolCreateOrConnectWithoutUserProfilesInput> = z.object({
  where: z.lazy(() => ToolWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ToolCreateWithoutUserProfilesInputSchema),z.lazy(() => ToolUncheckedCreateWithoutUserProfilesInputSchema) ]),
}).strict();

export const SessionCreateWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateWithoutUserInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const SessionUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedCreateWithoutUserInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const SessionCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const SessionCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.SessionCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SessionCreateManyUserInputSchema),z.lazy(() => SessionCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ToolGroupCreateWithoutOwnersInputSchema: z.ZodType<Prisma.ToolGroupCreateWithoutOwnersInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.string().optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  visibility: z.lazy(() => StatusSchema).optional(),
  userGroups: z.lazy(() => UserGroupCreateNestedManyWithoutToolGroupInputSchema).optional()
}).strict();

export const ToolGroupUncheckedCreateWithoutOwnersInputSchema: z.ZodType<Prisma.ToolGroupUncheckedCreateWithoutOwnersInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.string().optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  visibility: z.lazy(() => StatusSchema).optional(),
  userGroups: z.lazy(() => UserGroupUncheckedCreateNestedManyWithoutToolGroupInputSchema).optional()
}).strict();

export const ToolGroupCreateOrConnectWithoutOwnersInputSchema: z.ZodType<Prisma.ToolGroupCreateOrConnectWithoutOwnersInput> = z.object({
  where: z.lazy(() => ToolGroupWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ToolGroupCreateWithoutOwnersInputSchema),z.lazy(() => ToolGroupUncheckedCreateWithoutOwnersInputSchema) ]),
}).strict();

export const UserRoleCreateWithoutUsersInputSchema: z.ZodType<Prisma.UserRoleCreateWithoutUsersInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable()
}).strict();

export const UserRoleUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.UserRoleUncheckedCreateWithoutUsersInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable()
}).strict();

export const UserRoleCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.UserRoleCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => UserRoleWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserRoleCreateWithoutUsersInputSchema),z.lazy(() => UserRoleUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const BoardCreateWithoutManagedByInputSchema: z.ZodType<Prisma.BoardCreateWithoutManagedByInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.string().optional().nullable(),
  layout: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  groupOwnerId: z.string().optional().nullable(),
  groupViewerId: z.string().optional().nullable(),
  parent: z.lazy(() => BoardCreateNestedOneWithoutForksInputSchema).optional(),
  forks: z.lazy(() => BoardCreateNestedManyWithoutParentInputSchema).optional()
}).strict();

export const BoardUncheckedCreateWithoutManagedByInputSchema: z.ZodType<Prisma.BoardUncheckedCreateWithoutManagedByInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.string().optional().nullable(),
  layout: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  parentId: z.number().int().optional().nullable(),
  groupOwnerId: z.string().optional().nullable(),
  groupViewerId: z.string().optional().nullable(),
  forks: z.lazy(() => BoardUncheckedCreateNestedManyWithoutParentInputSchema).optional()
}).strict();

export const BoardCreateOrConnectWithoutManagedByInputSchema: z.ZodType<Prisma.BoardCreateOrConnectWithoutManagedByInput> = z.object({
  where: z.lazy(() => BoardWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => BoardCreateWithoutManagedByInputSchema),z.lazy(() => BoardUncheckedCreateWithoutManagedByInputSchema) ]),
}).strict();

export const ToolUpsertWithWhereUniqueWithoutUserProfilesInputSchema: z.ZodType<Prisma.ToolUpsertWithWhereUniqueWithoutUserProfilesInput> = z.object({
  where: z.lazy(() => ToolWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ToolUpdateWithoutUserProfilesInputSchema),z.lazy(() => ToolUncheckedUpdateWithoutUserProfilesInputSchema) ]),
  create: z.union([ z.lazy(() => ToolCreateWithoutUserProfilesInputSchema),z.lazy(() => ToolUncheckedCreateWithoutUserProfilesInputSchema) ]),
}).strict();

export const ToolUpdateWithWhereUniqueWithoutUserProfilesInputSchema: z.ZodType<Prisma.ToolUpdateWithWhereUniqueWithoutUserProfilesInput> = z.object({
  where: z.lazy(() => ToolWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ToolUpdateWithoutUserProfilesInputSchema),z.lazy(() => ToolUncheckedUpdateWithoutUserProfilesInputSchema) ]),
}).strict();

export const ToolUpdateManyWithWhereWithoutUserProfilesInputSchema: z.ZodType<Prisma.ToolUpdateManyWithWhereWithoutUserProfilesInput> = z.object({
  where: z.lazy(() => ToolScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ToolUpdateManyMutationInputSchema),z.lazy(() => ToolUncheckedUpdateManyWithoutUserProfilesInputSchema) ]),
}).strict();

export const SessionUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.SessionUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SessionUpdateWithoutUserInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const SessionUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SessionUpdateWithoutUserInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const SessionUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => SessionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SessionUpdateManyMutationInputSchema),z.lazy(() => SessionUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const SessionScalarWhereInputSchema: z.ZodType<Prisma.SessionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  userProfileId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const ToolGroupUpsertWithWhereUniqueWithoutOwnersInputSchema: z.ZodType<Prisma.ToolGroupUpsertWithWhereUniqueWithoutOwnersInput> = z.object({
  where: z.lazy(() => ToolGroupWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ToolGroupUpdateWithoutOwnersInputSchema),z.lazy(() => ToolGroupUncheckedUpdateWithoutOwnersInputSchema) ]),
  create: z.union([ z.lazy(() => ToolGroupCreateWithoutOwnersInputSchema),z.lazy(() => ToolGroupUncheckedCreateWithoutOwnersInputSchema) ]),
}).strict();

export const ToolGroupUpdateWithWhereUniqueWithoutOwnersInputSchema: z.ZodType<Prisma.ToolGroupUpdateWithWhereUniqueWithoutOwnersInput> = z.object({
  where: z.lazy(() => ToolGroupWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ToolGroupUpdateWithoutOwnersInputSchema),z.lazy(() => ToolGroupUncheckedUpdateWithoutOwnersInputSchema) ]),
}).strict();

export const ToolGroupUpdateManyWithWhereWithoutOwnersInputSchema: z.ZodType<Prisma.ToolGroupUpdateManyWithWhereWithoutOwnersInput> = z.object({
  where: z.lazy(() => ToolGroupScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ToolGroupUpdateManyMutationInputSchema),z.lazy(() => ToolGroupUncheckedUpdateManyWithoutOwnersInputSchema) ]),
}).strict();

export const UserRoleUpsertWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.UserRoleUpsertWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => UserRoleWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserRoleUpdateWithoutUsersInputSchema),z.lazy(() => UserRoleUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => UserRoleCreateWithoutUsersInputSchema),z.lazy(() => UserRoleUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const UserRoleUpdateWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.UserRoleUpdateWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => UserRoleWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserRoleUpdateWithoutUsersInputSchema),z.lazy(() => UserRoleUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const UserRoleUpdateManyWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.UserRoleUpdateManyWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => UserRoleScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserRoleUpdateManyMutationInputSchema),z.lazy(() => UserRoleUncheckedUpdateManyWithoutUsersInputSchema) ]),
}).strict();

export const UserRoleScalarWhereInputSchema: z.ZodType<Prisma.UserRoleScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserRoleScalarWhereInputSchema),z.lazy(() => UserRoleScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserRoleScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserRoleScalarWhereInputSchema),z.lazy(() => UserRoleScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  sortorder: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const BoardUpsertWithoutManagedByInputSchema: z.ZodType<Prisma.BoardUpsertWithoutManagedByInput> = z.object({
  update: z.union([ z.lazy(() => BoardUpdateWithoutManagedByInputSchema),z.lazy(() => BoardUncheckedUpdateWithoutManagedByInputSchema) ]),
  create: z.union([ z.lazy(() => BoardCreateWithoutManagedByInputSchema),z.lazy(() => BoardUncheckedCreateWithoutManagedByInputSchema) ]),
  where: z.lazy(() => BoardWhereInputSchema).optional()
}).strict();

export const BoardUpdateToOneWithWhereWithoutManagedByInputSchema: z.ZodType<Prisma.BoardUpdateToOneWithWhereWithoutManagedByInput> = z.object({
  where: z.lazy(() => BoardWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => BoardUpdateWithoutManagedByInputSchema),z.lazy(() => BoardUncheckedUpdateWithoutManagedByInputSchema) ]),
}).strict();

export const BoardUpdateWithoutManagedByInputSchema: z.ZodType<Prisma.BoardUpdateWithoutManagedByInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  layout: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  groupOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupViewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parent: z.lazy(() => BoardUpdateOneWithoutForksNestedInputSchema).optional(),
  forks: z.lazy(() => BoardUpdateManyWithoutParentNestedInputSchema).optional()
}).strict();

export const BoardUncheckedUpdateWithoutManagedByInputSchema: z.ZodType<Prisma.BoardUncheckedUpdateWithoutManagedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  layout: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  parentId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupViewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  forks: z.lazy(() => BoardUncheckedUpdateManyWithoutParentNestedInputSchema).optional()
}).strict();

export const UserProfileCreateWithoutRolesInputSchema: z.ZodType<Prisma.UserProfileCreateWithoutRolesInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  koksmat_masterdataref: z.string().optional().nullable(),
  koksmat_masterdata_id: z.string().optional().nullable(),
  koksmat_masterdata_etag: z.string().optional().nullable(),
  name: z.string(),
  displayName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  email: z.string(),
  status: z.string().optional().nullable(),
  company: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  companykey: z.string().optional().nullable(),
  isExternal: z.boolean().optional(),
  CurrentEmail: z.string().optional().nullable(),
  OldEmail: z.string().optional().nullable(),
  OnPremisesId: z.string().optional().nullable(),
  lastLogin: z.coerce.date().optional().nullable(),
  language: z.string().optional().nullable(),
  homePage: z.string().optional().nullable(),
  tools: z.lazy(() => ToolCreateNestedManyWithoutUserProfilesInputSchema).optional(),
  Session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  ToolGroup: z.lazy(() => ToolGroupCreateNestedManyWithoutOwnersInputSchema).optional(),
  Board: z.lazy(() => BoardCreateNestedOneWithoutManagedByInputSchema).optional()
}).strict();

export const UserProfileUncheckedCreateWithoutRolesInputSchema: z.ZodType<Prisma.UserProfileUncheckedCreateWithoutRolesInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  koksmat_masterdataref: z.string().optional().nullable(),
  koksmat_masterdata_id: z.string().optional().nullable(),
  koksmat_masterdata_etag: z.string().optional().nullable(),
  name: z.string(),
  displayName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  email: z.string(),
  status: z.string().optional().nullable(),
  company: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  companykey: z.string().optional().nullable(),
  isExternal: z.boolean().optional(),
  CurrentEmail: z.string().optional().nullable(),
  OldEmail: z.string().optional().nullable(),
  OnPremisesId: z.string().optional().nullable(),
  boardId: z.number().int().optional().nullable(),
  lastLogin: z.coerce.date().optional().nullable(),
  language: z.string().optional().nullable(),
  homePage: z.string().optional().nullable(),
  tools: z.lazy(() => ToolUncheckedCreateNestedManyWithoutUserProfilesInputSchema).optional(),
  Session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ToolGroup: z.lazy(() => ToolGroupUncheckedCreateNestedManyWithoutOwnersInputSchema).optional()
}).strict();

export const UserProfileCreateOrConnectWithoutRolesInputSchema: z.ZodType<Prisma.UserProfileCreateOrConnectWithoutRolesInput> = z.object({
  where: z.lazy(() => UserProfileWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserProfileCreateWithoutRolesInputSchema),z.lazy(() => UserProfileUncheckedCreateWithoutRolesInputSchema) ]),
}).strict();

export const UserProfileUpsertWithWhereUniqueWithoutRolesInputSchema: z.ZodType<Prisma.UserProfileUpsertWithWhereUniqueWithoutRolesInput> = z.object({
  where: z.lazy(() => UserProfileWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserProfileUpdateWithoutRolesInputSchema),z.lazy(() => UserProfileUncheckedUpdateWithoutRolesInputSchema) ]),
  create: z.union([ z.lazy(() => UserProfileCreateWithoutRolesInputSchema),z.lazy(() => UserProfileUncheckedCreateWithoutRolesInputSchema) ]),
}).strict();

export const UserProfileUpdateWithWhereUniqueWithoutRolesInputSchema: z.ZodType<Prisma.UserProfileUpdateWithWhereUniqueWithoutRolesInput> = z.object({
  where: z.lazy(() => UserProfileWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserProfileUpdateWithoutRolesInputSchema),z.lazy(() => UserProfileUncheckedUpdateWithoutRolesInputSchema) ]),
}).strict();

export const UserProfileUpdateManyWithWhereWithoutRolesInputSchema: z.ZodType<Prisma.UserProfileUpdateManyWithWhereWithoutRolesInput> = z.object({
  where: z.lazy(() => UserProfileScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserProfileUpdateManyMutationInputSchema),z.lazy(() => UserProfileUncheckedUpdateManyWithoutRolesInputSchema) ]),
}).strict();

export const UserProfileCreateWithoutSessionInputSchema: z.ZodType<Prisma.UserProfileCreateWithoutSessionInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  koksmat_masterdataref: z.string().optional().nullable(),
  koksmat_masterdata_id: z.string().optional().nullable(),
  koksmat_masterdata_etag: z.string().optional().nullable(),
  name: z.string(),
  displayName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  email: z.string(),
  status: z.string().optional().nullable(),
  company: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  companykey: z.string().optional().nullable(),
  isExternal: z.boolean().optional(),
  CurrentEmail: z.string().optional().nullable(),
  OldEmail: z.string().optional().nullable(),
  OnPremisesId: z.string().optional().nullable(),
  lastLogin: z.coerce.date().optional().nullable(),
  language: z.string().optional().nullable(),
  homePage: z.string().optional().nullable(),
  tools: z.lazy(() => ToolCreateNestedManyWithoutUserProfilesInputSchema).optional(),
  ToolGroup: z.lazy(() => ToolGroupCreateNestedManyWithoutOwnersInputSchema).optional(),
  roles: z.lazy(() => UserRoleCreateNestedManyWithoutUsersInputSchema).optional(),
  Board: z.lazy(() => BoardCreateNestedOneWithoutManagedByInputSchema).optional()
}).strict();

export const UserProfileUncheckedCreateWithoutSessionInputSchema: z.ZodType<Prisma.UserProfileUncheckedCreateWithoutSessionInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  koksmat_masterdataref: z.string().optional().nullable(),
  koksmat_masterdata_id: z.string().optional().nullable(),
  koksmat_masterdata_etag: z.string().optional().nullable(),
  name: z.string(),
  displayName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  email: z.string(),
  status: z.string().optional().nullable(),
  company: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  companykey: z.string().optional().nullable(),
  isExternal: z.boolean().optional(),
  CurrentEmail: z.string().optional().nullable(),
  OldEmail: z.string().optional().nullable(),
  OnPremisesId: z.string().optional().nullable(),
  boardId: z.number().int().optional().nullable(),
  lastLogin: z.coerce.date().optional().nullable(),
  language: z.string().optional().nullable(),
  homePage: z.string().optional().nullable(),
  tools: z.lazy(() => ToolUncheckedCreateNestedManyWithoutUserProfilesInputSchema).optional(),
  ToolGroup: z.lazy(() => ToolGroupUncheckedCreateNestedManyWithoutOwnersInputSchema).optional(),
  roles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UserProfileCreateOrConnectWithoutSessionInputSchema: z.ZodType<Prisma.UserProfileCreateOrConnectWithoutSessionInput> = z.object({
  where: z.lazy(() => UserProfileWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserProfileCreateWithoutSessionInputSchema),z.lazy(() => UserProfileUncheckedCreateWithoutSessionInputSchema) ]),
}).strict();

export const UserProfileUpsertWithoutSessionInputSchema: z.ZodType<Prisma.UserProfileUpsertWithoutSessionInput> = z.object({
  update: z.union([ z.lazy(() => UserProfileUpdateWithoutSessionInputSchema),z.lazy(() => UserProfileUncheckedUpdateWithoutSessionInputSchema) ]),
  create: z.union([ z.lazy(() => UserProfileCreateWithoutSessionInputSchema),z.lazy(() => UserProfileUncheckedCreateWithoutSessionInputSchema) ]),
  where: z.lazy(() => UserProfileWhereInputSchema).optional()
}).strict();

export const UserProfileUpdateToOneWithWhereWithoutSessionInputSchema: z.ZodType<Prisma.UserProfileUpdateToOneWithWhereWithoutSessionInput> = z.object({
  where: z.lazy(() => UserProfileWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserProfileUpdateWithoutSessionInputSchema),z.lazy(() => UserProfileUncheckedUpdateWithoutSessionInputSchema) ]),
}).strict();

export const UserProfileUpdateWithoutSessionInputSchema: z.ZodType<Prisma.UserProfileUpdateWithoutSessionInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  displayName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  company: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companykey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isExternal: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  CurrentEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OldEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OnPremisesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLogin: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  homePage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tools: z.lazy(() => ToolUpdateManyWithoutUserProfilesNestedInputSchema).optional(),
  ToolGroup: z.lazy(() => ToolGroupUpdateManyWithoutOwnersNestedInputSchema).optional(),
  roles: z.lazy(() => UserRoleUpdateManyWithoutUsersNestedInputSchema).optional(),
  Board: z.lazy(() => BoardUpdateOneWithoutManagedByNestedInputSchema).optional()
}).strict();

export const UserProfileUncheckedUpdateWithoutSessionInputSchema: z.ZodType<Prisma.UserProfileUncheckedUpdateWithoutSessionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  displayName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  company: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companykey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isExternal: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  CurrentEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OldEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OnPremisesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boardId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLogin: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  homePage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tools: z.lazy(() => ToolUncheckedUpdateManyWithoutUserProfilesNestedInputSchema).optional(),
  ToolGroup: z.lazy(() => ToolGroupUncheckedUpdateManyWithoutOwnersNestedInputSchema).optional(),
  roles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const ChannelCreateWithoutCategoryInputSchema: z.ZodType<Prisma.ChannelCreateWithoutCategoryInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  mandatory: z.boolean().optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable(),
  externalGroup: z.string().optional().nullable(),
  region: z.lazy(() => RegionCreateNestedOneWithoutChannelInputSchema).optional(),
  countries: z.lazy(() => CountryCreateNestedManyWithoutChannelInputSchema).optional()
}).strict();

export const ChannelUncheckedCreateWithoutCategoryInputSchema: z.ZodType<Prisma.ChannelUncheckedCreateWithoutCategoryInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  mandatory: z.boolean().optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable(),
  regionId: z.number().int().optional().nullable(),
  externalGroup: z.string().optional().nullable(),
  countries: z.lazy(() => CountryUncheckedCreateNestedManyWithoutChannelInputSchema).optional()
}).strict();

export const ChannelCreateOrConnectWithoutCategoryInputSchema: z.ZodType<Prisma.ChannelCreateOrConnectWithoutCategoryInput> = z.object({
  where: z.lazy(() => ChannelWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ChannelCreateWithoutCategoryInputSchema),z.lazy(() => ChannelUncheckedCreateWithoutCategoryInputSchema) ]),
}).strict();

export const ChannelCreateManyCategoryInputEnvelopeSchema: z.ZodType<Prisma.ChannelCreateManyCategoryInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ChannelCreateManyCategoryInputSchema),z.lazy(() => ChannelCreateManyCategoryInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ChannelUpsertWithWhereUniqueWithoutCategoryInputSchema: z.ZodType<Prisma.ChannelUpsertWithWhereUniqueWithoutCategoryInput> = z.object({
  where: z.lazy(() => ChannelWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ChannelUpdateWithoutCategoryInputSchema),z.lazy(() => ChannelUncheckedUpdateWithoutCategoryInputSchema) ]),
  create: z.union([ z.lazy(() => ChannelCreateWithoutCategoryInputSchema),z.lazy(() => ChannelUncheckedCreateWithoutCategoryInputSchema) ]),
}).strict();

export const ChannelUpdateWithWhereUniqueWithoutCategoryInputSchema: z.ZodType<Prisma.ChannelUpdateWithWhereUniqueWithoutCategoryInput> = z.object({
  where: z.lazy(() => ChannelWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ChannelUpdateWithoutCategoryInputSchema),z.lazy(() => ChannelUncheckedUpdateWithoutCategoryInputSchema) ]),
}).strict();

export const ChannelUpdateManyWithWhereWithoutCategoryInputSchema: z.ZodType<Prisma.ChannelUpdateManyWithWhereWithoutCategoryInput> = z.object({
  where: z.lazy(() => ChannelScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ChannelUpdateManyMutationInputSchema),z.lazy(() => ChannelUncheckedUpdateManyWithoutCategoryInputSchema) ]),
}).strict();

export const RegionCreateWithoutChannelInputSchema: z.ZodType<Prisma.RegionCreateWithoutChannelInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortOrder: z.string().optional().nullable(),
  Country: z.lazy(() => CountryCreateNestedManyWithoutRegionInputSchema).optional()
}).strict();

export const RegionUncheckedCreateWithoutChannelInputSchema: z.ZodType<Prisma.RegionUncheckedCreateWithoutChannelInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortOrder: z.string().optional().nullable(),
  Country: z.lazy(() => CountryUncheckedCreateNestedManyWithoutRegionInputSchema).optional()
}).strict();

export const RegionCreateOrConnectWithoutChannelInputSchema: z.ZodType<Prisma.RegionCreateOrConnectWithoutChannelInput> = z.object({
  where: z.lazy(() => RegionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RegionCreateWithoutChannelInputSchema),z.lazy(() => RegionUncheckedCreateWithoutChannelInputSchema) ]),
}).strict();

export const CountryCreateWithoutChannelInputSchema: z.ZodType<Prisma.CountryCreateWithoutChannelInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable(),
  homePageUrl: z.string().optional().nullable(),
  region: z.lazy(() => RegionCreateNestedOneWithoutCountryInputSchema),
  tools: z.lazy(() => ToolCreateNestedManyWithoutCountriesInputSchema).optional()
}).strict();

export const CountryUncheckedCreateWithoutChannelInputSchema: z.ZodType<Prisma.CountryUncheckedCreateWithoutChannelInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  region_id: z.number().int(),
  sortorder: z.string().optional().nullable(),
  homePageUrl: z.string().optional().nullable(),
  tools: z.lazy(() => ToolUncheckedCreateNestedManyWithoutCountriesInputSchema).optional()
}).strict();

export const CountryCreateOrConnectWithoutChannelInputSchema: z.ZodType<Prisma.CountryCreateOrConnectWithoutChannelInput> = z.object({
  where: z.lazy(() => CountryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CountryCreateWithoutChannelInputSchema),z.lazy(() => CountryUncheckedCreateWithoutChannelInputSchema) ]),
}).strict();

export const CountryCreateManyChannelInputEnvelopeSchema: z.ZodType<Prisma.CountryCreateManyChannelInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CountryCreateManyChannelInputSchema),z.lazy(() => CountryCreateManyChannelInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ChannelCategoryCreateWithoutChannelInputSchema: z.ZodType<Prisma.ChannelCategoryCreateWithoutChannelInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable()
}).strict();

export const ChannelCategoryUncheckedCreateWithoutChannelInputSchema: z.ZodType<Prisma.ChannelCategoryUncheckedCreateWithoutChannelInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable()
}).strict();

export const ChannelCategoryCreateOrConnectWithoutChannelInputSchema: z.ZodType<Prisma.ChannelCategoryCreateOrConnectWithoutChannelInput> = z.object({
  where: z.lazy(() => ChannelCategoryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ChannelCategoryCreateWithoutChannelInputSchema),z.lazy(() => ChannelCategoryUncheckedCreateWithoutChannelInputSchema) ]),
}).strict();

export const RegionUpsertWithoutChannelInputSchema: z.ZodType<Prisma.RegionUpsertWithoutChannelInput> = z.object({
  update: z.union([ z.lazy(() => RegionUpdateWithoutChannelInputSchema),z.lazy(() => RegionUncheckedUpdateWithoutChannelInputSchema) ]),
  create: z.union([ z.lazy(() => RegionCreateWithoutChannelInputSchema),z.lazy(() => RegionUncheckedCreateWithoutChannelInputSchema) ]),
  where: z.lazy(() => RegionWhereInputSchema).optional()
}).strict();

export const RegionUpdateToOneWithWhereWithoutChannelInputSchema: z.ZodType<Prisma.RegionUpdateToOneWithWhereWithoutChannelInput> = z.object({
  where: z.lazy(() => RegionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RegionUpdateWithoutChannelInputSchema),z.lazy(() => RegionUncheckedUpdateWithoutChannelInputSchema) ]),
}).strict();

export const RegionUpdateWithoutChannelInputSchema: z.ZodType<Prisma.RegionUpdateWithoutChannelInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortOrder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Country: z.lazy(() => CountryUpdateManyWithoutRegionNestedInputSchema).optional()
}).strict();

export const RegionUncheckedUpdateWithoutChannelInputSchema: z.ZodType<Prisma.RegionUncheckedUpdateWithoutChannelInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortOrder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Country: z.lazy(() => CountryUncheckedUpdateManyWithoutRegionNestedInputSchema).optional()
}).strict();

export const CountryUpsertWithWhereUniqueWithoutChannelInputSchema: z.ZodType<Prisma.CountryUpsertWithWhereUniqueWithoutChannelInput> = z.object({
  where: z.lazy(() => CountryWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CountryUpdateWithoutChannelInputSchema),z.lazy(() => CountryUncheckedUpdateWithoutChannelInputSchema) ]),
  create: z.union([ z.lazy(() => CountryCreateWithoutChannelInputSchema),z.lazy(() => CountryUncheckedCreateWithoutChannelInputSchema) ]),
}).strict();

export const CountryUpdateWithWhereUniqueWithoutChannelInputSchema: z.ZodType<Prisma.CountryUpdateWithWhereUniqueWithoutChannelInput> = z.object({
  where: z.lazy(() => CountryWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CountryUpdateWithoutChannelInputSchema),z.lazy(() => CountryUncheckedUpdateWithoutChannelInputSchema) ]),
}).strict();

export const CountryUpdateManyWithWhereWithoutChannelInputSchema: z.ZodType<Prisma.CountryUpdateManyWithWhereWithoutChannelInput> = z.object({
  where: z.lazy(() => CountryScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CountryUpdateManyMutationInputSchema),z.lazy(() => CountryUncheckedUpdateManyWithoutChannelInputSchema) ]),
}).strict();

export const ChannelCategoryUpsertWithoutChannelInputSchema: z.ZodType<Prisma.ChannelCategoryUpsertWithoutChannelInput> = z.object({
  update: z.union([ z.lazy(() => ChannelCategoryUpdateWithoutChannelInputSchema),z.lazy(() => ChannelCategoryUncheckedUpdateWithoutChannelInputSchema) ]),
  create: z.union([ z.lazy(() => ChannelCategoryCreateWithoutChannelInputSchema),z.lazy(() => ChannelCategoryUncheckedCreateWithoutChannelInputSchema) ]),
  where: z.lazy(() => ChannelCategoryWhereInputSchema).optional()
}).strict();

export const ChannelCategoryUpdateToOneWithWhereWithoutChannelInputSchema: z.ZodType<Prisma.ChannelCategoryUpdateToOneWithWhereWithoutChannelInput> = z.object({
  where: z.lazy(() => ChannelCategoryWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ChannelCategoryUpdateWithoutChannelInputSchema),z.lazy(() => ChannelCategoryUncheckedUpdateWithoutChannelInputSchema) ]),
}).strict();

export const ChannelCategoryUpdateWithoutChannelInputSchema: z.ZodType<Prisma.ChannelCategoryUpdateWithoutChannelInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ChannelCategoryUncheckedUpdateWithoutChannelInputSchema: z.ZodType<Prisma.ChannelCategoryUncheckedUpdateWithoutChannelInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ToolCreateWithoutBlobInputSchema: z.ZodType<Prisma.ToolCreateWithoutBlobInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  koksmat_masterdataref: z.string().optional().nullable(),
  koksmat_masterdata_id: z.string().optional().nullable(),
  koksmat_masterdata_etag: z.string().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.string(),
  status: z.string().optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.string().optional().nullable(),
  uploaded_icon: z.string().optional().nullable(),
  groupOwnerId: z.string().optional().nullable(),
  groupViewerId: z.string().optional().nullable(),
  category: z.lazy(() => CategoryCreateNestedOneWithoutToolInputSchema),
  purposes: z.lazy(() => PurposeCreateNestedManyWithoutToolsInputSchema).optional(),
  userProfiles: z.lazy(() => UserProfileCreateNestedManyWithoutToolsInputSchema).optional(),
  countries: z.lazy(() => CountryCreateNestedManyWithoutToolsInputSchema).optional(),
  ToolTexts: z.lazy(() => ToolTextsCreateNestedManyWithoutToolInputSchema).optional(),
  parent: z.lazy(() => ToolCreateNestedOneWithoutForksInputSchema).optional(),
  forks: z.lazy(() => ToolCreateNestedManyWithoutParentInputSchema).optional()
}).strict();

export const ToolUncheckedCreateWithoutBlobInputSchema: z.ZodType<Prisma.ToolUncheckedCreateWithoutBlobInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  koksmat_masterdataref: z.string().optional().nullable(),
  koksmat_masterdata_id: z.string().optional().nullable(),
  koksmat_masterdata_etag: z.string().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.string(),
  status: z.string().optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.string().optional().nullable(),
  uploaded_icon: z.string().optional().nullable(),
  categoryId: z.number().int(),
  parentId: z.number().int().optional().nullable(),
  groupOwnerId: z.string().optional().nullable(),
  groupViewerId: z.string().optional().nullable(),
  purposes: z.lazy(() => PurposeUncheckedCreateNestedManyWithoutToolsInputSchema).optional(),
  userProfiles: z.lazy(() => UserProfileUncheckedCreateNestedManyWithoutToolsInputSchema).optional(),
  countries: z.lazy(() => CountryUncheckedCreateNestedManyWithoutToolsInputSchema).optional(),
  ToolTexts: z.lazy(() => ToolTextsUncheckedCreateNestedManyWithoutToolInputSchema).optional(),
  forks: z.lazy(() => ToolUncheckedCreateNestedManyWithoutParentInputSchema).optional()
}).strict();

export const ToolCreateOrConnectWithoutBlobInputSchema: z.ZodType<Prisma.ToolCreateOrConnectWithoutBlobInput> = z.object({
  where: z.lazy(() => ToolWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ToolCreateWithoutBlobInputSchema),z.lazy(() => ToolUncheckedCreateWithoutBlobInputSchema) ]),
}).strict();

export const BlobResizedCreateWithoutBlobInputSchema: z.ZodType<Prisma.BlobResizedCreateWithoutBlobInput> = z.object({
  width: z.number().int(),
  data: z.instanceof(Buffer)
}).strict();

export const BlobResizedUncheckedCreateWithoutBlobInputSchema: z.ZodType<Prisma.BlobResizedUncheckedCreateWithoutBlobInput> = z.object({
  id: z.number().int().optional(),
  width: z.number().int(),
  data: z.instanceof(Buffer)
}).strict();

export const BlobResizedCreateOrConnectWithoutBlobInputSchema: z.ZodType<Prisma.BlobResizedCreateOrConnectWithoutBlobInput> = z.object({
  where: z.lazy(() => BlobResizedWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => BlobResizedCreateWithoutBlobInputSchema),z.lazy(() => BlobResizedUncheckedCreateWithoutBlobInputSchema) ]),
}).strict();

export const BlobResizedCreateManyBlobInputEnvelopeSchema: z.ZodType<Prisma.BlobResizedCreateManyBlobInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => BlobResizedCreateManyBlobInputSchema),z.lazy(() => BlobResizedCreateManyBlobInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ToolUpsertWithoutBlobInputSchema: z.ZodType<Prisma.ToolUpsertWithoutBlobInput> = z.object({
  update: z.union([ z.lazy(() => ToolUpdateWithoutBlobInputSchema),z.lazy(() => ToolUncheckedUpdateWithoutBlobInputSchema) ]),
  create: z.union([ z.lazy(() => ToolCreateWithoutBlobInputSchema),z.lazy(() => ToolUncheckedCreateWithoutBlobInputSchema) ]),
  where: z.lazy(() => ToolWhereInputSchema).optional()
}).strict();

export const ToolUpdateToOneWithWhereWithoutBlobInputSchema: z.ZodType<Prisma.ToolUpdateToOneWithWhereWithoutBlobInput> = z.object({
  where: z.lazy(() => ToolWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ToolUpdateWithoutBlobInputSchema),z.lazy(() => ToolUncheckedUpdateWithoutBlobInputSchema) ]),
}).strict();

export const ToolUpdateWithoutBlobInputSchema: z.ZodType<Prisma.ToolUpdateWithoutBlobInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uploaded_icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupViewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.lazy(() => CategoryUpdateOneRequiredWithoutToolNestedInputSchema).optional(),
  purposes: z.lazy(() => PurposeUpdateManyWithoutToolsNestedInputSchema).optional(),
  userProfiles: z.lazy(() => UserProfileUpdateManyWithoutToolsNestedInputSchema).optional(),
  countries: z.lazy(() => CountryUpdateManyWithoutToolsNestedInputSchema).optional(),
  ToolTexts: z.lazy(() => ToolTextsUpdateManyWithoutToolNestedInputSchema).optional(),
  parent: z.lazy(() => ToolUpdateOneWithoutForksNestedInputSchema).optional(),
  forks: z.lazy(() => ToolUpdateManyWithoutParentNestedInputSchema).optional()
}).strict();

export const ToolUncheckedUpdateWithoutBlobInputSchema: z.ZodType<Prisma.ToolUncheckedUpdateWithoutBlobInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uploaded_icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parentId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupViewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  purposes: z.lazy(() => PurposeUncheckedUpdateManyWithoutToolsNestedInputSchema).optional(),
  userProfiles: z.lazy(() => UserProfileUncheckedUpdateManyWithoutToolsNestedInputSchema).optional(),
  countries: z.lazy(() => CountryUncheckedUpdateManyWithoutToolsNestedInputSchema).optional(),
  ToolTexts: z.lazy(() => ToolTextsUncheckedUpdateManyWithoutToolNestedInputSchema).optional(),
  forks: z.lazy(() => ToolUncheckedUpdateManyWithoutParentNestedInputSchema).optional()
}).strict();

export const BlobResizedUpsertWithWhereUniqueWithoutBlobInputSchema: z.ZodType<Prisma.BlobResizedUpsertWithWhereUniqueWithoutBlobInput> = z.object({
  where: z.lazy(() => BlobResizedWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => BlobResizedUpdateWithoutBlobInputSchema),z.lazy(() => BlobResizedUncheckedUpdateWithoutBlobInputSchema) ]),
  create: z.union([ z.lazy(() => BlobResizedCreateWithoutBlobInputSchema),z.lazy(() => BlobResizedUncheckedCreateWithoutBlobInputSchema) ]),
}).strict();

export const BlobResizedUpdateWithWhereUniqueWithoutBlobInputSchema: z.ZodType<Prisma.BlobResizedUpdateWithWhereUniqueWithoutBlobInput> = z.object({
  where: z.lazy(() => BlobResizedWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => BlobResizedUpdateWithoutBlobInputSchema),z.lazy(() => BlobResizedUncheckedUpdateWithoutBlobInputSchema) ]),
}).strict();

export const BlobResizedUpdateManyWithWhereWithoutBlobInputSchema: z.ZodType<Prisma.BlobResizedUpdateManyWithWhereWithoutBlobInput> = z.object({
  where: z.lazy(() => BlobResizedScalarWhereInputSchema),
  data: z.union([ z.lazy(() => BlobResizedUpdateManyMutationInputSchema),z.lazy(() => BlobResizedUncheckedUpdateManyWithoutBlobInputSchema) ]),
}).strict();

export const BlobResizedScalarWhereInputSchema: z.ZodType<Prisma.BlobResizedScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => BlobResizedScalarWhereInputSchema),z.lazy(() => BlobResizedScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => BlobResizedScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BlobResizedScalarWhereInputSchema),z.lazy(() => BlobResizedScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  width: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  data: z.union([ z.lazy(() => BytesFilterSchema),z.instanceof(Buffer) ]).optional(),
  blobId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const BlobCreateWithoutBlobResizedInputSchema: z.ZodType<Prisma.BlobCreateWithoutBlobResizedInput> = z.object({
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  hash: z.string(),
  content_type: z.string(),
  base64: z.string(),
  data: z.instanceof(Buffer),
  source_tool: z.lazy(() => ToolCreateNestedOneWithoutBlobInputSchema).optional()
}).strict();

export const BlobUncheckedCreateWithoutBlobResizedInputSchema: z.ZodType<Prisma.BlobUncheckedCreateWithoutBlobResizedInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  hash: z.string(),
  content_type: z.string(),
  base64: z.string(),
  data: z.instanceof(Buffer),
  source_tool_id: z.number().int().optional().nullable()
}).strict();

export const BlobCreateOrConnectWithoutBlobResizedInputSchema: z.ZodType<Prisma.BlobCreateOrConnectWithoutBlobResizedInput> = z.object({
  where: z.lazy(() => BlobWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => BlobCreateWithoutBlobResizedInputSchema),z.lazy(() => BlobUncheckedCreateWithoutBlobResizedInputSchema) ]),
}).strict();

export const BlobUpsertWithoutBlobResizedInputSchema: z.ZodType<Prisma.BlobUpsertWithoutBlobResizedInput> = z.object({
  update: z.union([ z.lazy(() => BlobUpdateWithoutBlobResizedInputSchema),z.lazy(() => BlobUncheckedUpdateWithoutBlobResizedInputSchema) ]),
  create: z.union([ z.lazy(() => BlobCreateWithoutBlobResizedInputSchema),z.lazy(() => BlobUncheckedCreateWithoutBlobResizedInputSchema) ]),
  where: z.lazy(() => BlobWhereInputSchema).optional()
}).strict();

export const BlobUpdateToOneWithWhereWithoutBlobResizedInputSchema: z.ZodType<Prisma.BlobUpdateToOneWithWhereWithoutBlobResizedInput> = z.object({
  where: z.lazy(() => BlobWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => BlobUpdateWithoutBlobResizedInputSchema),z.lazy(() => BlobUncheckedUpdateWithoutBlobResizedInputSchema) ]),
}).strict();

export const BlobUpdateWithoutBlobResizedInputSchema: z.ZodType<Prisma.BlobUpdateWithoutBlobResizedInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  hash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content_type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  base64: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.instanceof(Buffer),z.lazy(() => BytesFieldUpdateOperationsInputSchema) ]).optional(),
  source_tool: z.lazy(() => ToolUpdateOneWithoutBlobNestedInputSchema).optional()
}).strict();

export const BlobUncheckedUpdateWithoutBlobResizedInputSchema: z.ZodType<Prisma.BlobUncheckedUpdateWithoutBlobResizedInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  hash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content_type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  base64: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.instanceof(Buffer),z.lazy(() => BytesFieldUpdateOperationsInputSchema) ]).optional(),
  source_tool_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const BoardCreateManyParentInputSchema: z.ZodType<Prisma.BoardCreateManyParentInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.string().optional().nullable(),
  layout: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  groupOwnerId: z.string().optional().nullable(),
  groupViewerId: z.string().optional().nullable()
}).strict();

export const UserProfileCreateManyBoardInputSchema: z.ZodType<Prisma.UserProfileCreateManyBoardInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  koksmat_masterdataref: z.string().optional().nullable(),
  koksmat_masterdata_id: z.string().optional().nullable(),
  koksmat_masterdata_etag: z.string().optional().nullable(),
  name: z.string(),
  displayName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  email: z.string(),
  status: z.string().optional().nullable(),
  company: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  companykey: z.string().optional().nullable(),
  isExternal: z.boolean().optional(),
  CurrentEmail: z.string().optional().nullable(),
  OldEmail: z.string().optional().nullable(),
  OnPremisesId: z.string().optional().nullable(),
  lastLogin: z.coerce.date().optional().nullable(),
  language: z.string().optional().nullable(),
  homePage: z.string().optional().nullable()
}).strict();

export const BoardUpdateWithoutParentInputSchema: z.ZodType<Prisma.BoardUpdateWithoutParentInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  layout: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  groupOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupViewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  forks: z.lazy(() => BoardUpdateManyWithoutParentNestedInputSchema).optional(),
  managedBy: z.lazy(() => UserProfileUpdateManyWithoutBoardNestedInputSchema).optional()
}).strict();

export const BoardUncheckedUpdateWithoutParentInputSchema: z.ZodType<Prisma.BoardUncheckedUpdateWithoutParentInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  layout: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  groupOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupViewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  forks: z.lazy(() => BoardUncheckedUpdateManyWithoutParentNestedInputSchema).optional(),
  managedBy: z.lazy(() => UserProfileUncheckedUpdateManyWithoutBoardNestedInputSchema).optional()
}).strict();

export const BoardUncheckedUpdateManyWithoutParentInputSchema: z.ZodType<Prisma.BoardUncheckedUpdateManyWithoutParentInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  layout: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  groupOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupViewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserProfileUpdateWithoutBoardInputSchema: z.ZodType<Prisma.UserProfileUpdateWithoutBoardInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  displayName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  company: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companykey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isExternal: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  CurrentEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OldEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OnPremisesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLogin: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  homePage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tools: z.lazy(() => ToolUpdateManyWithoutUserProfilesNestedInputSchema).optional(),
  Session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  ToolGroup: z.lazy(() => ToolGroupUpdateManyWithoutOwnersNestedInputSchema).optional(),
  roles: z.lazy(() => UserRoleUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const UserProfileUncheckedUpdateWithoutBoardInputSchema: z.ZodType<Prisma.UserProfileUncheckedUpdateWithoutBoardInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  displayName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  company: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companykey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isExternal: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  CurrentEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OldEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OnPremisesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLogin: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  homePage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tools: z.lazy(() => ToolUncheckedUpdateManyWithoutUserProfilesNestedInputSchema).optional(),
  Session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ToolGroup: z.lazy(() => ToolGroupUncheckedUpdateManyWithoutOwnersNestedInputSchema).optional(),
  roles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const UserProfileUncheckedUpdateManyWithoutBoardInputSchema: z.ZodType<Prisma.UserProfileUncheckedUpdateManyWithoutBoardInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  displayName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  company: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companykey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isExternal: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  CurrentEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OldEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OnPremisesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLogin: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  homePage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ToolCreateManyCategoryInputSchema: z.ZodType<Prisma.ToolCreateManyCategoryInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  koksmat_masterdataref: z.string().optional().nullable(),
  koksmat_masterdata_id: z.string().optional().nullable(),
  koksmat_masterdata_etag: z.string().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.string(),
  status: z.string().optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.string().optional().nullable(),
  uploaded_icon: z.string().optional().nullable(),
  parentId: z.number().int().optional().nullable(),
  groupOwnerId: z.string().optional().nullable(),
  groupViewerId: z.string().optional().nullable()
}).strict();

export const ToolUpdateWithoutCategoryInputSchema: z.ZodType<Prisma.ToolUpdateWithoutCategoryInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uploaded_icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupViewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  purposes: z.lazy(() => PurposeUpdateManyWithoutToolsNestedInputSchema).optional(),
  userProfiles: z.lazy(() => UserProfileUpdateManyWithoutToolsNestedInputSchema).optional(),
  countries: z.lazy(() => CountryUpdateManyWithoutToolsNestedInputSchema).optional(),
  ToolTexts: z.lazy(() => ToolTextsUpdateManyWithoutToolNestedInputSchema).optional(),
  parent: z.lazy(() => ToolUpdateOneWithoutForksNestedInputSchema).optional(),
  forks: z.lazy(() => ToolUpdateManyWithoutParentNestedInputSchema).optional(),
  Blob: z.lazy(() => BlobUpdateManyWithoutSource_toolNestedInputSchema).optional()
}).strict();

export const ToolUncheckedUpdateWithoutCategoryInputSchema: z.ZodType<Prisma.ToolUncheckedUpdateWithoutCategoryInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uploaded_icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parentId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupViewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  purposes: z.lazy(() => PurposeUncheckedUpdateManyWithoutToolsNestedInputSchema).optional(),
  userProfiles: z.lazy(() => UserProfileUncheckedUpdateManyWithoutToolsNestedInputSchema).optional(),
  countries: z.lazy(() => CountryUncheckedUpdateManyWithoutToolsNestedInputSchema).optional(),
  ToolTexts: z.lazy(() => ToolTextsUncheckedUpdateManyWithoutToolNestedInputSchema).optional(),
  forks: z.lazy(() => ToolUncheckedUpdateManyWithoutParentNestedInputSchema).optional(),
  Blob: z.lazy(() => BlobUncheckedUpdateManyWithoutSource_toolNestedInputSchema).optional()
}).strict();

export const ToolUncheckedUpdateManyWithoutCategoryInputSchema: z.ZodType<Prisma.ToolUncheckedUpdateManyWithoutCategoryInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uploaded_icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parentId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupViewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ToolUpdateWithoutCountriesInputSchema: z.ZodType<Prisma.ToolUpdateWithoutCountriesInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uploaded_icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupViewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.lazy(() => CategoryUpdateOneRequiredWithoutToolNestedInputSchema).optional(),
  purposes: z.lazy(() => PurposeUpdateManyWithoutToolsNestedInputSchema).optional(),
  userProfiles: z.lazy(() => UserProfileUpdateManyWithoutToolsNestedInputSchema).optional(),
  ToolTexts: z.lazy(() => ToolTextsUpdateManyWithoutToolNestedInputSchema).optional(),
  parent: z.lazy(() => ToolUpdateOneWithoutForksNestedInputSchema).optional(),
  forks: z.lazy(() => ToolUpdateManyWithoutParentNestedInputSchema).optional(),
  Blob: z.lazy(() => BlobUpdateManyWithoutSource_toolNestedInputSchema).optional()
}).strict();

export const ToolUncheckedUpdateWithoutCountriesInputSchema: z.ZodType<Prisma.ToolUncheckedUpdateWithoutCountriesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uploaded_icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parentId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupViewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  purposes: z.lazy(() => PurposeUncheckedUpdateManyWithoutToolsNestedInputSchema).optional(),
  userProfiles: z.lazy(() => UserProfileUncheckedUpdateManyWithoutToolsNestedInputSchema).optional(),
  ToolTexts: z.lazy(() => ToolTextsUncheckedUpdateManyWithoutToolNestedInputSchema).optional(),
  forks: z.lazy(() => ToolUncheckedUpdateManyWithoutParentNestedInputSchema).optional(),
  Blob: z.lazy(() => BlobUncheckedUpdateManyWithoutSource_toolNestedInputSchema).optional()
}).strict();

export const ToolUncheckedUpdateManyWithoutCountriesInputSchema: z.ZodType<Prisma.ToolUncheckedUpdateManyWithoutCountriesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uploaded_icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parentId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupViewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ToolTextsCreateManyLanguageInputSchema: z.ZodType<Prisma.ToolTextsCreateManyLanguageInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  toolId: z.number().int()
}).strict();

export const ToolTextsUpdateWithoutLanguageInputSchema: z.ZodType<Prisma.ToolTextsUpdateWithoutLanguageInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tool: z.lazy(() => ToolUpdateOneRequiredWithoutToolTextsNestedInputSchema).optional()
}).strict();

export const ToolTextsUncheckedUpdateWithoutLanguageInputSchema: z.ZodType<Prisma.ToolTextsUncheckedUpdateWithoutLanguageInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toolId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ToolTextsUncheckedUpdateManyWithoutLanguageInputSchema: z.ZodType<Prisma.ToolTextsUncheckedUpdateManyWithoutLanguageInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toolId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ToolUpdateWithoutPurposesInputSchema: z.ZodType<Prisma.ToolUpdateWithoutPurposesInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uploaded_icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupViewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.lazy(() => CategoryUpdateOneRequiredWithoutToolNestedInputSchema).optional(),
  userProfiles: z.lazy(() => UserProfileUpdateManyWithoutToolsNestedInputSchema).optional(),
  countries: z.lazy(() => CountryUpdateManyWithoutToolsNestedInputSchema).optional(),
  ToolTexts: z.lazy(() => ToolTextsUpdateManyWithoutToolNestedInputSchema).optional(),
  parent: z.lazy(() => ToolUpdateOneWithoutForksNestedInputSchema).optional(),
  forks: z.lazy(() => ToolUpdateManyWithoutParentNestedInputSchema).optional(),
  Blob: z.lazy(() => BlobUpdateManyWithoutSource_toolNestedInputSchema).optional()
}).strict();

export const ToolUncheckedUpdateWithoutPurposesInputSchema: z.ZodType<Prisma.ToolUncheckedUpdateWithoutPurposesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uploaded_icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parentId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupViewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userProfiles: z.lazy(() => UserProfileUncheckedUpdateManyWithoutToolsNestedInputSchema).optional(),
  countries: z.lazy(() => CountryUncheckedUpdateManyWithoutToolsNestedInputSchema).optional(),
  ToolTexts: z.lazy(() => ToolTextsUncheckedUpdateManyWithoutToolNestedInputSchema).optional(),
  forks: z.lazy(() => ToolUncheckedUpdateManyWithoutParentNestedInputSchema).optional(),
  Blob: z.lazy(() => BlobUncheckedUpdateManyWithoutSource_toolNestedInputSchema).optional()
}).strict();

export const ToolUncheckedUpdateManyWithoutPurposesInputSchema: z.ZodType<Prisma.ToolUncheckedUpdateManyWithoutPurposesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uploaded_icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parentId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupViewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CountryCreateManyRegionInputSchema: z.ZodType<Prisma.CountryCreateManyRegionInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable(),
  channelId: z.number().int().optional().nullable(),
  homePageUrl: z.string().optional().nullable()
}).strict();

export const ChannelCreateManyRegionInputSchema: z.ZodType<Prisma.ChannelCreateManyRegionInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  mandatory: z.boolean().optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable(),
  externalGroup: z.string().optional().nullable(),
  categoryId: z.number().int().optional().nullable()
}).strict();

export const CountryUpdateWithoutRegionInputSchema: z.ZodType<Prisma.CountryUpdateWithoutRegionInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  homePageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Channel: z.lazy(() => ChannelUpdateOneWithoutCountriesNestedInputSchema).optional(),
  tools: z.lazy(() => ToolUpdateManyWithoutCountriesNestedInputSchema).optional()
}).strict();

export const CountryUncheckedUpdateWithoutRegionInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateWithoutRegionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  channelId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  homePageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tools: z.lazy(() => ToolUncheckedUpdateManyWithoutCountriesNestedInputSchema).optional()
}).strict();

export const CountryUncheckedUpdateManyWithoutRegionInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateManyWithoutRegionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  channelId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  homePageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ChannelUpdateWithoutRegionInputSchema: z.ZodType<Prisma.ChannelUpdateWithoutRegionInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mandatory: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  externalGroup: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  countries: z.lazy(() => CountryUpdateManyWithoutChannelNestedInputSchema).optional(),
  category: z.lazy(() => ChannelCategoryUpdateOneWithoutChannelNestedInputSchema).optional()
}).strict();

export const ChannelUncheckedUpdateWithoutRegionInputSchema: z.ZodType<Prisma.ChannelUncheckedUpdateWithoutRegionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mandatory: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  externalGroup: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  countries: z.lazy(() => CountryUncheckedUpdateManyWithoutChannelNestedInputSchema).optional()
}).strict();

export const ChannelUncheckedUpdateManyWithoutRegionInputSchema: z.ZodType<Prisma.ChannelUncheckedUpdateManyWithoutRegionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mandatory: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  externalGroup: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ToolTextsCreateManyToolInputSchema: z.ZodType<Prisma.ToolTextsCreateManyToolInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  languageId: z.number().int()
}).strict();

export const ToolCreateManyParentInputSchema: z.ZodType<Prisma.ToolCreateManyParentInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  koksmat_masterdataref: z.string().optional().nullable(),
  koksmat_masterdata_id: z.string().optional().nullable(),
  koksmat_masterdata_etag: z.string().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.string(),
  status: z.string().optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.string().optional().nullable(),
  uploaded_icon: z.string().optional().nullable(),
  categoryId: z.number().int(),
  groupOwnerId: z.string().optional().nullable(),
  groupViewerId: z.string().optional().nullable()
}).strict();

export const BlobCreateManySource_toolInputSchema: z.ZodType<Prisma.BlobCreateManySource_toolInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  hash: z.string(),
  content_type: z.string(),
  base64: z.string(),
  data: z.instanceof(Buffer)
}).strict();

export const PurposeUpdateWithoutToolsInputSchema: z.ZodType<Prisma.PurposeUpdateWithoutToolsInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PurposeUncheckedUpdateWithoutToolsInputSchema: z.ZodType<Prisma.PurposeUncheckedUpdateWithoutToolsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PurposeUncheckedUpdateManyWithoutToolsInputSchema: z.ZodType<Prisma.PurposeUncheckedUpdateManyWithoutToolsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserProfileUpdateWithoutToolsInputSchema: z.ZodType<Prisma.UserProfileUpdateWithoutToolsInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  displayName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  company: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companykey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isExternal: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  CurrentEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OldEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OnPremisesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLogin: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  homePage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  ToolGroup: z.lazy(() => ToolGroupUpdateManyWithoutOwnersNestedInputSchema).optional(),
  roles: z.lazy(() => UserRoleUpdateManyWithoutUsersNestedInputSchema).optional(),
  Board: z.lazy(() => BoardUpdateOneWithoutManagedByNestedInputSchema).optional()
}).strict();

export const UserProfileUncheckedUpdateWithoutToolsInputSchema: z.ZodType<Prisma.UserProfileUncheckedUpdateWithoutToolsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  displayName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  company: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companykey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isExternal: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  CurrentEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OldEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OnPremisesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boardId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLogin: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  homePage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ToolGroup: z.lazy(() => ToolGroupUncheckedUpdateManyWithoutOwnersNestedInputSchema).optional(),
  roles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const UserProfileUncheckedUpdateManyWithoutToolsInputSchema: z.ZodType<Prisma.UserProfileUncheckedUpdateManyWithoutToolsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  displayName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  company: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companykey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isExternal: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  CurrentEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OldEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OnPremisesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boardId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLogin: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  homePage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CountryUpdateWithoutToolsInputSchema: z.ZodType<Prisma.CountryUpdateWithoutToolsInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  homePageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  region: z.lazy(() => RegionUpdateOneRequiredWithoutCountryNestedInputSchema).optional(),
  Channel: z.lazy(() => ChannelUpdateOneWithoutCountriesNestedInputSchema).optional()
}).strict();

export const CountryUncheckedUpdateWithoutToolsInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateWithoutToolsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  region_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  channelId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  homePageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CountryUncheckedUpdateManyWithoutToolsInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateManyWithoutToolsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  region_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  channelId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  homePageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ToolTextsUpdateWithoutToolInputSchema: z.ZodType<Prisma.ToolTextsUpdateWithoutToolInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.lazy(() => LanguageUpdateOneRequiredWithoutToolTextsNestedInputSchema).optional()
}).strict();

export const ToolTextsUncheckedUpdateWithoutToolInputSchema: z.ZodType<Prisma.ToolTextsUncheckedUpdateWithoutToolInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  languageId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ToolTextsUncheckedUpdateManyWithoutToolInputSchema: z.ZodType<Prisma.ToolTextsUncheckedUpdateManyWithoutToolInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  languageId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ToolUpdateWithoutParentInputSchema: z.ZodType<Prisma.ToolUpdateWithoutParentInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uploaded_icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupViewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.lazy(() => CategoryUpdateOneRequiredWithoutToolNestedInputSchema).optional(),
  purposes: z.lazy(() => PurposeUpdateManyWithoutToolsNestedInputSchema).optional(),
  userProfiles: z.lazy(() => UserProfileUpdateManyWithoutToolsNestedInputSchema).optional(),
  countries: z.lazy(() => CountryUpdateManyWithoutToolsNestedInputSchema).optional(),
  ToolTexts: z.lazy(() => ToolTextsUpdateManyWithoutToolNestedInputSchema).optional(),
  forks: z.lazy(() => ToolUpdateManyWithoutParentNestedInputSchema).optional(),
  Blob: z.lazy(() => BlobUpdateManyWithoutSource_toolNestedInputSchema).optional()
}).strict();

export const ToolUncheckedUpdateWithoutParentInputSchema: z.ZodType<Prisma.ToolUncheckedUpdateWithoutParentInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uploaded_icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  groupOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupViewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  purposes: z.lazy(() => PurposeUncheckedUpdateManyWithoutToolsNestedInputSchema).optional(),
  userProfiles: z.lazy(() => UserProfileUncheckedUpdateManyWithoutToolsNestedInputSchema).optional(),
  countries: z.lazy(() => CountryUncheckedUpdateManyWithoutToolsNestedInputSchema).optional(),
  ToolTexts: z.lazy(() => ToolTextsUncheckedUpdateManyWithoutToolNestedInputSchema).optional(),
  forks: z.lazy(() => ToolUncheckedUpdateManyWithoutParentNestedInputSchema).optional(),
  Blob: z.lazy(() => BlobUncheckedUpdateManyWithoutSource_toolNestedInputSchema).optional()
}).strict();

export const ToolUncheckedUpdateManyWithoutParentInputSchema: z.ZodType<Prisma.ToolUncheckedUpdateManyWithoutParentInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uploaded_icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  groupOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupViewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const BlobUpdateWithoutSource_toolInputSchema: z.ZodType<Prisma.BlobUpdateWithoutSource_toolInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  hash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content_type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  base64: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.instanceof(Buffer),z.lazy(() => BytesFieldUpdateOperationsInputSchema) ]).optional(),
  BlobResized: z.lazy(() => BlobResizedUpdateManyWithoutBlobNestedInputSchema).optional()
}).strict();

export const BlobUncheckedUpdateWithoutSource_toolInputSchema: z.ZodType<Prisma.BlobUncheckedUpdateWithoutSource_toolInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  hash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content_type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  base64: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.instanceof(Buffer),z.lazy(() => BytesFieldUpdateOperationsInputSchema) ]).optional(),
  BlobResized: z.lazy(() => BlobResizedUncheckedUpdateManyWithoutBlobNestedInputSchema).optional()
}).strict();

export const BlobUncheckedUpdateManyWithoutSource_toolInputSchema: z.ZodType<Prisma.BlobUncheckedUpdateManyWithoutSource_toolInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  hash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content_type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  base64: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.instanceof(Buffer),z.lazy(() => BytesFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserProfileUpdateWithoutToolGroupInputSchema: z.ZodType<Prisma.UserProfileUpdateWithoutToolGroupInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  displayName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  company: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companykey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isExternal: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  CurrentEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OldEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OnPremisesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLogin: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  homePage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tools: z.lazy(() => ToolUpdateManyWithoutUserProfilesNestedInputSchema).optional(),
  Session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  roles: z.lazy(() => UserRoleUpdateManyWithoutUsersNestedInputSchema).optional(),
  Board: z.lazy(() => BoardUpdateOneWithoutManagedByNestedInputSchema).optional()
}).strict();

export const UserProfileUncheckedUpdateWithoutToolGroupInputSchema: z.ZodType<Prisma.UserProfileUncheckedUpdateWithoutToolGroupInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  displayName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  company: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companykey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isExternal: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  CurrentEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OldEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OnPremisesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boardId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLogin: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  homePage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tools: z.lazy(() => ToolUncheckedUpdateManyWithoutUserProfilesNestedInputSchema).optional(),
  Session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  roles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const UserProfileUncheckedUpdateManyWithoutToolGroupInputSchema: z.ZodType<Prisma.UserProfileUncheckedUpdateManyWithoutToolGroupInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  displayName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  company: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companykey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isExternal: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  CurrentEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OldEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OnPremisesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boardId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLogin: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  homePage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserGroupUpdateWithoutToolGroupInputSchema: z.ZodType<Prisma.UserGroupUpdateWithoutToolGroupInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserGroupUncheckedUpdateWithoutToolGroupInputSchema: z.ZodType<Prisma.UserGroupUncheckedUpdateWithoutToolGroupInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserGroupUncheckedUpdateManyWithoutToolGroupInputSchema: z.ZodType<Prisma.UserGroupUncheckedUpdateManyWithoutToolGroupInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ToolGroupUpdateWithoutUserGroupsInputSchema: z.ZodType<Prisma.ToolGroupUpdateWithoutUserGroupsInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  visibility: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
  owners: z.lazy(() => UserProfileUpdateManyWithoutToolGroupNestedInputSchema).optional()
}).strict();

export const ToolGroupUncheckedUpdateWithoutUserGroupsInputSchema: z.ZodType<Prisma.ToolGroupUncheckedUpdateWithoutUserGroupsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  visibility: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
  owners: z.lazy(() => UserProfileUncheckedUpdateManyWithoutToolGroupNestedInputSchema).optional()
}).strict();

export const ToolGroupUncheckedUpdateManyWithoutUserGroupsInputSchema: z.ZodType<Prisma.ToolGroupUncheckedUpdateManyWithoutUserGroupsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  visibility: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionCreateManyUserInputSchema: z.ZodType<Prisma.SessionCreateManyUserInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const ToolUpdateWithoutUserProfilesInputSchema: z.ZodType<Prisma.ToolUpdateWithoutUserProfilesInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uploaded_icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupViewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.lazy(() => CategoryUpdateOneRequiredWithoutToolNestedInputSchema).optional(),
  purposes: z.lazy(() => PurposeUpdateManyWithoutToolsNestedInputSchema).optional(),
  countries: z.lazy(() => CountryUpdateManyWithoutToolsNestedInputSchema).optional(),
  ToolTexts: z.lazy(() => ToolTextsUpdateManyWithoutToolNestedInputSchema).optional(),
  parent: z.lazy(() => ToolUpdateOneWithoutForksNestedInputSchema).optional(),
  forks: z.lazy(() => ToolUpdateManyWithoutParentNestedInputSchema).optional(),
  Blob: z.lazy(() => BlobUpdateManyWithoutSource_toolNestedInputSchema).optional()
}).strict();

export const ToolUncheckedUpdateWithoutUserProfilesInputSchema: z.ZodType<Prisma.ToolUncheckedUpdateWithoutUserProfilesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uploaded_icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parentId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupViewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  purposes: z.lazy(() => PurposeUncheckedUpdateManyWithoutToolsNestedInputSchema).optional(),
  countries: z.lazy(() => CountryUncheckedUpdateManyWithoutToolsNestedInputSchema).optional(),
  ToolTexts: z.lazy(() => ToolTextsUncheckedUpdateManyWithoutToolNestedInputSchema).optional(),
  forks: z.lazy(() => ToolUncheckedUpdateManyWithoutParentNestedInputSchema).optional(),
  Blob: z.lazy(() => BlobUncheckedUpdateManyWithoutSource_toolNestedInputSchema).optional()
}).strict();

export const ToolUncheckedUpdateManyWithoutUserProfilesInputSchema: z.ZodType<Prisma.ToolUncheckedUpdateManyWithoutUserProfilesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  documents: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uploaded_icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parentId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  groupViewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SessionUpdateWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateWithoutUserInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const SessionUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const SessionUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const ToolGroupUpdateWithoutOwnersInputSchema: z.ZodType<Prisma.ToolGroupUpdateWithoutOwnersInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  visibility: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
  userGroups: z.lazy(() => UserGroupUpdateManyWithoutToolGroupNestedInputSchema).optional()
}).strict();

export const ToolGroupUncheckedUpdateWithoutOwnersInputSchema: z.ZodType<Prisma.ToolGroupUncheckedUpdateWithoutOwnersInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  visibility: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
  userGroups: z.lazy(() => UserGroupUncheckedUpdateManyWithoutToolGroupNestedInputSchema).optional()
}).strict();

export const ToolGroupUncheckedUpdateManyWithoutOwnersInputSchema: z.ZodType<Prisma.ToolGroupUncheckedUpdateManyWithoutOwnersInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  visibility: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserRoleUpdateWithoutUsersInputSchema: z.ZodType<Prisma.UserRoleUpdateWithoutUsersInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserRoleUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.UserRoleUncheckedUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserRoleUncheckedUpdateManyWithoutUsersInputSchema: z.ZodType<Prisma.UserRoleUncheckedUpdateManyWithoutUsersInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserProfileUpdateWithoutRolesInputSchema: z.ZodType<Prisma.UserProfileUpdateWithoutRolesInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  displayName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  company: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companykey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isExternal: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  CurrentEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OldEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OnPremisesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLogin: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  homePage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tools: z.lazy(() => ToolUpdateManyWithoutUserProfilesNestedInputSchema).optional(),
  Session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  ToolGroup: z.lazy(() => ToolGroupUpdateManyWithoutOwnersNestedInputSchema).optional(),
  Board: z.lazy(() => BoardUpdateOneWithoutManagedByNestedInputSchema).optional()
}).strict();

export const UserProfileUncheckedUpdateWithoutRolesInputSchema: z.ZodType<Prisma.UserProfileUncheckedUpdateWithoutRolesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  displayName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  company: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companykey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isExternal: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  CurrentEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OldEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OnPremisesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boardId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLogin: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  homePage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tools: z.lazy(() => ToolUncheckedUpdateManyWithoutUserProfilesNestedInputSchema).optional(),
  Session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ToolGroup: z.lazy(() => ToolGroupUncheckedUpdateManyWithoutOwnersNestedInputSchema).optional()
}).strict();

export const UserProfileUncheckedUpdateManyWithoutRolesInputSchema: z.ZodType<Prisma.UserProfileUncheckedUpdateManyWithoutRolesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdataref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  koksmat_masterdata_etag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  displayName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  company: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companykey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isExternal: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  CurrentEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OldEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OnPremisesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boardId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLogin: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  homePage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ChannelCreateManyCategoryInputSchema: z.ZodType<Prisma.ChannelCreateManyCategoryInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  mandatory: z.boolean().optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.string().optional().nullable(),
  regionId: z.number().int().optional().nullable(),
  externalGroup: z.string().optional().nullable()
}).strict();

export const ChannelUpdateWithoutCategoryInputSchema: z.ZodType<Prisma.ChannelUpdateWithoutCategoryInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mandatory: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  externalGroup: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  region: z.lazy(() => RegionUpdateOneWithoutChannelNestedInputSchema).optional(),
  countries: z.lazy(() => CountryUpdateManyWithoutChannelNestedInputSchema).optional()
}).strict();

export const ChannelUncheckedUpdateWithoutCategoryInputSchema: z.ZodType<Prisma.ChannelUncheckedUpdateWithoutCategoryInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mandatory: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  regionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  externalGroup: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  countries: z.lazy(() => CountryUncheckedUpdateManyWithoutChannelNestedInputSchema).optional()
}).strict();

export const ChannelUncheckedUpdateManyWithoutCategoryInputSchema: z.ZodType<Prisma.ChannelUncheckedUpdateManyWithoutCategoryInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mandatory: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  regionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  externalGroup: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CountryCreateManyChannelInputSchema: z.ZodType<Prisma.CountryCreateManyChannelInput> = z.object({
  id: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  region_id: z.number().int(),
  sortorder: z.string().optional().nullable(),
  homePageUrl: z.string().optional().nullable()
}).strict();

export const CountryUpdateWithoutChannelInputSchema: z.ZodType<Prisma.CountryUpdateWithoutChannelInput> = z.object({
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  homePageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  region: z.lazy(() => RegionUpdateOneRequiredWithoutCountryNestedInputSchema).optional(),
  tools: z.lazy(() => ToolUpdateManyWithoutCountriesNestedInputSchema).optional()
}).strict();

export const CountryUncheckedUpdateWithoutChannelInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateWithoutChannelInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  region_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  homePageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tools: z.lazy(() => ToolUncheckedUpdateManyWithoutCountriesNestedInputSchema).optional()
}).strict();

export const CountryUncheckedUpdateManyWithoutChannelInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateManyWithoutChannelInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  region_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sortorder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  homePageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const BlobResizedCreateManyBlobInputSchema: z.ZodType<Prisma.BlobResizedCreateManyBlobInput> = z.object({
  id: z.number().int().optional(),
  width: z.number().int(),
  data: z.instanceof(Buffer)
}).strict();

export const BlobResizedUpdateWithoutBlobInputSchema: z.ZodType<Prisma.BlobResizedUpdateWithoutBlobInput> = z.object({
  width: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.instanceof(Buffer),z.lazy(() => BytesFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const BlobResizedUncheckedUpdateWithoutBlobInputSchema: z.ZodType<Prisma.BlobResizedUncheckedUpdateWithoutBlobInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  width: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.instanceof(Buffer),z.lazy(() => BytesFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const BlobResizedUncheckedUpdateManyWithoutBlobInputSchema: z.ZodType<Prisma.BlobResizedUncheckedUpdateManyWithoutBlobInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  width: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.instanceof(Buffer),z.lazy(() => BytesFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

/////////////////////////////////////////
// ARGS
/////////////////////////////////////////

export const SynchronizationLogFindFirstArgsSchema: z.ZodType<Prisma.SynchronizationLogFindFirstArgs> = z.object({
  select: SynchronizationLogSelectSchema.optional(),
  where: SynchronizationLogWhereInputSchema.optional(),
  orderBy: z.union([ SynchronizationLogOrderByWithRelationInputSchema.array(),SynchronizationLogOrderByWithRelationInputSchema ]).optional(),
  cursor: SynchronizationLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SynchronizationLogScalarFieldEnumSchema,SynchronizationLogScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SynchronizationLogFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SynchronizationLogFindFirstOrThrowArgs> = z.object({
  select: SynchronizationLogSelectSchema.optional(),
  where: SynchronizationLogWhereInputSchema.optional(),
  orderBy: z.union([ SynchronizationLogOrderByWithRelationInputSchema.array(),SynchronizationLogOrderByWithRelationInputSchema ]).optional(),
  cursor: SynchronizationLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SynchronizationLogScalarFieldEnumSchema,SynchronizationLogScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SynchronizationLogFindManyArgsSchema: z.ZodType<Prisma.SynchronizationLogFindManyArgs> = z.object({
  select: SynchronizationLogSelectSchema.optional(),
  where: SynchronizationLogWhereInputSchema.optional(),
  orderBy: z.union([ SynchronizationLogOrderByWithRelationInputSchema.array(),SynchronizationLogOrderByWithRelationInputSchema ]).optional(),
  cursor: SynchronizationLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SynchronizationLogScalarFieldEnumSchema,SynchronizationLogScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SynchronizationLogAggregateArgsSchema: z.ZodType<Prisma.SynchronizationLogAggregateArgs> = z.object({
  where: SynchronizationLogWhereInputSchema.optional(),
  orderBy: z.union([ SynchronizationLogOrderByWithRelationInputSchema.array(),SynchronizationLogOrderByWithRelationInputSchema ]).optional(),
  cursor: SynchronizationLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SynchronizationLogGroupByArgsSchema: z.ZodType<Prisma.SynchronizationLogGroupByArgs> = z.object({
  where: SynchronizationLogWhereInputSchema.optional(),
  orderBy: z.union([ SynchronizationLogOrderByWithAggregationInputSchema.array(),SynchronizationLogOrderByWithAggregationInputSchema ]).optional(),
  by: SynchronizationLogScalarFieldEnumSchema.array(),
  having: SynchronizationLogScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SynchronizationLogFindUniqueArgsSchema: z.ZodType<Prisma.SynchronizationLogFindUniqueArgs> = z.object({
  select: SynchronizationLogSelectSchema.optional(),
  where: SynchronizationLogWhereUniqueInputSchema,
}).strict() ;

export const SynchronizationLogFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SynchronizationLogFindUniqueOrThrowArgs> = z.object({
  select: SynchronizationLogSelectSchema.optional(),
  where: SynchronizationLogWhereUniqueInputSchema,
}).strict() ;

export const AccessPointFindFirstArgsSchema: z.ZodType<Prisma.AccessPointFindFirstArgs> = z.object({
  select: AccessPointSelectSchema.optional(),
  where: AccessPointWhereInputSchema.optional(),
  orderBy: z.union([ AccessPointOrderByWithRelationInputSchema.array(),AccessPointOrderByWithRelationInputSchema ]).optional(),
  cursor: AccessPointWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AccessPointScalarFieldEnumSchema,AccessPointScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AccessPointFindFirstOrThrowArgsSchema: z.ZodType<Prisma.AccessPointFindFirstOrThrowArgs> = z.object({
  select: AccessPointSelectSchema.optional(),
  where: AccessPointWhereInputSchema.optional(),
  orderBy: z.union([ AccessPointOrderByWithRelationInputSchema.array(),AccessPointOrderByWithRelationInputSchema ]).optional(),
  cursor: AccessPointWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AccessPointScalarFieldEnumSchema,AccessPointScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AccessPointFindManyArgsSchema: z.ZodType<Prisma.AccessPointFindManyArgs> = z.object({
  select: AccessPointSelectSchema.optional(),
  where: AccessPointWhereInputSchema.optional(),
  orderBy: z.union([ AccessPointOrderByWithRelationInputSchema.array(),AccessPointOrderByWithRelationInputSchema ]).optional(),
  cursor: AccessPointWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AccessPointScalarFieldEnumSchema,AccessPointScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AccessPointAggregateArgsSchema: z.ZodType<Prisma.AccessPointAggregateArgs> = z.object({
  where: AccessPointWhereInputSchema.optional(),
  orderBy: z.union([ AccessPointOrderByWithRelationInputSchema.array(),AccessPointOrderByWithRelationInputSchema ]).optional(),
  cursor: AccessPointWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AccessPointGroupByArgsSchema: z.ZodType<Prisma.AccessPointGroupByArgs> = z.object({
  where: AccessPointWhereInputSchema.optional(),
  orderBy: z.union([ AccessPointOrderByWithAggregationInputSchema.array(),AccessPointOrderByWithAggregationInputSchema ]).optional(),
  by: AccessPointScalarFieldEnumSchema.array(),
  having: AccessPointScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AccessPointFindUniqueArgsSchema: z.ZodType<Prisma.AccessPointFindUniqueArgs> = z.object({
  select: AccessPointSelectSchema.optional(),
  where: AccessPointWhereUniqueInputSchema,
}).strict() ;

export const AccessPointFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.AccessPointFindUniqueOrThrowArgs> = z.object({
  select: AccessPointSelectSchema.optional(),
  where: AccessPointWhereUniqueInputSchema,
}).strict() ;

export const AuditLogFindFirstArgsSchema: z.ZodType<Prisma.AuditLogFindFirstArgs> = z.object({
  select: AuditLogSelectSchema.optional(),
  where: AuditLogWhereInputSchema.optional(),
  orderBy: z.union([ AuditLogOrderByWithRelationInputSchema.array(),AuditLogOrderByWithRelationInputSchema ]).optional(),
  cursor: AuditLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AuditLogScalarFieldEnumSchema,AuditLogScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AuditLogFindFirstOrThrowArgsSchema: z.ZodType<Prisma.AuditLogFindFirstOrThrowArgs> = z.object({
  select: AuditLogSelectSchema.optional(),
  where: AuditLogWhereInputSchema.optional(),
  orderBy: z.union([ AuditLogOrderByWithRelationInputSchema.array(),AuditLogOrderByWithRelationInputSchema ]).optional(),
  cursor: AuditLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AuditLogScalarFieldEnumSchema,AuditLogScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AuditLogFindManyArgsSchema: z.ZodType<Prisma.AuditLogFindManyArgs> = z.object({
  select: AuditLogSelectSchema.optional(),
  where: AuditLogWhereInputSchema.optional(),
  orderBy: z.union([ AuditLogOrderByWithRelationInputSchema.array(),AuditLogOrderByWithRelationInputSchema ]).optional(),
  cursor: AuditLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AuditLogScalarFieldEnumSchema,AuditLogScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AuditLogAggregateArgsSchema: z.ZodType<Prisma.AuditLogAggregateArgs> = z.object({
  where: AuditLogWhereInputSchema.optional(),
  orderBy: z.union([ AuditLogOrderByWithRelationInputSchema.array(),AuditLogOrderByWithRelationInputSchema ]).optional(),
  cursor: AuditLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AuditLogGroupByArgsSchema: z.ZodType<Prisma.AuditLogGroupByArgs> = z.object({
  where: AuditLogWhereInputSchema.optional(),
  orderBy: z.union([ AuditLogOrderByWithAggregationInputSchema.array(),AuditLogOrderByWithAggregationInputSchema ]).optional(),
  by: AuditLogScalarFieldEnumSchema.array(),
  having: AuditLogScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AuditLogFindUniqueArgsSchema: z.ZodType<Prisma.AuditLogFindUniqueArgs> = z.object({
  select: AuditLogSelectSchema.optional(),
  where: AuditLogWhereUniqueInputSchema,
}).strict() ;

export const AuditLogFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.AuditLogFindUniqueOrThrowArgs> = z.object({
  select: AuditLogSelectSchema.optional(),
  where: AuditLogWhereUniqueInputSchema,
}).strict() ;

export const BoardFindFirstArgsSchema: z.ZodType<Prisma.BoardFindFirstArgs> = z.object({
  select: BoardSelectSchema.optional(),
  include: BoardIncludeSchema.optional(),
  where: BoardWhereInputSchema.optional(),
  orderBy: z.union([ BoardOrderByWithRelationInputSchema.array(),BoardOrderByWithRelationInputSchema ]).optional(),
  cursor: BoardWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BoardScalarFieldEnumSchema,BoardScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const BoardFindFirstOrThrowArgsSchema: z.ZodType<Prisma.BoardFindFirstOrThrowArgs> = z.object({
  select: BoardSelectSchema.optional(),
  include: BoardIncludeSchema.optional(),
  where: BoardWhereInputSchema.optional(),
  orderBy: z.union([ BoardOrderByWithRelationInputSchema.array(),BoardOrderByWithRelationInputSchema ]).optional(),
  cursor: BoardWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BoardScalarFieldEnumSchema,BoardScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const BoardFindManyArgsSchema: z.ZodType<Prisma.BoardFindManyArgs> = z.object({
  select: BoardSelectSchema.optional(),
  include: BoardIncludeSchema.optional(),
  where: BoardWhereInputSchema.optional(),
  orderBy: z.union([ BoardOrderByWithRelationInputSchema.array(),BoardOrderByWithRelationInputSchema ]).optional(),
  cursor: BoardWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BoardScalarFieldEnumSchema,BoardScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const BoardAggregateArgsSchema: z.ZodType<Prisma.BoardAggregateArgs> = z.object({
  where: BoardWhereInputSchema.optional(),
  orderBy: z.union([ BoardOrderByWithRelationInputSchema.array(),BoardOrderByWithRelationInputSchema ]).optional(),
  cursor: BoardWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const BoardGroupByArgsSchema: z.ZodType<Prisma.BoardGroupByArgs> = z.object({
  where: BoardWhereInputSchema.optional(),
  orderBy: z.union([ BoardOrderByWithAggregationInputSchema.array(),BoardOrderByWithAggregationInputSchema ]).optional(),
  by: BoardScalarFieldEnumSchema.array(),
  having: BoardScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const BoardFindUniqueArgsSchema: z.ZodType<Prisma.BoardFindUniqueArgs> = z.object({
  select: BoardSelectSchema.optional(),
  include: BoardIncludeSchema.optional(),
  where: BoardWhereUniqueInputSchema,
}).strict() ;

export const BoardFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.BoardFindUniqueOrThrowArgs> = z.object({
  select: BoardSelectSchema.optional(),
  include: BoardIncludeSchema.optional(),
  where: BoardWhereUniqueInputSchema,
}).strict() ;

export const CategoryFindFirstArgsSchema: z.ZodType<Prisma.CategoryFindFirstArgs> = z.object({
  select: CategorySelectSchema.optional(),
  include: CategoryIncludeSchema.optional(),
  where: CategoryWhereInputSchema.optional(),
  orderBy: z.union([ CategoryOrderByWithRelationInputSchema.array(),CategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: CategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CategoryScalarFieldEnumSchema,CategoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CategoryFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CategoryFindFirstOrThrowArgs> = z.object({
  select: CategorySelectSchema.optional(),
  include: CategoryIncludeSchema.optional(),
  where: CategoryWhereInputSchema.optional(),
  orderBy: z.union([ CategoryOrderByWithRelationInputSchema.array(),CategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: CategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CategoryScalarFieldEnumSchema,CategoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CategoryFindManyArgsSchema: z.ZodType<Prisma.CategoryFindManyArgs> = z.object({
  select: CategorySelectSchema.optional(),
  include: CategoryIncludeSchema.optional(),
  where: CategoryWhereInputSchema.optional(),
  orderBy: z.union([ CategoryOrderByWithRelationInputSchema.array(),CategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: CategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CategoryScalarFieldEnumSchema,CategoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CategoryAggregateArgsSchema: z.ZodType<Prisma.CategoryAggregateArgs> = z.object({
  where: CategoryWhereInputSchema.optional(),
  orderBy: z.union([ CategoryOrderByWithRelationInputSchema.array(),CategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: CategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CategoryGroupByArgsSchema: z.ZodType<Prisma.CategoryGroupByArgs> = z.object({
  where: CategoryWhereInputSchema.optional(),
  orderBy: z.union([ CategoryOrderByWithAggregationInputSchema.array(),CategoryOrderByWithAggregationInputSchema ]).optional(),
  by: CategoryScalarFieldEnumSchema.array(),
  having: CategoryScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CategoryFindUniqueArgsSchema: z.ZodType<Prisma.CategoryFindUniqueArgs> = z.object({
  select: CategorySelectSchema.optional(),
  include: CategoryIncludeSchema.optional(),
  where: CategoryWhereUniqueInputSchema,
}).strict() ;

export const CategoryFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CategoryFindUniqueOrThrowArgs> = z.object({
  select: CategorySelectSchema.optional(),
  include: CategoryIncludeSchema.optional(),
  where: CategoryWhereUniqueInputSchema,
}).strict() ;

export const CountryFindFirstArgsSchema: z.ZodType<Prisma.CountryFindFirstArgs> = z.object({
  select: CountrySelectSchema.optional(),
  include: CountryIncludeSchema.optional(),
  where: CountryWhereInputSchema.optional(),
  orderBy: z.union([ CountryOrderByWithRelationInputSchema.array(),CountryOrderByWithRelationInputSchema ]).optional(),
  cursor: CountryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CountryScalarFieldEnumSchema,CountryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CountryFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CountryFindFirstOrThrowArgs> = z.object({
  select: CountrySelectSchema.optional(),
  include: CountryIncludeSchema.optional(),
  where: CountryWhereInputSchema.optional(),
  orderBy: z.union([ CountryOrderByWithRelationInputSchema.array(),CountryOrderByWithRelationInputSchema ]).optional(),
  cursor: CountryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CountryScalarFieldEnumSchema,CountryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CountryFindManyArgsSchema: z.ZodType<Prisma.CountryFindManyArgs> = z.object({
  select: CountrySelectSchema.optional(),
  include: CountryIncludeSchema.optional(),
  where: CountryWhereInputSchema.optional(),
  orderBy: z.union([ CountryOrderByWithRelationInputSchema.array(),CountryOrderByWithRelationInputSchema ]).optional(),
  cursor: CountryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CountryScalarFieldEnumSchema,CountryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CountryAggregateArgsSchema: z.ZodType<Prisma.CountryAggregateArgs> = z.object({
  where: CountryWhereInputSchema.optional(),
  orderBy: z.union([ CountryOrderByWithRelationInputSchema.array(),CountryOrderByWithRelationInputSchema ]).optional(),
  cursor: CountryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CountryGroupByArgsSchema: z.ZodType<Prisma.CountryGroupByArgs> = z.object({
  where: CountryWhereInputSchema.optional(),
  orderBy: z.union([ CountryOrderByWithAggregationInputSchema.array(),CountryOrderByWithAggregationInputSchema ]).optional(),
  by: CountryScalarFieldEnumSchema.array(),
  having: CountryScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CountryFindUniqueArgsSchema: z.ZodType<Prisma.CountryFindUniqueArgs> = z.object({
  select: CountrySelectSchema.optional(),
  include: CountryIncludeSchema.optional(),
  where: CountryWhereUniqueInputSchema,
}).strict() ;

export const CountryFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CountryFindUniqueOrThrowArgs> = z.object({
  select: CountrySelectSchema.optional(),
  include: CountryIncludeSchema.optional(),
  where: CountryWhereUniqueInputSchema,
}).strict() ;

export const LanguageFindFirstArgsSchema: z.ZodType<Prisma.LanguageFindFirstArgs> = z.object({
  select: LanguageSelectSchema.optional(),
  include: LanguageIncludeSchema.optional(),
  where: LanguageWhereInputSchema.optional(),
  orderBy: z.union([ LanguageOrderByWithRelationInputSchema.array(),LanguageOrderByWithRelationInputSchema ]).optional(),
  cursor: LanguageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LanguageScalarFieldEnumSchema,LanguageScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LanguageFindFirstOrThrowArgsSchema: z.ZodType<Prisma.LanguageFindFirstOrThrowArgs> = z.object({
  select: LanguageSelectSchema.optional(),
  include: LanguageIncludeSchema.optional(),
  where: LanguageWhereInputSchema.optional(),
  orderBy: z.union([ LanguageOrderByWithRelationInputSchema.array(),LanguageOrderByWithRelationInputSchema ]).optional(),
  cursor: LanguageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LanguageScalarFieldEnumSchema,LanguageScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LanguageFindManyArgsSchema: z.ZodType<Prisma.LanguageFindManyArgs> = z.object({
  select: LanguageSelectSchema.optional(),
  include: LanguageIncludeSchema.optional(),
  where: LanguageWhereInputSchema.optional(),
  orderBy: z.union([ LanguageOrderByWithRelationInputSchema.array(),LanguageOrderByWithRelationInputSchema ]).optional(),
  cursor: LanguageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LanguageScalarFieldEnumSchema,LanguageScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LanguageAggregateArgsSchema: z.ZodType<Prisma.LanguageAggregateArgs> = z.object({
  where: LanguageWhereInputSchema.optional(),
  orderBy: z.union([ LanguageOrderByWithRelationInputSchema.array(),LanguageOrderByWithRelationInputSchema ]).optional(),
  cursor: LanguageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LanguageGroupByArgsSchema: z.ZodType<Prisma.LanguageGroupByArgs> = z.object({
  where: LanguageWhereInputSchema.optional(),
  orderBy: z.union([ LanguageOrderByWithAggregationInputSchema.array(),LanguageOrderByWithAggregationInputSchema ]).optional(),
  by: LanguageScalarFieldEnumSchema.array(),
  having: LanguageScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LanguageFindUniqueArgsSchema: z.ZodType<Prisma.LanguageFindUniqueArgs> = z.object({
  select: LanguageSelectSchema.optional(),
  include: LanguageIncludeSchema.optional(),
  where: LanguageWhereUniqueInputSchema,
}).strict() ;

export const LanguageFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.LanguageFindUniqueOrThrowArgs> = z.object({
  select: LanguageSelectSchema.optional(),
  include: LanguageIncludeSchema.optional(),
  where: LanguageWhereUniqueInputSchema,
}).strict() ;

export const PurposeFindFirstArgsSchema: z.ZodType<Prisma.PurposeFindFirstArgs> = z.object({
  select: PurposeSelectSchema.optional(),
  include: PurposeIncludeSchema.optional(),
  where: PurposeWhereInputSchema.optional(),
  orderBy: z.union([ PurposeOrderByWithRelationInputSchema.array(),PurposeOrderByWithRelationInputSchema ]).optional(),
  cursor: PurposeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PurposeScalarFieldEnumSchema,PurposeScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PurposeFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PurposeFindFirstOrThrowArgs> = z.object({
  select: PurposeSelectSchema.optional(),
  include: PurposeIncludeSchema.optional(),
  where: PurposeWhereInputSchema.optional(),
  orderBy: z.union([ PurposeOrderByWithRelationInputSchema.array(),PurposeOrderByWithRelationInputSchema ]).optional(),
  cursor: PurposeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PurposeScalarFieldEnumSchema,PurposeScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PurposeFindManyArgsSchema: z.ZodType<Prisma.PurposeFindManyArgs> = z.object({
  select: PurposeSelectSchema.optional(),
  include: PurposeIncludeSchema.optional(),
  where: PurposeWhereInputSchema.optional(),
  orderBy: z.union([ PurposeOrderByWithRelationInputSchema.array(),PurposeOrderByWithRelationInputSchema ]).optional(),
  cursor: PurposeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PurposeScalarFieldEnumSchema,PurposeScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PurposeAggregateArgsSchema: z.ZodType<Prisma.PurposeAggregateArgs> = z.object({
  where: PurposeWhereInputSchema.optional(),
  orderBy: z.union([ PurposeOrderByWithRelationInputSchema.array(),PurposeOrderByWithRelationInputSchema ]).optional(),
  cursor: PurposeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PurposeGroupByArgsSchema: z.ZodType<Prisma.PurposeGroupByArgs> = z.object({
  where: PurposeWhereInputSchema.optional(),
  orderBy: z.union([ PurposeOrderByWithAggregationInputSchema.array(),PurposeOrderByWithAggregationInputSchema ]).optional(),
  by: PurposeScalarFieldEnumSchema.array(),
  having: PurposeScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PurposeFindUniqueArgsSchema: z.ZodType<Prisma.PurposeFindUniqueArgs> = z.object({
  select: PurposeSelectSchema.optional(),
  include: PurposeIncludeSchema.optional(),
  where: PurposeWhereUniqueInputSchema,
}).strict() ;

export const PurposeFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PurposeFindUniqueOrThrowArgs> = z.object({
  select: PurposeSelectSchema.optional(),
  include: PurposeIncludeSchema.optional(),
  where: PurposeWhereUniqueInputSchema,
}).strict() ;

export const RegionFindFirstArgsSchema: z.ZodType<Prisma.RegionFindFirstArgs> = z.object({
  select: RegionSelectSchema.optional(),
  include: RegionIncludeSchema.optional(),
  where: RegionWhereInputSchema.optional(),
  orderBy: z.union([ RegionOrderByWithRelationInputSchema.array(),RegionOrderByWithRelationInputSchema ]).optional(),
  cursor: RegionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RegionScalarFieldEnumSchema,RegionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RegionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RegionFindFirstOrThrowArgs> = z.object({
  select: RegionSelectSchema.optional(),
  include: RegionIncludeSchema.optional(),
  where: RegionWhereInputSchema.optional(),
  orderBy: z.union([ RegionOrderByWithRelationInputSchema.array(),RegionOrderByWithRelationInputSchema ]).optional(),
  cursor: RegionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RegionScalarFieldEnumSchema,RegionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RegionFindManyArgsSchema: z.ZodType<Prisma.RegionFindManyArgs> = z.object({
  select: RegionSelectSchema.optional(),
  include: RegionIncludeSchema.optional(),
  where: RegionWhereInputSchema.optional(),
  orderBy: z.union([ RegionOrderByWithRelationInputSchema.array(),RegionOrderByWithRelationInputSchema ]).optional(),
  cursor: RegionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RegionScalarFieldEnumSchema,RegionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RegionAggregateArgsSchema: z.ZodType<Prisma.RegionAggregateArgs> = z.object({
  where: RegionWhereInputSchema.optional(),
  orderBy: z.union([ RegionOrderByWithRelationInputSchema.array(),RegionOrderByWithRelationInputSchema ]).optional(),
  cursor: RegionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RegionGroupByArgsSchema: z.ZodType<Prisma.RegionGroupByArgs> = z.object({
  where: RegionWhereInputSchema.optional(),
  orderBy: z.union([ RegionOrderByWithAggregationInputSchema.array(),RegionOrderByWithAggregationInputSchema ]).optional(),
  by: RegionScalarFieldEnumSchema.array(),
  having: RegionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RegionFindUniqueArgsSchema: z.ZodType<Prisma.RegionFindUniqueArgs> = z.object({
  select: RegionSelectSchema.optional(),
  include: RegionIncludeSchema.optional(),
  where: RegionWhereUniqueInputSchema,
}).strict() ;

export const RegionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.RegionFindUniqueOrThrowArgs> = z.object({
  select: RegionSelectSchema.optional(),
  include: RegionIncludeSchema.optional(),
  where: RegionWhereUniqueInputSchema,
}).strict() ;

export const SettingFindFirstArgsSchema: z.ZodType<Prisma.SettingFindFirstArgs> = z.object({
  select: SettingSelectSchema.optional(),
  where: SettingWhereInputSchema.optional(),
  orderBy: z.union([ SettingOrderByWithRelationInputSchema.array(),SettingOrderByWithRelationInputSchema ]).optional(),
  cursor: SettingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SettingScalarFieldEnumSchema,SettingScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SettingFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SettingFindFirstOrThrowArgs> = z.object({
  select: SettingSelectSchema.optional(),
  where: SettingWhereInputSchema.optional(),
  orderBy: z.union([ SettingOrderByWithRelationInputSchema.array(),SettingOrderByWithRelationInputSchema ]).optional(),
  cursor: SettingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SettingScalarFieldEnumSchema,SettingScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SettingFindManyArgsSchema: z.ZodType<Prisma.SettingFindManyArgs> = z.object({
  select: SettingSelectSchema.optional(),
  where: SettingWhereInputSchema.optional(),
  orderBy: z.union([ SettingOrderByWithRelationInputSchema.array(),SettingOrderByWithRelationInputSchema ]).optional(),
  cursor: SettingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SettingScalarFieldEnumSchema,SettingScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SettingAggregateArgsSchema: z.ZodType<Prisma.SettingAggregateArgs> = z.object({
  where: SettingWhereInputSchema.optional(),
  orderBy: z.union([ SettingOrderByWithRelationInputSchema.array(),SettingOrderByWithRelationInputSchema ]).optional(),
  cursor: SettingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SettingGroupByArgsSchema: z.ZodType<Prisma.SettingGroupByArgs> = z.object({
  where: SettingWhereInputSchema.optional(),
  orderBy: z.union([ SettingOrderByWithAggregationInputSchema.array(),SettingOrderByWithAggregationInputSchema ]).optional(),
  by: SettingScalarFieldEnumSchema.array(),
  having: SettingScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SettingFindUniqueArgsSchema: z.ZodType<Prisma.SettingFindUniqueArgs> = z.object({
  select: SettingSelectSchema.optional(),
  where: SettingWhereUniqueInputSchema,
}).strict() ;

export const SettingFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SettingFindUniqueOrThrowArgs> = z.object({
  select: SettingSelectSchema.optional(),
  where: SettingWhereUniqueInputSchema,
}).strict() ;

export const ToolFindFirstArgsSchema: z.ZodType<Prisma.ToolFindFirstArgs> = z.object({
  select: ToolSelectSchema.optional(),
  include: ToolIncludeSchema.optional(),
  where: ToolWhereInputSchema.optional(),
  orderBy: z.union([ ToolOrderByWithRelationInputSchema.array(),ToolOrderByWithRelationInputSchema ]).optional(),
  cursor: ToolWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ToolScalarFieldEnumSchema,ToolScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ToolFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ToolFindFirstOrThrowArgs> = z.object({
  select: ToolSelectSchema.optional(),
  include: ToolIncludeSchema.optional(),
  where: ToolWhereInputSchema.optional(),
  orderBy: z.union([ ToolOrderByWithRelationInputSchema.array(),ToolOrderByWithRelationInputSchema ]).optional(),
  cursor: ToolWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ToolScalarFieldEnumSchema,ToolScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ToolFindManyArgsSchema: z.ZodType<Prisma.ToolFindManyArgs> = z.object({
  select: ToolSelectSchema.optional(),
  include: ToolIncludeSchema.optional(),
  where: ToolWhereInputSchema.optional(),
  orderBy: z.union([ ToolOrderByWithRelationInputSchema.array(),ToolOrderByWithRelationInputSchema ]).optional(),
  cursor: ToolWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ToolScalarFieldEnumSchema,ToolScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ToolAggregateArgsSchema: z.ZodType<Prisma.ToolAggregateArgs> = z.object({
  where: ToolWhereInputSchema.optional(),
  orderBy: z.union([ ToolOrderByWithRelationInputSchema.array(),ToolOrderByWithRelationInputSchema ]).optional(),
  cursor: ToolWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ToolGroupByArgsSchema: z.ZodType<Prisma.ToolGroupByArgs> = z.object({
  where: ToolWhereInputSchema.optional(),
  orderBy: z.union([ ToolOrderByWithAggregationInputSchema.array(),ToolOrderByWithAggregationInputSchema ]).optional(),
  by: ToolScalarFieldEnumSchema.array(),
  having: ToolScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ToolFindUniqueArgsSchema: z.ZodType<Prisma.ToolFindUniqueArgs> = z.object({
  select: ToolSelectSchema.optional(),
  include: ToolIncludeSchema.optional(),
  where: ToolWhereUniqueInputSchema,
}).strict() ;

export const ToolFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ToolFindUniqueOrThrowArgs> = z.object({
  select: ToolSelectSchema.optional(),
  include: ToolIncludeSchema.optional(),
  where: ToolWhereUniqueInputSchema,
}).strict() ;

export const ToolTextsFindFirstArgsSchema: z.ZodType<Prisma.ToolTextsFindFirstArgs> = z.object({
  select: ToolTextsSelectSchema.optional(),
  include: ToolTextsIncludeSchema.optional(),
  where: ToolTextsWhereInputSchema.optional(),
  orderBy: z.union([ ToolTextsOrderByWithRelationInputSchema.array(),ToolTextsOrderByWithRelationInputSchema ]).optional(),
  cursor: ToolTextsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ToolTextsScalarFieldEnumSchema,ToolTextsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ToolTextsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ToolTextsFindFirstOrThrowArgs> = z.object({
  select: ToolTextsSelectSchema.optional(),
  include: ToolTextsIncludeSchema.optional(),
  where: ToolTextsWhereInputSchema.optional(),
  orderBy: z.union([ ToolTextsOrderByWithRelationInputSchema.array(),ToolTextsOrderByWithRelationInputSchema ]).optional(),
  cursor: ToolTextsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ToolTextsScalarFieldEnumSchema,ToolTextsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ToolTextsFindManyArgsSchema: z.ZodType<Prisma.ToolTextsFindManyArgs> = z.object({
  select: ToolTextsSelectSchema.optional(),
  include: ToolTextsIncludeSchema.optional(),
  where: ToolTextsWhereInputSchema.optional(),
  orderBy: z.union([ ToolTextsOrderByWithRelationInputSchema.array(),ToolTextsOrderByWithRelationInputSchema ]).optional(),
  cursor: ToolTextsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ToolTextsScalarFieldEnumSchema,ToolTextsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ToolTextsAggregateArgsSchema: z.ZodType<Prisma.ToolTextsAggregateArgs> = z.object({
  where: ToolTextsWhereInputSchema.optional(),
  orderBy: z.union([ ToolTextsOrderByWithRelationInputSchema.array(),ToolTextsOrderByWithRelationInputSchema ]).optional(),
  cursor: ToolTextsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ToolTextsGroupByArgsSchema: z.ZodType<Prisma.ToolTextsGroupByArgs> = z.object({
  where: ToolTextsWhereInputSchema.optional(),
  orderBy: z.union([ ToolTextsOrderByWithAggregationInputSchema.array(),ToolTextsOrderByWithAggregationInputSchema ]).optional(),
  by: ToolTextsScalarFieldEnumSchema.array(),
  having: ToolTextsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ToolTextsFindUniqueArgsSchema: z.ZodType<Prisma.ToolTextsFindUniqueArgs> = z.object({
  select: ToolTextsSelectSchema.optional(),
  include: ToolTextsIncludeSchema.optional(),
  where: ToolTextsWhereUniqueInputSchema,
}).strict() ;

export const ToolTextsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ToolTextsFindUniqueOrThrowArgs> = z.object({
  select: ToolTextsSelectSchema.optional(),
  include: ToolTextsIncludeSchema.optional(),
  where: ToolTextsWhereUniqueInputSchema,
}).strict() ;

export const ToolGroupFindFirstArgsSchema: z.ZodType<Prisma.ToolGroupFindFirstArgs> = z.object({
  select: ToolGroupSelectSchema.optional(),
  include: ToolGroupIncludeSchema.optional(),
  where: ToolGroupWhereInputSchema.optional(),
  orderBy: z.union([ ToolGroupOrderByWithRelationInputSchema.array(),ToolGroupOrderByWithRelationInputSchema ]).optional(),
  cursor: ToolGroupWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ToolGroupScalarFieldEnumSchema,ToolGroupScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ToolGroupFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ToolGroupFindFirstOrThrowArgs> = z.object({
  select: ToolGroupSelectSchema.optional(),
  include: ToolGroupIncludeSchema.optional(),
  where: ToolGroupWhereInputSchema.optional(),
  orderBy: z.union([ ToolGroupOrderByWithRelationInputSchema.array(),ToolGroupOrderByWithRelationInputSchema ]).optional(),
  cursor: ToolGroupWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ToolGroupScalarFieldEnumSchema,ToolGroupScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ToolGroupFindManyArgsSchema: z.ZodType<Prisma.ToolGroupFindManyArgs> = z.object({
  select: ToolGroupSelectSchema.optional(),
  include: ToolGroupIncludeSchema.optional(),
  where: ToolGroupWhereInputSchema.optional(),
  orderBy: z.union([ ToolGroupOrderByWithRelationInputSchema.array(),ToolGroupOrderByWithRelationInputSchema ]).optional(),
  cursor: ToolGroupWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ToolGroupScalarFieldEnumSchema,ToolGroupScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ToolGroupAggregateArgsSchema: z.ZodType<Prisma.ToolGroupAggregateArgs> = z.object({
  where: ToolGroupWhereInputSchema.optional(),
  orderBy: z.union([ ToolGroupOrderByWithRelationInputSchema.array(),ToolGroupOrderByWithRelationInputSchema ]).optional(),
  cursor: ToolGroupWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ToolGroupGroupByArgsSchema: z.ZodType<Prisma.ToolGroupGroupByArgs> = z.object({
  where: ToolGroupWhereInputSchema.optional(),
  orderBy: z.union([ ToolGroupOrderByWithAggregationInputSchema.array(),ToolGroupOrderByWithAggregationInputSchema ]).optional(),
  by: ToolGroupScalarFieldEnumSchema.array(),
  having: ToolGroupScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ToolGroupFindUniqueArgsSchema: z.ZodType<Prisma.ToolGroupFindUniqueArgs> = z.object({
  select: ToolGroupSelectSchema.optional(),
  include: ToolGroupIncludeSchema.optional(),
  where: ToolGroupWhereUniqueInputSchema,
}).strict() ;

export const ToolGroupFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ToolGroupFindUniqueOrThrowArgs> = z.object({
  select: ToolGroupSelectSchema.optional(),
  include: ToolGroupIncludeSchema.optional(),
  where: ToolGroupWhereUniqueInputSchema,
}).strict() ;

export const UserGroupFindFirstArgsSchema: z.ZodType<Prisma.UserGroupFindFirstArgs> = z.object({
  select: UserGroupSelectSchema.optional(),
  include: UserGroupIncludeSchema.optional(),
  where: UserGroupWhereInputSchema.optional(),
  orderBy: z.union([ UserGroupOrderByWithRelationInputSchema.array(),UserGroupOrderByWithRelationInputSchema ]).optional(),
  cursor: UserGroupWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserGroupScalarFieldEnumSchema,UserGroupScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserGroupFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UserGroupFindFirstOrThrowArgs> = z.object({
  select: UserGroupSelectSchema.optional(),
  include: UserGroupIncludeSchema.optional(),
  where: UserGroupWhereInputSchema.optional(),
  orderBy: z.union([ UserGroupOrderByWithRelationInputSchema.array(),UserGroupOrderByWithRelationInputSchema ]).optional(),
  cursor: UserGroupWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserGroupScalarFieldEnumSchema,UserGroupScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserGroupFindManyArgsSchema: z.ZodType<Prisma.UserGroupFindManyArgs> = z.object({
  select: UserGroupSelectSchema.optional(),
  include: UserGroupIncludeSchema.optional(),
  where: UserGroupWhereInputSchema.optional(),
  orderBy: z.union([ UserGroupOrderByWithRelationInputSchema.array(),UserGroupOrderByWithRelationInputSchema ]).optional(),
  cursor: UserGroupWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserGroupScalarFieldEnumSchema,UserGroupScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserGroupAggregateArgsSchema: z.ZodType<Prisma.UserGroupAggregateArgs> = z.object({
  where: UserGroupWhereInputSchema.optional(),
  orderBy: z.union([ UserGroupOrderByWithRelationInputSchema.array(),UserGroupOrderByWithRelationInputSchema ]).optional(),
  cursor: UserGroupWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserGroupGroupByArgsSchema: z.ZodType<Prisma.UserGroupGroupByArgs> = z.object({
  where: UserGroupWhereInputSchema.optional(),
  orderBy: z.union([ UserGroupOrderByWithAggregationInputSchema.array(),UserGroupOrderByWithAggregationInputSchema ]).optional(),
  by: UserGroupScalarFieldEnumSchema.array(),
  having: UserGroupScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserGroupFindUniqueArgsSchema: z.ZodType<Prisma.UserGroupFindUniqueArgs> = z.object({
  select: UserGroupSelectSchema.optional(),
  include: UserGroupIncludeSchema.optional(),
  where: UserGroupWhereUniqueInputSchema,
}).strict() ;

export const UserGroupFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UserGroupFindUniqueOrThrowArgs> = z.object({
  select: UserGroupSelectSchema.optional(),
  include: UserGroupIncludeSchema.optional(),
  where: UserGroupWhereUniqueInputSchema,
}).strict() ;

export const UserProfileFindFirstArgsSchema: z.ZodType<Prisma.UserProfileFindFirstArgs> = z.object({
  select: UserProfileSelectSchema.optional(),
  include: UserProfileIncludeSchema.optional(),
  where: UserProfileWhereInputSchema.optional(),
  orderBy: z.union([ UserProfileOrderByWithRelationInputSchema.array(),UserProfileOrderByWithRelationInputSchema ]).optional(),
  cursor: UserProfileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserProfileScalarFieldEnumSchema,UserProfileScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserProfileFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UserProfileFindFirstOrThrowArgs> = z.object({
  select: UserProfileSelectSchema.optional(),
  include: UserProfileIncludeSchema.optional(),
  where: UserProfileWhereInputSchema.optional(),
  orderBy: z.union([ UserProfileOrderByWithRelationInputSchema.array(),UserProfileOrderByWithRelationInputSchema ]).optional(),
  cursor: UserProfileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserProfileScalarFieldEnumSchema,UserProfileScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserProfileFindManyArgsSchema: z.ZodType<Prisma.UserProfileFindManyArgs> = z.object({
  select: UserProfileSelectSchema.optional(),
  include: UserProfileIncludeSchema.optional(),
  where: UserProfileWhereInputSchema.optional(),
  orderBy: z.union([ UserProfileOrderByWithRelationInputSchema.array(),UserProfileOrderByWithRelationInputSchema ]).optional(),
  cursor: UserProfileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserProfileScalarFieldEnumSchema,UserProfileScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserProfileAggregateArgsSchema: z.ZodType<Prisma.UserProfileAggregateArgs> = z.object({
  where: UserProfileWhereInputSchema.optional(),
  orderBy: z.union([ UserProfileOrderByWithRelationInputSchema.array(),UserProfileOrderByWithRelationInputSchema ]).optional(),
  cursor: UserProfileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserProfileGroupByArgsSchema: z.ZodType<Prisma.UserProfileGroupByArgs> = z.object({
  where: UserProfileWhereInputSchema.optional(),
  orderBy: z.union([ UserProfileOrderByWithAggregationInputSchema.array(),UserProfileOrderByWithAggregationInputSchema ]).optional(),
  by: UserProfileScalarFieldEnumSchema.array(),
  having: UserProfileScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserProfileFindUniqueArgsSchema: z.ZodType<Prisma.UserProfileFindUniqueArgs> = z.object({
  select: UserProfileSelectSchema.optional(),
  include: UserProfileIncludeSchema.optional(),
  where: UserProfileWhereUniqueInputSchema,
}).strict() ;

export const UserProfileFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UserProfileFindUniqueOrThrowArgs> = z.object({
  select: UserProfileSelectSchema.optional(),
  include: UserProfileIncludeSchema.optional(),
  where: UserProfileWhereUniqueInputSchema,
}).strict() ;

export const UserRoleFindFirstArgsSchema: z.ZodType<Prisma.UserRoleFindFirstArgs> = z.object({
  select: UserRoleSelectSchema.optional(),
  include: UserRoleIncludeSchema.optional(),
  where: UserRoleWhereInputSchema.optional(),
  orderBy: z.union([ UserRoleOrderByWithRelationInputSchema.array(),UserRoleOrderByWithRelationInputSchema ]).optional(),
  cursor: UserRoleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserRoleScalarFieldEnumSchema,UserRoleScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserRoleFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UserRoleFindFirstOrThrowArgs> = z.object({
  select: UserRoleSelectSchema.optional(),
  include: UserRoleIncludeSchema.optional(),
  where: UserRoleWhereInputSchema.optional(),
  orderBy: z.union([ UserRoleOrderByWithRelationInputSchema.array(),UserRoleOrderByWithRelationInputSchema ]).optional(),
  cursor: UserRoleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserRoleScalarFieldEnumSchema,UserRoleScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserRoleFindManyArgsSchema: z.ZodType<Prisma.UserRoleFindManyArgs> = z.object({
  select: UserRoleSelectSchema.optional(),
  include: UserRoleIncludeSchema.optional(),
  where: UserRoleWhereInputSchema.optional(),
  orderBy: z.union([ UserRoleOrderByWithRelationInputSchema.array(),UserRoleOrderByWithRelationInputSchema ]).optional(),
  cursor: UserRoleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserRoleScalarFieldEnumSchema,UserRoleScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserRoleAggregateArgsSchema: z.ZodType<Prisma.UserRoleAggregateArgs> = z.object({
  where: UserRoleWhereInputSchema.optional(),
  orderBy: z.union([ UserRoleOrderByWithRelationInputSchema.array(),UserRoleOrderByWithRelationInputSchema ]).optional(),
  cursor: UserRoleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserRoleGroupByArgsSchema: z.ZodType<Prisma.UserRoleGroupByArgs> = z.object({
  where: UserRoleWhereInputSchema.optional(),
  orderBy: z.union([ UserRoleOrderByWithAggregationInputSchema.array(),UserRoleOrderByWithAggregationInputSchema ]).optional(),
  by: UserRoleScalarFieldEnumSchema.array(),
  having: UserRoleScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserRoleFindUniqueArgsSchema: z.ZodType<Prisma.UserRoleFindUniqueArgs> = z.object({
  select: UserRoleSelectSchema.optional(),
  include: UserRoleIncludeSchema.optional(),
  where: UserRoleWhereUniqueInputSchema,
}).strict() ;

export const UserRoleFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UserRoleFindUniqueOrThrowArgs> = z.object({
  select: UserRoleSelectSchema.optional(),
  include: UserRoleIncludeSchema.optional(),
  where: UserRoleWhereUniqueInputSchema,
}).strict() ;

export const SessionFindFirstArgsSchema: z.ZodType<Prisma.SessionFindFirstArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SessionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SessionFindFirstOrThrowArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SessionFindManyArgsSchema: z.ZodType<Prisma.SessionFindManyArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SessionAggregateArgsSchema: z.ZodType<Prisma.SessionAggregateArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SessionGroupByArgsSchema: z.ZodType<Prisma.SessionGroupByArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithAggregationInputSchema.array(),SessionOrderByWithAggregationInputSchema ]).optional(),
  by: SessionScalarFieldEnumSchema.array(),
  having: SessionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SessionFindUniqueArgsSchema: z.ZodType<Prisma.SessionFindUniqueArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const SessionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SessionFindUniqueOrThrowArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const BusinessUnitFindFirstArgsSchema: z.ZodType<Prisma.BusinessUnitFindFirstArgs> = z.object({
  select: BusinessUnitSelectSchema.optional(),
  where: BusinessUnitWhereInputSchema.optional(),
  orderBy: z.union([ BusinessUnitOrderByWithRelationInputSchema.array(),BusinessUnitOrderByWithRelationInputSchema ]).optional(),
  cursor: BusinessUnitWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BusinessUnitScalarFieldEnumSchema,BusinessUnitScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const BusinessUnitFindFirstOrThrowArgsSchema: z.ZodType<Prisma.BusinessUnitFindFirstOrThrowArgs> = z.object({
  select: BusinessUnitSelectSchema.optional(),
  where: BusinessUnitWhereInputSchema.optional(),
  orderBy: z.union([ BusinessUnitOrderByWithRelationInputSchema.array(),BusinessUnitOrderByWithRelationInputSchema ]).optional(),
  cursor: BusinessUnitWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BusinessUnitScalarFieldEnumSchema,BusinessUnitScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const BusinessUnitFindManyArgsSchema: z.ZodType<Prisma.BusinessUnitFindManyArgs> = z.object({
  select: BusinessUnitSelectSchema.optional(),
  where: BusinessUnitWhereInputSchema.optional(),
  orderBy: z.union([ BusinessUnitOrderByWithRelationInputSchema.array(),BusinessUnitOrderByWithRelationInputSchema ]).optional(),
  cursor: BusinessUnitWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BusinessUnitScalarFieldEnumSchema,BusinessUnitScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const BusinessUnitAggregateArgsSchema: z.ZodType<Prisma.BusinessUnitAggregateArgs> = z.object({
  where: BusinessUnitWhereInputSchema.optional(),
  orderBy: z.union([ BusinessUnitOrderByWithRelationInputSchema.array(),BusinessUnitOrderByWithRelationInputSchema ]).optional(),
  cursor: BusinessUnitWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const BusinessUnitGroupByArgsSchema: z.ZodType<Prisma.BusinessUnitGroupByArgs> = z.object({
  where: BusinessUnitWhereInputSchema.optional(),
  orderBy: z.union([ BusinessUnitOrderByWithAggregationInputSchema.array(),BusinessUnitOrderByWithAggregationInputSchema ]).optional(),
  by: BusinessUnitScalarFieldEnumSchema.array(),
  having: BusinessUnitScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const BusinessUnitFindUniqueArgsSchema: z.ZodType<Prisma.BusinessUnitFindUniqueArgs> = z.object({
  select: BusinessUnitSelectSchema.optional(),
  where: BusinessUnitWhereUniqueInputSchema,
}).strict() ;

export const BusinessUnitFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.BusinessUnitFindUniqueOrThrowArgs> = z.object({
  select: BusinessUnitSelectSchema.optional(),
  where: BusinessUnitWhereUniqueInputSchema,
}).strict() ;

export const GuestDomainFindFirstArgsSchema: z.ZodType<Prisma.GuestDomainFindFirstArgs> = z.object({
  select: GuestDomainSelectSchema.optional(),
  where: GuestDomainWhereInputSchema.optional(),
  orderBy: z.union([ GuestDomainOrderByWithRelationInputSchema.array(),GuestDomainOrderByWithRelationInputSchema ]).optional(),
  cursor: GuestDomainWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ GuestDomainScalarFieldEnumSchema,GuestDomainScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const GuestDomainFindFirstOrThrowArgsSchema: z.ZodType<Prisma.GuestDomainFindFirstOrThrowArgs> = z.object({
  select: GuestDomainSelectSchema.optional(),
  where: GuestDomainWhereInputSchema.optional(),
  orderBy: z.union([ GuestDomainOrderByWithRelationInputSchema.array(),GuestDomainOrderByWithRelationInputSchema ]).optional(),
  cursor: GuestDomainWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ GuestDomainScalarFieldEnumSchema,GuestDomainScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const GuestDomainFindManyArgsSchema: z.ZodType<Prisma.GuestDomainFindManyArgs> = z.object({
  select: GuestDomainSelectSchema.optional(),
  where: GuestDomainWhereInputSchema.optional(),
  orderBy: z.union([ GuestDomainOrderByWithRelationInputSchema.array(),GuestDomainOrderByWithRelationInputSchema ]).optional(),
  cursor: GuestDomainWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ GuestDomainScalarFieldEnumSchema,GuestDomainScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const GuestDomainAggregateArgsSchema: z.ZodType<Prisma.GuestDomainAggregateArgs> = z.object({
  where: GuestDomainWhereInputSchema.optional(),
  orderBy: z.union([ GuestDomainOrderByWithRelationInputSchema.array(),GuestDomainOrderByWithRelationInputSchema ]).optional(),
  cursor: GuestDomainWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const GuestDomainGroupByArgsSchema: z.ZodType<Prisma.GuestDomainGroupByArgs> = z.object({
  where: GuestDomainWhereInputSchema.optional(),
  orderBy: z.union([ GuestDomainOrderByWithAggregationInputSchema.array(),GuestDomainOrderByWithAggregationInputSchema ]).optional(),
  by: GuestDomainScalarFieldEnumSchema.array(),
  having: GuestDomainScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const GuestDomainFindUniqueArgsSchema: z.ZodType<Prisma.GuestDomainFindUniqueArgs> = z.object({
  select: GuestDomainSelectSchema.optional(),
  where: GuestDomainWhereUniqueInputSchema,
}).strict() ;

export const GuestDomainFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.GuestDomainFindUniqueOrThrowArgs> = z.object({
  select: GuestDomainSelectSchema.optional(),
  where: GuestDomainWhereUniqueInputSchema,
}).strict() ;

export const ChannelCategoryFindFirstArgsSchema: z.ZodType<Prisma.ChannelCategoryFindFirstArgs> = z.object({
  select: ChannelCategorySelectSchema.optional(),
  include: ChannelCategoryIncludeSchema.optional(),
  where: ChannelCategoryWhereInputSchema.optional(),
  orderBy: z.union([ ChannelCategoryOrderByWithRelationInputSchema.array(),ChannelCategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: ChannelCategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ChannelCategoryScalarFieldEnumSchema,ChannelCategoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ChannelCategoryFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ChannelCategoryFindFirstOrThrowArgs> = z.object({
  select: ChannelCategorySelectSchema.optional(),
  include: ChannelCategoryIncludeSchema.optional(),
  where: ChannelCategoryWhereInputSchema.optional(),
  orderBy: z.union([ ChannelCategoryOrderByWithRelationInputSchema.array(),ChannelCategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: ChannelCategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ChannelCategoryScalarFieldEnumSchema,ChannelCategoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ChannelCategoryFindManyArgsSchema: z.ZodType<Prisma.ChannelCategoryFindManyArgs> = z.object({
  select: ChannelCategorySelectSchema.optional(),
  include: ChannelCategoryIncludeSchema.optional(),
  where: ChannelCategoryWhereInputSchema.optional(),
  orderBy: z.union([ ChannelCategoryOrderByWithRelationInputSchema.array(),ChannelCategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: ChannelCategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ChannelCategoryScalarFieldEnumSchema,ChannelCategoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ChannelCategoryAggregateArgsSchema: z.ZodType<Prisma.ChannelCategoryAggregateArgs> = z.object({
  where: ChannelCategoryWhereInputSchema.optional(),
  orderBy: z.union([ ChannelCategoryOrderByWithRelationInputSchema.array(),ChannelCategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: ChannelCategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ChannelCategoryGroupByArgsSchema: z.ZodType<Prisma.ChannelCategoryGroupByArgs> = z.object({
  where: ChannelCategoryWhereInputSchema.optional(),
  orderBy: z.union([ ChannelCategoryOrderByWithAggregationInputSchema.array(),ChannelCategoryOrderByWithAggregationInputSchema ]).optional(),
  by: ChannelCategoryScalarFieldEnumSchema.array(),
  having: ChannelCategoryScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ChannelCategoryFindUniqueArgsSchema: z.ZodType<Prisma.ChannelCategoryFindUniqueArgs> = z.object({
  select: ChannelCategorySelectSchema.optional(),
  include: ChannelCategoryIncludeSchema.optional(),
  where: ChannelCategoryWhereUniqueInputSchema,
}).strict() ;

export const ChannelCategoryFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ChannelCategoryFindUniqueOrThrowArgs> = z.object({
  select: ChannelCategorySelectSchema.optional(),
  include: ChannelCategoryIncludeSchema.optional(),
  where: ChannelCategoryWhereUniqueInputSchema,
}).strict() ;

export const ChannelFindFirstArgsSchema: z.ZodType<Prisma.ChannelFindFirstArgs> = z.object({
  select: ChannelSelectSchema.optional(),
  include: ChannelIncludeSchema.optional(),
  where: ChannelWhereInputSchema.optional(),
  orderBy: z.union([ ChannelOrderByWithRelationInputSchema.array(),ChannelOrderByWithRelationInputSchema ]).optional(),
  cursor: ChannelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ChannelScalarFieldEnumSchema,ChannelScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ChannelFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ChannelFindFirstOrThrowArgs> = z.object({
  select: ChannelSelectSchema.optional(),
  include: ChannelIncludeSchema.optional(),
  where: ChannelWhereInputSchema.optional(),
  orderBy: z.union([ ChannelOrderByWithRelationInputSchema.array(),ChannelOrderByWithRelationInputSchema ]).optional(),
  cursor: ChannelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ChannelScalarFieldEnumSchema,ChannelScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ChannelFindManyArgsSchema: z.ZodType<Prisma.ChannelFindManyArgs> = z.object({
  select: ChannelSelectSchema.optional(),
  include: ChannelIncludeSchema.optional(),
  where: ChannelWhereInputSchema.optional(),
  orderBy: z.union([ ChannelOrderByWithRelationInputSchema.array(),ChannelOrderByWithRelationInputSchema ]).optional(),
  cursor: ChannelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ChannelScalarFieldEnumSchema,ChannelScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ChannelAggregateArgsSchema: z.ZodType<Prisma.ChannelAggregateArgs> = z.object({
  where: ChannelWhereInputSchema.optional(),
  orderBy: z.union([ ChannelOrderByWithRelationInputSchema.array(),ChannelOrderByWithRelationInputSchema ]).optional(),
  cursor: ChannelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ChannelGroupByArgsSchema: z.ZodType<Prisma.ChannelGroupByArgs> = z.object({
  where: ChannelWhereInputSchema.optional(),
  orderBy: z.union([ ChannelOrderByWithAggregationInputSchema.array(),ChannelOrderByWithAggregationInputSchema ]).optional(),
  by: ChannelScalarFieldEnumSchema.array(),
  having: ChannelScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ChannelFindUniqueArgsSchema: z.ZodType<Prisma.ChannelFindUniqueArgs> = z.object({
  select: ChannelSelectSchema.optional(),
  include: ChannelIncludeSchema.optional(),
  where: ChannelWhereUniqueInputSchema,
}).strict() ;

export const ChannelFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ChannelFindUniqueOrThrowArgs> = z.object({
  select: ChannelSelectSchema.optional(),
  include: ChannelIncludeSchema.optional(),
  where: ChannelWhereUniqueInputSchema,
}).strict() ;

export const BlobFindFirstArgsSchema: z.ZodType<Prisma.BlobFindFirstArgs> = z.object({
  select: BlobSelectSchema.optional(),
  include: BlobIncludeSchema.optional(),
  where: BlobWhereInputSchema.optional(),
  orderBy: z.union([ BlobOrderByWithRelationInputSchema.array(),BlobOrderByWithRelationInputSchema ]).optional(),
  cursor: BlobWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BlobScalarFieldEnumSchema,BlobScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const BlobFindFirstOrThrowArgsSchema: z.ZodType<Prisma.BlobFindFirstOrThrowArgs> = z.object({
  select: BlobSelectSchema.optional(),
  include: BlobIncludeSchema.optional(),
  where: BlobWhereInputSchema.optional(),
  orderBy: z.union([ BlobOrderByWithRelationInputSchema.array(),BlobOrderByWithRelationInputSchema ]).optional(),
  cursor: BlobWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BlobScalarFieldEnumSchema,BlobScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const BlobFindManyArgsSchema: z.ZodType<Prisma.BlobFindManyArgs> = z.object({
  select: BlobSelectSchema.optional(),
  include: BlobIncludeSchema.optional(),
  where: BlobWhereInputSchema.optional(),
  orderBy: z.union([ BlobOrderByWithRelationInputSchema.array(),BlobOrderByWithRelationInputSchema ]).optional(),
  cursor: BlobWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BlobScalarFieldEnumSchema,BlobScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const BlobAggregateArgsSchema: z.ZodType<Prisma.BlobAggregateArgs> = z.object({
  where: BlobWhereInputSchema.optional(),
  orderBy: z.union([ BlobOrderByWithRelationInputSchema.array(),BlobOrderByWithRelationInputSchema ]).optional(),
  cursor: BlobWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const BlobGroupByArgsSchema: z.ZodType<Prisma.BlobGroupByArgs> = z.object({
  where: BlobWhereInputSchema.optional(),
  orderBy: z.union([ BlobOrderByWithAggregationInputSchema.array(),BlobOrderByWithAggregationInputSchema ]).optional(),
  by: BlobScalarFieldEnumSchema.array(),
  having: BlobScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const BlobFindUniqueArgsSchema: z.ZodType<Prisma.BlobFindUniqueArgs> = z.object({
  select: BlobSelectSchema.optional(),
  include: BlobIncludeSchema.optional(),
  where: BlobWhereUniqueInputSchema,
}).strict() ;

export const BlobFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.BlobFindUniqueOrThrowArgs> = z.object({
  select: BlobSelectSchema.optional(),
  include: BlobIncludeSchema.optional(),
  where: BlobWhereUniqueInputSchema,
}).strict() ;

export const BlobResizedFindFirstArgsSchema: z.ZodType<Prisma.BlobResizedFindFirstArgs> = z.object({
  select: BlobResizedSelectSchema.optional(),
  include: BlobResizedIncludeSchema.optional(),
  where: BlobResizedWhereInputSchema.optional(),
  orderBy: z.union([ BlobResizedOrderByWithRelationInputSchema.array(),BlobResizedOrderByWithRelationInputSchema ]).optional(),
  cursor: BlobResizedWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BlobResizedScalarFieldEnumSchema,BlobResizedScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const BlobResizedFindFirstOrThrowArgsSchema: z.ZodType<Prisma.BlobResizedFindFirstOrThrowArgs> = z.object({
  select: BlobResizedSelectSchema.optional(),
  include: BlobResizedIncludeSchema.optional(),
  where: BlobResizedWhereInputSchema.optional(),
  orderBy: z.union([ BlobResizedOrderByWithRelationInputSchema.array(),BlobResizedOrderByWithRelationInputSchema ]).optional(),
  cursor: BlobResizedWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BlobResizedScalarFieldEnumSchema,BlobResizedScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const BlobResizedFindManyArgsSchema: z.ZodType<Prisma.BlobResizedFindManyArgs> = z.object({
  select: BlobResizedSelectSchema.optional(),
  include: BlobResizedIncludeSchema.optional(),
  where: BlobResizedWhereInputSchema.optional(),
  orderBy: z.union([ BlobResizedOrderByWithRelationInputSchema.array(),BlobResizedOrderByWithRelationInputSchema ]).optional(),
  cursor: BlobResizedWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BlobResizedScalarFieldEnumSchema,BlobResizedScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const BlobResizedAggregateArgsSchema: z.ZodType<Prisma.BlobResizedAggregateArgs> = z.object({
  where: BlobResizedWhereInputSchema.optional(),
  orderBy: z.union([ BlobResizedOrderByWithRelationInputSchema.array(),BlobResizedOrderByWithRelationInputSchema ]).optional(),
  cursor: BlobResizedWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const BlobResizedGroupByArgsSchema: z.ZodType<Prisma.BlobResizedGroupByArgs> = z.object({
  where: BlobResizedWhereInputSchema.optional(),
  orderBy: z.union([ BlobResizedOrderByWithAggregationInputSchema.array(),BlobResizedOrderByWithAggregationInputSchema ]).optional(),
  by: BlobResizedScalarFieldEnumSchema.array(),
  having: BlobResizedScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const BlobResizedFindUniqueArgsSchema: z.ZodType<Prisma.BlobResizedFindUniqueArgs> = z.object({
  select: BlobResizedSelectSchema.optional(),
  include: BlobResizedIncludeSchema.optional(),
  where: BlobResizedWhereUniqueInputSchema,
}).strict() ;

export const BlobResizedFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.BlobResizedFindUniqueOrThrowArgs> = z.object({
  select: BlobResizedSelectSchema.optional(),
  include: BlobResizedIncludeSchema.optional(),
  where: BlobResizedWhereUniqueInputSchema,
}).strict() ;

export const SynchronizationLogCreateArgsSchema: z.ZodType<Prisma.SynchronizationLogCreateArgs> = z.object({
  select: SynchronizationLogSelectSchema.optional(),
  data: z.union([ SynchronizationLogCreateInputSchema,SynchronizationLogUncheckedCreateInputSchema ]),
}).strict() ;

export const SynchronizationLogUpsertArgsSchema: z.ZodType<Prisma.SynchronizationLogUpsertArgs> = z.object({
  select: SynchronizationLogSelectSchema.optional(),
  where: SynchronizationLogWhereUniqueInputSchema,
  create: z.union([ SynchronizationLogCreateInputSchema,SynchronizationLogUncheckedCreateInputSchema ]),
  update: z.union([ SynchronizationLogUpdateInputSchema,SynchronizationLogUncheckedUpdateInputSchema ]),
}).strict() ;

export const SynchronizationLogCreateManyArgsSchema: z.ZodType<Prisma.SynchronizationLogCreateManyArgs> = z.object({
  data: z.union([ SynchronizationLogCreateManyInputSchema,SynchronizationLogCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SynchronizationLogCreateManyAndReturnArgsSchema: z.ZodType<Prisma.SynchronizationLogCreateManyAndReturnArgs> = z.object({
  data: z.union([ SynchronizationLogCreateManyInputSchema,SynchronizationLogCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SynchronizationLogDeleteArgsSchema: z.ZodType<Prisma.SynchronizationLogDeleteArgs> = z.object({
  select: SynchronizationLogSelectSchema.optional(),
  where: SynchronizationLogWhereUniqueInputSchema,
}).strict() ;

export const SynchronizationLogUpdateArgsSchema: z.ZodType<Prisma.SynchronizationLogUpdateArgs> = z.object({
  select: SynchronizationLogSelectSchema.optional(),
  data: z.union([ SynchronizationLogUpdateInputSchema,SynchronizationLogUncheckedUpdateInputSchema ]),
  where: SynchronizationLogWhereUniqueInputSchema,
}).strict() ;

export const SynchronizationLogUpdateManyArgsSchema: z.ZodType<Prisma.SynchronizationLogUpdateManyArgs> = z.object({
  data: z.union([ SynchronizationLogUpdateManyMutationInputSchema,SynchronizationLogUncheckedUpdateManyInputSchema ]),
  where: SynchronizationLogWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SynchronizationLogUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.SynchronizationLogUpdateManyAndReturnArgs> = z.object({
  data: z.union([ SynchronizationLogUpdateManyMutationInputSchema,SynchronizationLogUncheckedUpdateManyInputSchema ]),
  where: SynchronizationLogWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SynchronizationLogDeleteManyArgsSchema: z.ZodType<Prisma.SynchronizationLogDeleteManyArgs> = z.object({
  where: SynchronizationLogWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AccessPointCreateArgsSchema: z.ZodType<Prisma.AccessPointCreateArgs> = z.object({
  select: AccessPointSelectSchema.optional(),
  data: z.union([ AccessPointCreateInputSchema,AccessPointUncheckedCreateInputSchema ]),
}).strict() ;

export const AccessPointUpsertArgsSchema: z.ZodType<Prisma.AccessPointUpsertArgs> = z.object({
  select: AccessPointSelectSchema.optional(),
  where: AccessPointWhereUniqueInputSchema,
  create: z.union([ AccessPointCreateInputSchema,AccessPointUncheckedCreateInputSchema ]),
  update: z.union([ AccessPointUpdateInputSchema,AccessPointUncheckedUpdateInputSchema ]),
}).strict() ;

export const AccessPointCreateManyArgsSchema: z.ZodType<Prisma.AccessPointCreateManyArgs> = z.object({
  data: z.union([ AccessPointCreateManyInputSchema,AccessPointCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AccessPointCreateManyAndReturnArgsSchema: z.ZodType<Prisma.AccessPointCreateManyAndReturnArgs> = z.object({
  data: z.union([ AccessPointCreateManyInputSchema,AccessPointCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AccessPointDeleteArgsSchema: z.ZodType<Prisma.AccessPointDeleteArgs> = z.object({
  select: AccessPointSelectSchema.optional(),
  where: AccessPointWhereUniqueInputSchema,
}).strict() ;

export const AccessPointUpdateArgsSchema: z.ZodType<Prisma.AccessPointUpdateArgs> = z.object({
  select: AccessPointSelectSchema.optional(),
  data: z.union([ AccessPointUpdateInputSchema,AccessPointUncheckedUpdateInputSchema ]),
  where: AccessPointWhereUniqueInputSchema,
}).strict() ;

export const AccessPointUpdateManyArgsSchema: z.ZodType<Prisma.AccessPointUpdateManyArgs> = z.object({
  data: z.union([ AccessPointUpdateManyMutationInputSchema,AccessPointUncheckedUpdateManyInputSchema ]),
  where: AccessPointWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AccessPointUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.AccessPointUpdateManyAndReturnArgs> = z.object({
  data: z.union([ AccessPointUpdateManyMutationInputSchema,AccessPointUncheckedUpdateManyInputSchema ]),
  where: AccessPointWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AccessPointDeleteManyArgsSchema: z.ZodType<Prisma.AccessPointDeleteManyArgs> = z.object({
  where: AccessPointWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AuditLogCreateArgsSchema: z.ZodType<Prisma.AuditLogCreateArgs> = z.object({
  select: AuditLogSelectSchema.optional(),
  data: z.union([ AuditLogCreateInputSchema,AuditLogUncheckedCreateInputSchema ]),
}).strict() ;

export const AuditLogUpsertArgsSchema: z.ZodType<Prisma.AuditLogUpsertArgs> = z.object({
  select: AuditLogSelectSchema.optional(),
  where: AuditLogWhereUniqueInputSchema,
  create: z.union([ AuditLogCreateInputSchema,AuditLogUncheckedCreateInputSchema ]),
  update: z.union([ AuditLogUpdateInputSchema,AuditLogUncheckedUpdateInputSchema ]),
}).strict() ;

export const AuditLogCreateManyArgsSchema: z.ZodType<Prisma.AuditLogCreateManyArgs> = z.object({
  data: z.union([ AuditLogCreateManyInputSchema,AuditLogCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AuditLogCreateManyAndReturnArgsSchema: z.ZodType<Prisma.AuditLogCreateManyAndReturnArgs> = z.object({
  data: z.union([ AuditLogCreateManyInputSchema,AuditLogCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AuditLogDeleteArgsSchema: z.ZodType<Prisma.AuditLogDeleteArgs> = z.object({
  select: AuditLogSelectSchema.optional(),
  where: AuditLogWhereUniqueInputSchema,
}).strict() ;

export const AuditLogUpdateArgsSchema: z.ZodType<Prisma.AuditLogUpdateArgs> = z.object({
  select: AuditLogSelectSchema.optional(),
  data: z.union([ AuditLogUpdateInputSchema,AuditLogUncheckedUpdateInputSchema ]),
  where: AuditLogWhereUniqueInputSchema,
}).strict() ;

export const AuditLogUpdateManyArgsSchema: z.ZodType<Prisma.AuditLogUpdateManyArgs> = z.object({
  data: z.union([ AuditLogUpdateManyMutationInputSchema,AuditLogUncheckedUpdateManyInputSchema ]),
  where: AuditLogWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AuditLogUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.AuditLogUpdateManyAndReturnArgs> = z.object({
  data: z.union([ AuditLogUpdateManyMutationInputSchema,AuditLogUncheckedUpdateManyInputSchema ]),
  where: AuditLogWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AuditLogDeleteManyArgsSchema: z.ZodType<Prisma.AuditLogDeleteManyArgs> = z.object({
  where: AuditLogWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const BoardCreateArgsSchema: z.ZodType<Prisma.BoardCreateArgs> = z.object({
  select: BoardSelectSchema.optional(),
  include: BoardIncludeSchema.optional(),
  data: z.union([ BoardCreateInputSchema,BoardUncheckedCreateInputSchema ]),
}).strict() ;

export const BoardUpsertArgsSchema: z.ZodType<Prisma.BoardUpsertArgs> = z.object({
  select: BoardSelectSchema.optional(),
  include: BoardIncludeSchema.optional(),
  where: BoardWhereUniqueInputSchema,
  create: z.union([ BoardCreateInputSchema,BoardUncheckedCreateInputSchema ]),
  update: z.union([ BoardUpdateInputSchema,BoardUncheckedUpdateInputSchema ]),
}).strict() ;

export const BoardCreateManyArgsSchema: z.ZodType<Prisma.BoardCreateManyArgs> = z.object({
  data: z.union([ BoardCreateManyInputSchema,BoardCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const BoardCreateManyAndReturnArgsSchema: z.ZodType<Prisma.BoardCreateManyAndReturnArgs> = z.object({
  data: z.union([ BoardCreateManyInputSchema,BoardCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const BoardDeleteArgsSchema: z.ZodType<Prisma.BoardDeleteArgs> = z.object({
  select: BoardSelectSchema.optional(),
  include: BoardIncludeSchema.optional(),
  where: BoardWhereUniqueInputSchema,
}).strict() ;

export const BoardUpdateArgsSchema: z.ZodType<Prisma.BoardUpdateArgs> = z.object({
  select: BoardSelectSchema.optional(),
  include: BoardIncludeSchema.optional(),
  data: z.union([ BoardUpdateInputSchema,BoardUncheckedUpdateInputSchema ]),
  where: BoardWhereUniqueInputSchema,
}).strict() ;

export const BoardUpdateManyArgsSchema: z.ZodType<Prisma.BoardUpdateManyArgs> = z.object({
  data: z.union([ BoardUpdateManyMutationInputSchema,BoardUncheckedUpdateManyInputSchema ]),
  where: BoardWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const BoardUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.BoardUpdateManyAndReturnArgs> = z.object({
  data: z.union([ BoardUpdateManyMutationInputSchema,BoardUncheckedUpdateManyInputSchema ]),
  where: BoardWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const BoardDeleteManyArgsSchema: z.ZodType<Prisma.BoardDeleteManyArgs> = z.object({
  where: BoardWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CategoryCreateArgsSchema: z.ZodType<Prisma.CategoryCreateArgs> = z.object({
  select: CategorySelectSchema.optional(),
  include: CategoryIncludeSchema.optional(),
  data: z.union([ CategoryCreateInputSchema,CategoryUncheckedCreateInputSchema ]),
}).strict() ;

export const CategoryUpsertArgsSchema: z.ZodType<Prisma.CategoryUpsertArgs> = z.object({
  select: CategorySelectSchema.optional(),
  include: CategoryIncludeSchema.optional(),
  where: CategoryWhereUniqueInputSchema,
  create: z.union([ CategoryCreateInputSchema,CategoryUncheckedCreateInputSchema ]),
  update: z.union([ CategoryUpdateInputSchema,CategoryUncheckedUpdateInputSchema ]),
}).strict() ;

export const CategoryCreateManyArgsSchema: z.ZodType<Prisma.CategoryCreateManyArgs> = z.object({
  data: z.union([ CategoryCreateManyInputSchema,CategoryCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CategoryCreateManyAndReturnArgsSchema: z.ZodType<Prisma.CategoryCreateManyAndReturnArgs> = z.object({
  data: z.union([ CategoryCreateManyInputSchema,CategoryCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CategoryDeleteArgsSchema: z.ZodType<Prisma.CategoryDeleteArgs> = z.object({
  select: CategorySelectSchema.optional(),
  include: CategoryIncludeSchema.optional(),
  where: CategoryWhereUniqueInputSchema,
}).strict() ;

export const CategoryUpdateArgsSchema: z.ZodType<Prisma.CategoryUpdateArgs> = z.object({
  select: CategorySelectSchema.optional(),
  include: CategoryIncludeSchema.optional(),
  data: z.union([ CategoryUpdateInputSchema,CategoryUncheckedUpdateInputSchema ]),
  where: CategoryWhereUniqueInputSchema,
}).strict() ;

export const CategoryUpdateManyArgsSchema: z.ZodType<Prisma.CategoryUpdateManyArgs> = z.object({
  data: z.union([ CategoryUpdateManyMutationInputSchema,CategoryUncheckedUpdateManyInputSchema ]),
  where: CategoryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CategoryUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.CategoryUpdateManyAndReturnArgs> = z.object({
  data: z.union([ CategoryUpdateManyMutationInputSchema,CategoryUncheckedUpdateManyInputSchema ]),
  where: CategoryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CategoryDeleteManyArgsSchema: z.ZodType<Prisma.CategoryDeleteManyArgs> = z.object({
  where: CategoryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CountryCreateArgsSchema: z.ZodType<Prisma.CountryCreateArgs> = z.object({
  select: CountrySelectSchema.optional(),
  include: CountryIncludeSchema.optional(),
  data: z.union([ CountryCreateInputSchema,CountryUncheckedCreateInputSchema ]),
}).strict() ;

export const CountryUpsertArgsSchema: z.ZodType<Prisma.CountryUpsertArgs> = z.object({
  select: CountrySelectSchema.optional(),
  include: CountryIncludeSchema.optional(),
  where: CountryWhereUniqueInputSchema,
  create: z.union([ CountryCreateInputSchema,CountryUncheckedCreateInputSchema ]),
  update: z.union([ CountryUpdateInputSchema,CountryUncheckedUpdateInputSchema ]),
}).strict() ;

export const CountryCreateManyArgsSchema: z.ZodType<Prisma.CountryCreateManyArgs> = z.object({
  data: z.union([ CountryCreateManyInputSchema,CountryCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CountryCreateManyAndReturnArgsSchema: z.ZodType<Prisma.CountryCreateManyAndReturnArgs> = z.object({
  data: z.union([ CountryCreateManyInputSchema,CountryCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CountryDeleteArgsSchema: z.ZodType<Prisma.CountryDeleteArgs> = z.object({
  select: CountrySelectSchema.optional(),
  include: CountryIncludeSchema.optional(),
  where: CountryWhereUniqueInputSchema,
}).strict() ;

export const CountryUpdateArgsSchema: z.ZodType<Prisma.CountryUpdateArgs> = z.object({
  select: CountrySelectSchema.optional(),
  include: CountryIncludeSchema.optional(),
  data: z.union([ CountryUpdateInputSchema,CountryUncheckedUpdateInputSchema ]),
  where: CountryWhereUniqueInputSchema,
}).strict() ;

export const CountryUpdateManyArgsSchema: z.ZodType<Prisma.CountryUpdateManyArgs> = z.object({
  data: z.union([ CountryUpdateManyMutationInputSchema,CountryUncheckedUpdateManyInputSchema ]),
  where: CountryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CountryUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.CountryUpdateManyAndReturnArgs> = z.object({
  data: z.union([ CountryUpdateManyMutationInputSchema,CountryUncheckedUpdateManyInputSchema ]),
  where: CountryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CountryDeleteManyArgsSchema: z.ZodType<Prisma.CountryDeleteManyArgs> = z.object({
  where: CountryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const LanguageCreateArgsSchema: z.ZodType<Prisma.LanguageCreateArgs> = z.object({
  select: LanguageSelectSchema.optional(),
  include: LanguageIncludeSchema.optional(),
  data: z.union([ LanguageCreateInputSchema,LanguageUncheckedCreateInputSchema ]),
}).strict() ;

export const LanguageUpsertArgsSchema: z.ZodType<Prisma.LanguageUpsertArgs> = z.object({
  select: LanguageSelectSchema.optional(),
  include: LanguageIncludeSchema.optional(),
  where: LanguageWhereUniqueInputSchema,
  create: z.union([ LanguageCreateInputSchema,LanguageUncheckedCreateInputSchema ]),
  update: z.union([ LanguageUpdateInputSchema,LanguageUncheckedUpdateInputSchema ]),
}).strict() ;

export const LanguageCreateManyArgsSchema: z.ZodType<Prisma.LanguageCreateManyArgs> = z.object({
  data: z.union([ LanguageCreateManyInputSchema,LanguageCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const LanguageCreateManyAndReturnArgsSchema: z.ZodType<Prisma.LanguageCreateManyAndReturnArgs> = z.object({
  data: z.union([ LanguageCreateManyInputSchema,LanguageCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const LanguageDeleteArgsSchema: z.ZodType<Prisma.LanguageDeleteArgs> = z.object({
  select: LanguageSelectSchema.optional(),
  include: LanguageIncludeSchema.optional(),
  where: LanguageWhereUniqueInputSchema,
}).strict() ;

export const LanguageUpdateArgsSchema: z.ZodType<Prisma.LanguageUpdateArgs> = z.object({
  select: LanguageSelectSchema.optional(),
  include: LanguageIncludeSchema.optional(),
  data: z.union([ LanguageUpdateInputSchema,LanguageUncheckedUpdateInputSchema ]),
  where: LanguageWhereUniqueInputSchema,
}).strict() ;

export const LanguageUpdateManyArgsSchema: z.ZodType<Prisma.LanguageUpdateManyArgs> = z.object({
  data: z.union([ LanguageUpdateManyMutationInputSchema,LanguageUncheckedUpdateManyInputSchema ]),
  where: LanguageWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const LanguageUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.LanguageUpdateManyAndReturnArgs> = z.object({
  data: z.union([ LanguageUpdateManyMutationInputSchema,LanguageUncheckedUpdateManyInputSchema ]),
  where: LanguageWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const LanguageDeleteManyArgsSchema: z.ZodType<Prisma.LanguageDeleteManyArgs> = z.object({
  where: LanguageWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PurposeCreateArgsSchema: z.ZodType<Prisma.PurposeCreateArgs> = z.object({
  select: PurposeSelectSchema.optional(),
  include: PurposeIncludeSchema.optional(),
  data: z.union([ PurposeCreateInputSchema,PurposeUncheckedCreateInputSchema ]),
}).strict() ;

export const PurposeUpsertArgsSchema: z.ZodType<Prisma.PurposeUpsertArgs> = z.object({
  select: PurposeSelectSchema.optional(),
  include: PurposeIncludeSchema.optional(),
  where: PurposeWhereUniqueInputSchema,
  create: z.union([ PurposeCreateInputSchema,PurposeUncheckedCreateInputSchema ]),
  update: z.union([ PurposeUpdateInputSchema,PurposeUncheckedUpdateInputSchema ]),
}).strict() ;

export const PurposeCreateManyArgsSchema: z.ZodType<Prisma.PurposeCreateManyArgs> = z.object({
  data: z.union([ PurposeCreateManyInputSchema,PurposeCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PurposeCreateManyAndReturnArgsSchema: z.ZodType<Prisma.PurposeCreateManyAndReturnArgs> = z.object({
  data: z.union([ PurposeCreateManyInputSchema,PurposeCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PurposeDeleteArgsSchema: z.ZodType<Prisma.PurposeDeleteArgs> = z.object({
  select: PurposeSelectSchema.optional(),
  include: PurposeIncludeSchema.optional(),
  where: PurposeWhereUniqueInputSchema,
}).strict() ;

export const PurposeUpdateArgsSchema: z.ZodType<Prisma.PurposeUpdateArgs> = z.object({
  select: PurposeSelectSchema.optional(),
  include: PurposeIncludeSchema.optional(),
  data: z.union([ PurposeUpdateInputSchema,PurposeUncheckedUpdateInputSchema ]),
  where: PurposeWhereUniqueInputSchema,
}).strict() ;

export const PurposeUpdateManyArgsSchema: z.ZodType<Prisma.PurposeUpdateManyArgs> = z.object({
  data: z.union([ PurposeUpdateManyMutationInputSchema,PurposeUncheckedUpdateManyInputSchema ]),
  where: PurposeWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PurposeUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.PurposeUpdateManyAndReturnArgs> = z.object({
  data: z.union([ PurposeUpdateManyMutationInputSchema,PurposeUncheckedUpdateManyInputSchema ]),
  where: PurposeWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PurposeDeleteManyArgsSchema: z.ZodType<Prisma.PurposeDeleteManyArgs> = z.object({
  where: PurposeWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RegionCreateArgsSchema: z.ZodType<Prisma.RegionCreateArgs> = z.object({
  select: RegionSelectSchema.optional(),
  include: RegionIncludeSchema.optional(),
  data: z.union([ RegionCreateInputSchema,RegionUncheckedCreateInputSchema ]),
}).strict() ;

export const RegionUpsertArgsSchema: z.ZodType<Prisma.RegionUpsertArgs> = z.object({
  select: RegionSelectSchema.optional(),
  include: RegionIncludeSchema.optional(),
  where: RegionWhereUniqueInputSchema,
  create: z.union([ RegionCreateInputSchema,RegionUncheckedCreateInputSchema ]),
  update: z.union([ RegionUpdateInputSchema,RegionUncheckedUpdateInputSchema ]),
}).strict() ;

export const RegionCreateManyArgsSchema: z.ZodType<Prisma.RegionCreateManyArgs> = z.object({
  data: z.union([ RegionCreateManyInputSchema,RegionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RegionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.RegionCreateManyAndReturnArgs> = z.object({
  data: z.union([ RegionCreateManyInputSchema,RegionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RegionDeleteArgsSchema: z.ZodType<Prisma.RegionDeleteArgs> = z.object({
  select: RegionSelectSchema.optional(),
  include: RegionIncludeSchema.optional(),
  where: RegionWhereUniqueInputSchema,
}).strict() ;

export const RegionUpdateArgsSchema: z.ZodType<Prisma.RegionUpdateArgs> = z.object({
  select: RegionSelectSchema.optional(),
  include: RegionIncludeSchema.optional(),
  data: z.union([ RegionUpdateInputSchema,RegionUncheckedUpdateInputSchema ]),
  where: RegionWhereUniqueInputSchema,
}).strict() ;

export const RegionUpdateManyArgsSchema: z.ZodType<Prisma.RegionUpdateManyArgs> = z.object({
  data: z.union([ RegionUpdateManyMutationInputSchema,RegionUncheckedUpdateManyInputSchema ]),
  where: RegionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RegionUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.RegionUpdateManyAndReturnArgs> = z.object({
  data: z.union([ RegionUpdateManyMutationInputSchema,RegionUncheckedUpdateManyInputSchema ]),
  where: RegionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RegionDeleteManyArgsSchema: z.ZodType<Prisma.RegionDeleteManyArgs> = z.object({
  where: RegionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SettingCreateArgsSchema: z.ZodType<Prisma.SettingCreateArgs> = z.object({
  select: SettingSelectSchema.optional(),
  data: z.union([ SettingCreateInputSchema,SettingUncheckedCreateInputSchema ]),
}).strict() ;

export const SettingUpsertArgsSchema: z.ZodType<Prisma.SettingUpsertArgs> = z.object({
  select: SettingSelectSchema.optional(),
  where: SettingWhereUniqueInputSchema,
  create: z.union([ SettingCreateInputSchema,SettingUncheckedCreateInputSchema ]),
  update: z.union([ SettingUpdateInputSchema,SettingUncheckedUpdateInputSchema ]),
}).strict() ;

export const SettingCreateManyArgsSchema: z.ZodType<Prisma.SettingCreateManyArgs> = z.object({
  data: z.union([ SettingCreateManyInputSchema,SettingCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SettingCreateManyAndReturnArgsSchema: z.ZodType<Prisma.SettingCreateManyAndReturnArgs> = z.object({
  data: z.union([ SettingCreateManyInputSchema,SettingCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SettingDeleteArgsSchema: z.ZodType<Prisma.SettingDeleteArgs> = z.object({
  select: SettingSelectSchema.optional(),
  where: SettingWhereUniqueInputSchema,
}).strict() ;

export const SettingUpdateArgsSchema: z.ZodType<Prisma.SettingUpdateArgs> = z.object({
  select: SettingSelectSchema.optional(),
  data: z.union([ SettingUpdateInputSchema,SettingUncheckedUpdateInputSchema ]),
  where: SettingWhereUniqueInputSchema,
}).strict() ;

export const SettingUpdateManyArgsSchema: z.ZodType<Prisma.SettingUpdateManyArgs> = z.object({
  data: z.union([ SettingUpdateManyMutationInputSchema,SettingUncheckedUpdateManyInputSchema ]),
  where: SettingWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SettingUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.SettingUpdateManyAndReturnArgs> = z.object({
  data: z.union([ SettingUpdateManyMutationInputSchema,SettingUncheckedUpdateManyInputSchema ]),
  where: SettingWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SettingDeleteManyArgsSchema: z.ZodType<Prisma.SettingDeleteManyArgs> = z.object({
  where: SettingWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ToolCreateArgsSchema: z.ZodType<Prisma.ToolCreateArgs> = z.object({
  select: ToolSelectSchema.optional(),
  include: ToolIncludeSchema.optional(),
  data: z.union([ ToolCreateInputSchema,ToolUncheckedCreateInputSchema ]),
}).strict() ;

export const ToolUpsertArgsSchema: z.ZodType<Prisma.ToolUpsertArgs> = z.object({
  select: ToolSelectSchema.optional(),
  include: ToolIncludeSchema.optional(),
  where: ToolWhereUniqueInputSchema,
  create: z.union([ ToolCreateInputSchema,ToolUncheckedCreateInputSchema ]),
  update: z.union([ ToolUpdateInputSchema,ToolUncheckedUpdateInputSchema ]),
}).strict() ;

export const ToolCreateManyArgsSchema: z.ZodType<Prisma.ToolCreateManyArgs> = z.object({
  data: z.union([ ToolCreateManyInputSchema,ToolCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ToolCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ToolCreateManyAndReturnArgs> = z.object({
  data: z.union([ ToolCreateManyInputSchema,ToolCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ToolDeleteArgsSchema: z.ZodType<Prisma.ToolDeleteArgs> = z.object({
  select: ToolSelectSchema.optional(),
  include: ToolIncludeSchema.optional(),
  where: ToolWhereUniqueInputSchema,
}).strict() ;

export const ToolUpdateArgsSchema: z.ZodType<Prisma.ToolUpdateArgs> = z.object({
  select: ToolSelectSchema.optional(),
  include: ToolIncludeSchema.optional(),
  data: z.union([ ToolUpdateInputSchema,ToolUncheckedUpdateInputSchema ]),
  where: ToolWhereUniqueInputSchema,
}).strict() ;

export const ToolUpdateManyArgsSchema: z.ZodType<Prisma.ToolUpdateManyArgs> = z.object({
  data: z.union([ ToolUpdateManyMutationInputSchema,ToolUncheckedUpdateManyInputSchema ]),
  where: ToolWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ToolUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ToolUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ToolUpdateManyMutationInputSchema,ToolUncheckedUpdateManyInputSchema ]),
  where: ToolWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ToolDeleteManyArgsSchema: z.ZodType<Prisma.ToolDeleteManyArgs> = z.object({
  where: ToolWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ToolTextsCreateArgsSchema: z.ZodType<Prisma.ToolTextsCreateArgs> = z.object({
  select: ToolTextsSelectSchema.optional(),
  include: ToolTextsIncludeSchema.optional(),
  data: z.union([ ToolTextsCreateInputSchema,ToolTextsUncheckedCreateInputSchema ]),
}).strict() ;

export const ToolTextsUpsertArgsSchema: z.ZodType<Prisma.ToolTextsUpsertArgs> = z.object({
  select: ToolTextsSelectSchema.optional(),
  include: ToolTextsIncludeSchema.optional(),
  where: ToolTextsWhereUniqueInputSchema,
  create: z.union([ ToolTextsCreateInputSchema,ToolTextsUncheckedCreateInputSchema ]),
  update: z.union([ ToolTextsUpdateInputSchema,ToolTextsUncheckedUpdateInputSchema ]),
}).strict() ;

export const ToolTextsCreateManyArgsSchema: z.ZodType<Prisma.ToolTextsCreateManyArgs> = z.object({
  data: z.union([ ToolTextsCreateManyInputSchema,ToolTextsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ToolTextsCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ToolTextsCreateManyAndReturnArgs> = z.object({
  data: z.union([ ToolTextsCreateManyInputSchema,ToolTextsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ToolTextsDeleteArgsSchema: z.ZodType<Prisma.ToolTextsDeleteArgs> = z.object({
  select: ToolTextsSelectSchema.optional(),
  include: ToolTextsIncludeSchema.optional(),
  where: ToolTextsWhereUniqueInputSchema,
}).strict() ;

export const ToolTextsUpdateArgsSchema: z.ZodType<Prisma.ToolTextsUpdateArgs> = z.object({
  select: ToolTextsSelectSchema.optional(),
  include: ToolTextsIncludeSchema.optional(),
  data: z.union([ ToolTextsUpdateInputSchema,ToolTextsUncheckedUpdateInputSchema ]),
  where: ToolTextsWhereUniqueInputSchema,
}).strict() ;

export const ToolTextsUpdateManyArgsSchema: z.ZodType<Prisma.ToolTextsUpdateManyArgs> = z.object({
  data: z.union([ ToolTextsUpdateManyMutationInputSchema,ToolTextsUncheckedUpdateManyInputSchema ]),
  where: ToolTextsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ToolTextsUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ToolTextsUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ToolTextsUpdateManyMutationInputSchema,ToolTextsUncheckedUpdateManyInputSchema ]),
  where: ToolTextsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ToolTextsDeleteManyArgsSchema: z.ZodType<Prisma.ToolTextsDeleteManyArgs> = z.object({
  where: ToolTextsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ToolGroupCreateArgsSchema: z.ZodType<Prisma.ToolGroupCreateArgs> = z.object({
  select: ToolGroupSelectSchema.optional(),
  include: ToolGroupIncludeSchema.optional(),
  data: z.union([ ToolGroupCreateInputSchema,ToolGroupUncheckedCreateInputSchema ]),
}).strict() ;

export const ToolGroupUpsertArgsSchema: z.ZodType<Prisma.ToolGroupUpsertArgs> = z.object({
  select: ToolGroupSelectSchema.optional(),
  include: ToolGroupIncludeSchema.optional(),
  where: ToolGroupWhereUniqueInputSchema,
  create: z.union([ ToolGroupCreateInputSchema,ToolGroupUncheckedCreateInputSchema ]),
  update: z.union([ ToolGroupUpdateInputSchema,ToolGroupUncheckedUpdateInputSchema ]),
}).strict() ;

export const ToolGroupCreateManyArgsSchema: z.ZodType<Prisma.ToolGroupCreateManyArgs> = z.object({
  data: z.union([ ToolGroupCreateManyInputSchema,ToolGroupCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ToolGroupCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ToolGroupCreateManyAndReturnArgs> = z.object({
  data: z.union([ ToolGroupCreateManyInputSchema,ToolGroupCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ToolGroupDeleteArgsSchema: z.ZodType<Prisma.ToolGroupDeleteArgs> = z.object({
  select: ToolGroupSelectSchema.optional(),
  include: ToolGroupIncludeSchema.optional(),
  where: ToolGroupWhereUniqueInputSchema,
}).strict() ;

export const ToolGroupUpdateArgsSchema: z.ZodType<Prisma.ToolGroupUpdateArgs> = z.object({
  select: ToolGroupSelectSchema.optional(),
  include: ToolGroupIncludeSchema.optional(),
  data: z.union([ ToolGroupUpdateInputSchema,ToolGroupUncheckedUpdateInputSchema ]),
  where: ToolGroupWhereUniqueInputSchema,
}).strict() ;

export const ToolGroupUpdateManyArgsSchema: z.ZodType<Prisma.ToolGroupUpdateManyArgs> = z.object({
  data: z.union([ ToolGroupUpdateManyMutationInputSchema,ToolGroupUncheckedUpdateManyInputSchema ]),
  where: ToolGroupWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ToolGroupUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ToolGroupUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ToolGroupUpdateManyMutationInputSchema,ToolGroupUncheckedUpdateManyInputSchema ]),
  where: ToolGroupWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ToolGroupDeleteManyArgsSchema: z.ZodType<Prisma.ToolGroupDeleteManyArgs> = z.object({
  where: ToolGroupWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserGroupCreateArgsSchema: z.ZodType<Prisma.UserGroupCreateArgs> = z.object({
  select: UserGroupSelectSchema.optional(),
  include: UserGroupIncludeSchema.optional(),
  data: z.union([ UserGroupCreateInputSchema,UserGroupUncheckedCreateInputSchema ]),
}).strict() ;

export const UserGroupUpsertArgsSchema: z.ZodType<Prisma.UserGroupUpsertArgs> = z.object({
  select: UserGroupSelectSchema.optional(),
  include: UserGroupIncludeSchema.optional(),
  where: UserGroupWhereUniqueInputSchema,
  create: z.union([ UserGroupCreateInputSchema,UserGroupUncheckedCreateInputSchema ]),
  update: z.union([ UserGroupUpdateInputSchema,UserGroupUncheckedUpdateInputSchema ]),
}).strict() ;

export const UserGroupCreateManyArgsSchema: z.ZodType<Prisma.UserGroupCreateManyArgs> = z.object({
  data: z.union([ UserGroupCreateManyInputSchema,UserGroupCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserGroupCreateManyAndReturnArgsSchema: z.ZodType<Prisma.UserGroupCreateManyAndReturnArgs> = z.object({
  data: z.union([ UserGroupCreateManyInputSchema,UserGroupCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserGroupDeleteArgsSchema: z.ZodType<Prisma.UserGroupDeleteArgs> = z.object({
  select: UserGroupSelectSchema.optional(),
  include: UserGroupIncludeSchema.optional(),
  where: UserGroupWhereUniqueInputSchema,
}).strict() ;

export const UserGroupUpdateArgsSchema: z.ZodType<Prisma.UserGroupUpdateArgs> = z.object({
  select: UserGroupSelectSchema.optional(),
  include: UserGroupIncludeSchema.optional(),
  data: z.union([ UserGroupUpdateInputSchema,UserGroupUncheckedUpdateInputSchema ]),
  where: UserGroupWhereUniqueInputSchema,
}).strict() ;

export const UserGroupUpdateManyArgsSchema: z.ZodType<Prisma.UserGroupUpdateManyArgs> = z.object({
  data: z.union([ UserGroupUpdateManyMutationInputSchema,UserGroupUncheckedUpdateManyInputSchema ]),
  where: UserGroupWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserGroupUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.UserGroupUpdateManyAndReturnArgs> = z.object({
  data: z.union([ UserGroupUpdateManyMutationInputSchema,UserGroupUncheckedUpdateManyInputSchema ]),
  where: UserGroupWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserGroupDeleteManyArgsSchema: z.ZodType<Prisma.UserGroupDeleteManyArgs> = z.object({
  where: UserGroupWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserProfileCreateArgsSchema: z.ZodType<Prisma.UserProfileCreateArgs> = z.object({
  select: UserProfileSelectSchema.optional(),
  include: UserProfileIncludeSchema.optional(),
  data: z.union([ UserProfileCreateInputSchema,UserProfileUncheckedCreateInputSchema ]),
}).strict() ;

export const UserProfileUpsertArgsSchema: z.ZodType<Prisma.UserProfileUpsertArgs> = z.object({
  select: UserProfileSelectSchema.optional(),
  include: UserProfileIncludeSchema.optional(),
  where: UserProfileWhereUniqueInputSchema,
  create: z.union([ UserProfileCreateInputSchema,UserProfileUncheckedCreateInputSchema ]),
  update: z.union([ UserProfileUpdateInputSchema,UserProfileUncheckedUpdateInputSchema ]),
}).strict() ;

export const UserProfileCreateManyArgsSchema: z.ZodType<Prisma.UserProfileCreateManyArgs> = z.object({
  data: z.union([ UserProfileCreateManyInputSchema,UserProfileCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserProfileCreateManyAndReturnArgsSchema: z.ZodType<Prisma.UserProfileCreateManyAndReturnArgs> = z.object({
  data: z.union([ UserProfileCreateManyInputSchema,UserProfileCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserProfileDeleteArgsSchema: z.ZodType<Prisma.UserProfileDeleteArgs> = z.object({
  select: UserProfileSelectSchema.optional(),
  include: UserProfileIncludeSchema.optional(),
  where: UserProfileWhereUniqueInputSchema,
}).strict() ;

export const UserProfileUpdateArgsSchema: z.ZodType<Prisma.UserProfileUpdateArgs> = z.object({
  select: UserProfileSelectSchema.optional(),
  include: UserProfileIncludeSchema.optional(),
  data: z.union([ UserProfileUpdateInputSchema,UserProfileUncheckedUpdateInputSchema ]),
  where: UserProfileWhereUniqueInputSchema,
}).strict() ;

export const UserProfileUpdateManyArgsSchema: z.ZodType<Prisma.UserProfileUpdateManyArgs> = z.object({
  data: z.union([ UserProfileUpdateManyMutationInputSchema,UserProfileUncheckedUpdateManyInputSchema ]),
  where: UserProfileWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserProfileUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.UserProfileUpdateManyAndReturnArgs> = z.object({
  data: z.union([ UserProfileUpdateManyMutationInputSchema,UserProfileUncheckedUpdateManyInputSchema ]),
  where: UserProfileWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserProfileDeleteManyArgsSchema: z.ZodType<Prisma.UserProfileDeleteManyArgs> = z.object({
  where: UserProfileWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserRoleCreateArgsSchema: z.ZodType<Prisma.UserRoleCreateArgs> = z.object({
  select: UserRoleSelectSchema.optional(),
  include: UserRoleIncludeSchema.optional(),
  data: z.union([ UserRoleCreateInputSchema,UserRoleUncheckedCreateInputSchema ]),
}).strict() ;

export const UserRoleUpsertArgsSchema: z.ZodType<Prisma.UserRoleUpsertArgs> = z.object({
  select: UserRoleSelectSchema.optional(),
  include: UserRoleIncludeSchema.optional(),
  where: UserRoleWhereUniqueInputSchema,
  create: z.union([ UserRoleCreateInputSchema,UserRoleUncheckedCreateInputSchema ]),
  update: z.union([ UserRoleUpdateInputSchema,UserRoleUncheckedUpdateInputSchema ]),
}).strict() ;

export const UserRoleCreateManyArgsSchema: z.ZodType<Prisma.UserRoleCreateManyArgs> = z.object({
  data: z.union([ UserRoleCreateManyInputSchema,UserRoleCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserRoleCreateManyAndReturnArgsSchema: z.ZodType<Prisma.UserRoleCreateManyAndReturnArgs> = z.object({
  data: z.union([ UserRoleCreateManyInputSchema,UserRoleCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserRoleDeleteArgsSchema: z.ZodType<Prisma.UserRoleDeleteArgs> = z.object({
  select: UserRoleSelectSchema.optional(),
  include: UserRoleIncludeSchema.optional(),
  where: UserRoleWhereUniqueInputSchema,
}).strict() ;

export const UserRoleUpdateArgsSchema: z.ZodType<Prisma.UserRoleUpdateArgs> = z.object({
  select: UserRoleSelectSchema.optional(),
  include: UserRoleIncludeSchema.optional(),
  data: z.union([ UserRoleUpdateInputSchema,UserRoleUncheckedUpdateInputSchema ]),
  where: UserRoleWhereUniqueInputSchema,
}).strict() ;

export const UserRoleUpdateManyArgsSchema: z.ZodType<Prisma.UserRoleUpdateManyArgs> = z.object({
  data: z.union([ UserRoleUpdateManyMutationInputSchema,UserRoleUncheckedUpdateManyInputSchema ]),
  where: UserRoleWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserRoleUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.UserRoleUpdateManyAndReturnArgs> = z.object({
  data: z.union([ UserRoleUpdateManyMutationInputSchema,UserRoleUncheckedUpdateManyInputSchema ]),
  where: UserRoleWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserRoleDeleteManyArgsSchema: z.ZodType<Prisma.UserRoleDeleteManyArgs> = z.object({
  where: UserRoleWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SessionCreateArgsSchema: z.ZodType<Prisma.SessionCreateArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  data: z.union([ SessionCreateInputSchema,SessionUncheckedCreateInputSchema ]),
}).strict() ;

export const SessionUpsertArgsSchema: z.ZodType<Prisma.SessionUpsertArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
  create: z.union([ SessionCreateInputSchema,SessionUncheckedCreateInputSchema ]),
  update: z.union([ SessionUpdateInputSchema,SessionUncheckedUpdateInputSchema ]),
}).strict() ;

export const SessionCreateManyArgsSchema: z.ZodType<Prisma.SessionCreateManyArgs> = z.object({
  data: z.union([ SessionCreateManyInputSchema,SessionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SessionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.SessionCreateManyAndReturnArgs> = z.object({
  data: z.union([ SessionCreateManyInputSchema,SessionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SessionDeleteArgsSchema: z.ZodType<Prisma.SessionDeleteArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const SessionUpdateArgsSchema: z.ZodType<Prisma.SessionUpdateArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  data: z.union([ SessionUpdateInputSchema,SessionUncheckedUpdateInputSchema ]),
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const SessionUpdateManyArgsSchema: z.ZodType<Prisma.SessionUpdateManyArgs> = z.object({
  data: z.union([ SessionUpdateManyMutationInputSchema,SessionUncheckedUpdateManyInputSchema ]),
  where: SessionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SessionUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.SessionUpdateManyAndReturnArgs> = z.object({
  data: z.union([ SessionUpdateManyMutationInputSchema,SessionUncheckedUpdateManyInputSchema ]),
  where: SessionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SessionDeleteManyArgsSchema: z.ZodType<Prisma.SessionDeleteManyArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const BusinessUnitCreateArgsSchema: z.ZodType<Prisma.BusinessUnitCreateArgs> = z.object({
  select: BusinessUnitSelectSchema.optional(),
  data: z.union([ BusinessUnitCreateInputSchema,BusinessUnitUncheckedCreateInputSchema ]),
}).strict() ;

export const BusinessUnitUpsertArgsSchema: z.ZodType<Prisma.BusinessUnitUpsertArgs> = z.object({
  select: BusinessUnitSelectSchema.optional(),
  where: BusinessUnitWhereUniqueInputSchema,
  create: z.union([ BusinessUnitCreateInputSchema,BusinessUnitUncheckedCreateInputSchema ]),
  update: z.union([ BusinessUnitUpdateInputSchema,BusinessUnitUncheckedUpdateInputSchema ]),
}).strict() ;

export const BusinessUnitCreateManyArgsSchema: z.ZodType<Prisma.BusinessUnitCreateManyArgs> = z.object({
  data: z.union([ BusinessUnitCreateManyInputSchema,BusinessUnitCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const BusinessUnitCreateManyAndReturnArgsSchema: z.ZodType<Prisma.BusinessUnitCreateManyAndReturnArgs> = z.object({
  data: z.union([ BusinessUnitCreateManyInputSchema,BusinessUnitCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const BusinessUnitDeleteArgsSchema: z.ZodType<Prisma.BusinessUnitDeleteArgs> = z.object({
  select: BusinessUnitSelectSchema.optional(),
  where: BusinessUnitWhereUniqueInputSchema,
}).strict() ;

export const BusinessUnitUpdateArgsSchema: z.ZodType<Prisma.BusinessUnitUpdateArgs> = z.object({
  select: BusinessUnitSelectSchema.optional(),
  data: z.union([ BusinessUnitUpdateInputSchema,BusinessUnitUncheckedUpdateInputSchema ]),
  where: BusinessUnitWhereUniqueInputSchema,
}).strict() ;

export const BusinessUnitUpdateManyArgsSchema: z.ZodType<Prisma.BusinessUnitUpdateManyArgs> = z.object({
  data: z.union([ BusinessUnitUpdateManyMutationInputSchema,BusinessUnitUncheckedUpdateManyInputSchema ]),
  where: BusinessUnitWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const BusinessUnitUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.BusinessUnitUpdateManyAndReturnArgs> = z.object({
  data: z.union([ BusinessUnitUpdateManyMutationInputSchema,BusinessUnitUncheckedUpdateManyInputSchema ]),
  where: BusinessUnitWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const BusinessUnitDeleteManyArgsSchema: z.ZodType<Prisma.BusinessUnitDeleteManyArgs> = z.object({
  where: BusinessUnitWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const GuestDomainCreateArgsSchema: z.ZodType<Prisma.GuestDomainCreateArgs> = z.object({
  select: GuestDomainSelectSchema.optional(),
  data: z.union([ GuestDomainCreateInputSchema,GuestDomainUncheckedCreateInputSchema ]),
}).strict() ;

export const GuestDomainUpsertArgsSchema: z.ZodType<Prisma.GuestDomainUpsertArgs> = z.object({
  select: GuestDomainSelectSchema.optional(),
  where: GuestDomainWhereUniqueInputSchema,
  create: z.union([ GuestDomainCreateInputSchema,GuestDomainUncheckedCreateInputSchema ]),
  update: z.union([ GuestDomainUpdateInputSchema,GuestDomainUncheckedUpdateInputSchema ]),
}).strict() ;

export const GuestDomainCreateManyArgsSchema: z.ZodType<Prisma.GuestDomainCreateManyArgs> = z.object({
  data: z.union([ GuestDomainCreateManyInputSchema,GuestDomainCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const GuestDomainCreateManyAndReturnArgsSchema: z.ZodType<Prisma.GuestDomainCreateManyAndReturnArgs> = z.object({
  data: z.union([ GuestDomainCreateManyInputSchema,GuestDomainCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const GuestDomainDeleteArgsSchema: z.ZodType<Prisma.GuestDomainDeleteArgs> = z.object({
  select: GuestDomainSelectSchema.optional(),
  where: GuestDomainWhereUniqueInputSchema,
}).strict() ;

export const GuestDomainUpdateArgsSchema: z.ZodType<Prisma.GuestDomainUpdateArgs> = z.object({
  select: GuestDomainSelectSchema.optional(),
  data: z.union([ GuestDomainUpdateInputSchema,GuestDomainUncheckedUpdateInputSchema ]),
  where: GuestDomainWhereUniqueInputSchema,
}).strict() ;

export const GuestDomainUpdateManyArgsSchema: z.ZodType<Prisma.GuestDomainUpdateManyArgs> = z.object({
  data: z.union([ GuestDomainUpdateManyMutationInputSchema,GuestDomainUncheckedUpdateManyInputSchema ]),
  where: GuestDomainWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const GuestDomainUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.GuestDomainUpdateManyAndReturnArgs> = z.object({
  data: z.union([ GuestDomainUpdateManyMutationInputSchema,GuestDomainUncheckedUpdateManyInputSchema ]),
  where: GuestDomainWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const GuestDomainDeleteManyArgsSchema: z.ZodType<Prisma.GuestDomainDeleteManyArgs> = z.object({
  where: GuestDomainWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ChannelCategoryCreateArgsSchema: z.ZodType<Prisma.ChannelCategoryCreateArgs> = z.object({
  select: ChannelCategorySelectSchema.optional(),
  include: ChannelCategoryIncludeSchema.optional(),
  data: z.union([ ChannelCategoryCreateInputSchema,ChannelCategoryUncheckedCreateInputSchema ]),
}).strict() ;

export const ChannelCategoryUpsertArgsSchema: z.ZodType<Prisma.ChannelCategoryUpsertArgs> = z.object({
  select: ChannelCategorySelectSchema.optional(),
  include: ChannelCategoryIncludeSchema.optional(),
  where: ChannelCategoryWhereUniqueInputSchema,
  create: z.union([ ChannelCategoryCreateInputSchema,ChannelCategoryUncheckedCreateInputSchema ]),
  update: z.union([ ChannelCategoryUpdateInputSchema,ChannelCategoryUncheckedUpdateInputSchema ]),
}).strict() ;

export const ChannelCategoryCreateManyArgsSchema: z.ZodType<Prisma.ChannelCategoryCreateManyArgs> = z.object({
  data: z.union([ ChannelCategoryCreateManyInputSchema,ChannelCategoryCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ChannelCategoryCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ChannelCategoryCreateManyAndReturnArgs> = z.object({
  data: z.union([ ChannelCategoryCreateManyInputSchema,ChannelCategoryCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ChannelCategoryDeleteArgsSchema: z.ZodType<Prisma.ChannelCategoryDeleteArgs> = z.object({
  select: ChannelCategorySelectSchema.optional(),
  include: ChannelCategoryIncludeSchema.optional(),
  where: ChannelCategoryWhereUniqueInputSchema,
}).strict() ;

export const ChannelCategoryUpdateArgsSchema: z.ZodType<Prisma.ChannelCategoryUpdateArgs> = z.object({
  select: ChannelCategorySelectSchema.optional(),
  include: ChannelCategoryIncludeSchema.optional(),
  data: z.union([ ChannelCategoryUpdateInputSchema,ChannelCategoryUncheckedUpdateInputSchema ]),
  where: ChannelCategoryWhereUniqueInputSchema,
}).strict() ;

export const ChannelCategoryUpdateManyArgsSchema: z.ZodType<Prisma.ChannelCategoryUpdateManyArgs> = z.object({
  data: z.union([ ChannelCategoryUpdateManyMutationInputSchema,ChannelCategoryUncheckedUpdateManyInputSchema ]),
  where: ChannelCategoryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ChannelCategoryUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ChannelCategoryUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ChannelCategoryUpdateManyMutationInputSchema,ChannelCategoryUncheckedUpdateManyInputSchema ]),
  where: ChannelCategoryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ChannelCategoryDeleteManyArgsSchema: z.ZodType<Prisma.ChannelCategoryDeleteManyArgs> = z.object({
  where: ChannelCategoryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ChannelCreateArgsSchema: z.ZodType<Prisma.ChannelCreateArgs> = z.object({
  select: ChannelSelectSchema.optional(),
  include: ChannelIncludeSchema.optional(),
  data: z.union([ ChannelCreateInputSchema,ChannelUncheckedCreateInputSchema ]),
}).strict() ;

export const ChannelUpsertArgsSchema: z.ZodType<Prisma.ChannelUpsertArgs> = z.object({
  select: ChannelSelectSchema.optional(),
  include: ChannelIncludeSchema.optional(),
  where: ChannelWhereUniqueInputSchema,
  create: z.union([ ChannelCreateInputSchema,ChannelUncheckedCreateInputSchema ]),
  update: z.union([ ChannelUpdateInputSchema,ChannelUncheckedUpdateInputSchema ]),
}).strict() ;

export const ChannelCreateManyArgsSchema: z.ZodType<Prisma.ChannelCreateManyArgs> = z.object({
  data: z.union([ ChannelCreateManyInputSchema,ChannelCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ChannelCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ChannelCreateManyAndReturnArgs> = z.object({
  data: z.union([ ChannelCreateManyInputSchema,ChannelCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ChannelDeleteArgsSchema: z.ZodType<Prisma.ChannelDeleteArgs> = z.object({
  select: ChannelSelectSchema.optional(),
  include: ChannelIncludeSchema.optional(),
  where: ChannelWhereUniqueInputSchema,
}).strict() ;

export const ChannelUpdateArgsSchema: z.ZodType<Prisma.ChannelUpdateArgs> = z.object({
  select: ChannelSelectSchema.optional(),
  include: ChannelIncludeSchema.optional(),
  data: z.union([ ChannelUpdateInputSchema,ChannelUncheckedUpdateInputSchema ]),
  where: ChannelWhereUniqueInputSchema,
}).strict() ;

export const ChannelUpdateManyArgsSchema: z.ZodType<Prisma.ChannelUpdateManyArgs> = z.object({
  data: z.union([ ChannelUpdateManyMutationInputSchema,ChannelUncheckedUpdateManyInputSchema ]),
  where: ChannelWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ChannelUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ChannelUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ChannelUpdateManyMutationInputSchema,ChannelUncheckedUpdateManyInputSchema ]),
  where: ChannelWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ChannelDeleteManyArgsSchema: z.ZodType<Prisma.ChannelDeleteManyArgs> = z.object({
  where: ChannelWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const BlobCreateArgsSchema: z.ZodType<Prisma.BlobCreateArgs> = z.object({
  select: BlobSelectSchema.optional(),
  include: BlobIncludeSchema.optional(),
  data: z.union([ BlobCreateInputSchema,BlobUncheckedCreateInputSchema ]),
}).strict() ;

export const BlobUpsertArgsSchema: z.ZodType<Prisma.BlobUpsertArgs> = z.object({
  select: BlobSelectSchema.optional(),
  include: BlobIncludeSchema.optional(),
  where: BlobWhereUniqueInputSchema,
  create: z.union([ BlobCreateInputSchema,BlobUncheckedCreateInputSchema ]),
  update: z.union([ BlobUpdateInputSchema,BlobUncheckedUpdateInputSchema ]),
}).strict() ;

export const BlobCreateManyArgsSchema: z.ZodType<Prisma.BlobCreateManyArgs> = z.object({
  data: z.union([ BlobCreateManyInputSchema,BlobCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const BlobCreateManyAndReturnArgsSchema: z.ZodType<Prisma.BlobCreateManyAndReturnArgs> = z.object({
  data: z.union([ BlobCreateManyInputSchema,BlobCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const BlobDeleteArgsSchema: z.ZodType<Prisma.BlobDeleteArgs> = z.object({
  select: BlobSelectSchema.optional(),
  include: BlobIncludeSchema.optional(),
  where: BlobWhereUniqueInputSchema,
}).strict() ;

export const BlobUpdateArgsSchema: z.ZodType<Prisma.BlobUpdateArgs> = z.object({
  select: BlobSelectSchema.optional(),
  include: BlobIncludeSchema.optional(),
  data: z.union([ BlobUpdateInputSchema,BlobUncheckedUpdateInputSchema ]),
  where: BlobWhereUniqueInputSchema,
}).strict() ;

export const BlobUpdateManyArgsSchema: z.ZodType<Prisma.BlobUpdateManyArgs> = z.object({
  data: z.union([ BlobUpdateManyMutationInputSchema,BlobUncheckedUpdateManyInputSchema ]),
  where: BlobWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const BlobUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.BlobUpdateManyAndReturnArgs> = z.object({
  data: z.union([ BlobUpdateManyMutationInputSchema,BlobUncheckedUpdateManyInputSchema ]),
  where: BlobWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const BlobDeleteManyArgsSchema: z.ZodType<Prisma.BlobDeleteManyArgs> = z.object({
  where: BlobWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const BlobResizedCreateArgsSchema: z.ZodType<Prisma.BlobResizedCreateArgs> = z.object({
  select: BlobResizedSelectSchema.optional(),
  include: BlobResizedIncludeSchema.optional(),
  data: z.union([ BlobResizedCreateInputSchema,BlobResizedUncheckedCreateInputSchema ]),
}).strict() ;

export const BlobResizedUpsertArgsSchema: z.ZodType<Prisma.BlobResizedUpsertArgs> = z.object({
  select: BlobResizedSelectSchema.optional(),
  include: BlobResizedIncludeSchema.optional(),
  where: BlobResizedWhereUniqueInputSchema,
  create: z.union([ BlobResizedCreateInputSchema,BlobResizedUncheckedCreateInputSchema ]),
  update: z.union([ BlobResizedUpdateInputSchema,BlobResizedUncheckedUpdateInputSchema ]),
}).strict() ;

export const BlobResizedCreateManyArgsSchema: z.ZodType<Prisma.BlobResizedCreateManyArgs> = z.object({
  data: z.union([ BlobResizedCreateManyInputSchema,BlobResizedCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const BlobResizedCreateManyAndReturnArgsSchema: z.ZodType<Prisma.BlobResizedCreateManyAndReturnArgs> = z.object({
  data: z.union([ BlobResizedCreateManyInputSchema,BlobResizedCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const BlobResizedDeleteArgsSchema: z.ZodType<Prisma.BlobResizedDeleteArgs> = z.object({
  select: BlobResizedSelectSchema.optional(),
  include: BlobResizedIncludeSchema.optional(),
  where: BlobResizedWhereUniqueInputSchema,
}).strict() ;

export const BlobResizedUpdateArgsSchema: z.ZodType<Prisma.BlobResizedUpdateArgs> = z.object({
  select: BlobResizedSelectSchema.optional(),
  include: BlobResizedIncludeSchema.optional(),
  data: z.union([ BlobResizedUpdateInputSchema,BlobResizedUncheckedUpdateInputSchema ]),
  where: BlobResizedWhereUniqueInputSchema,
}).strict() ;

export const BlobResizedUpdateManyArgsSchema: z.ZodType<Prisma.BlobResizedUpdateManyArgs> = z.object({
  data: z.union([ BlobResizedUpdateManyMutationInputSchema,BlobResizedUncheckedUpdateManyInputSchema ]),
  where: BlobResizedWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const BlobResizedUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.BlobResizedUpdateManyAndReturnArgs> = z.object({
  data: z.union([ BlobResizedUpdateManyMutationInputSchema,BlobResizedUncheckedUpdateManyInputSchema ]),
  where: BlobResizedWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const BlobResizedDeleteManyArgsSchema: z.ZodType<Prisma.BlobResizedDeleteManyArgs> = z.object({
  where: BlobResizedWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;